<!DOCTYPE html>
<!-- saved from url=(0035)https://angular.cn/tutorial/toh-pt6 -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Angular - HTTP</title>
  <!--<base href="/">--><base href=".">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/x-icon" href="https://angular.cn/favicon.ico">
  <link rel="icon" type="image/x-icon" href="https://angular.cn/assets/images/favicons/favicon.ico">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-194x194.png" sizes="194x194">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-16x16.png" sizes="16x16">
  <link rel="apple-touch-icon" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">

  <!-- NOTE: These need to be kept in sync with `ngsw-manifest.json`. -->
  <link href="./Angular - HTTP_files/Material_Icons.css" rel="stylesheet">
  <link href="./Angular - HTTP_files/Droid_Sans_Mono.css" rel="stylesheet">
  <link href="./Angular - HTTP_files/font-awesome.min.css" rel="stylesheet">
  <!-- -->

  <link rel="manifest" href="https://angular.cn/pwa-manifest.json">
  <meta name="theme-color" content="#1976d2">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="translucent">

  <script async="" src="./Angular - HTTP_files/analytics.js.下载"></script><script>
    // Dynamically, pre-emptively, add `noindex`, which will be removed when the doc is ready and valid
    tag = document.createElement('meta'); tag.name = 'robots'; tag.content = 'noindex';
    document.head.appendChild(tag);
  </script>

  <!-- Google Analytics -->
  <script>
  // Note this is a customised version of the GA tracking snippet
  // See the comments below for more info
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;
  ~i.name.indexOf('NG_DEFER_BOOTSTRAP')|| // only load library if not running e2e tests
  m.parentNode.insertBefore(a,m)
  })(window,document,'script','assets/js/analytics.js','ga');
  </script>
  <!-- End Google Analytics -->

  <script>
    // Report fatal errors to Google Analytics
    window.onerror = function() {
      ga('send', 'exception', {exDescription: formatError.apply(null, arguments), exFatal: true});

      function formatError(msg, url, line, col, e) {
        var stack;
        msg = msg.replace(/^Error: /, '');
        if (e) {
          stack = e.stack
              // strip the leading "Error: " from the stack trace
              .replace(/^Error: /, '')
              // strip the message from the stack trace, if present
              .replace(msg + '\n', '')
              // strip leading spaces
              .replace(/^ +/gm, '')
              // strip all leading "at " for each frame
              .replace(/^at /gm, '')
              // replace long urls with just the last segment: `filename:line:column`
              .replace(/(?: \(|@)http.+\/([^/)]+)\)?(?:\n|$)/gm, '@$1\n')
              // replace "eval code" in Edge
              .replace(/ *\(eval code(:\d+:\d+)\)(?:\n|$)/gm, '@???$1\n')
        } else {
          line = line || '?';
          col = col || '?';
          stack = url + ':' + line + ':' + col;
        }
        return (msg + '\n' + stack).substr(0, 150);
      }
    };
  </script>

  <script>
    if (window.document.documentMode) {
      // polyfill IE11 in a blocking way
      var s = document.createElement('script');
      s.src = 'generated/ie-polyfills.min.js';
      document.head.appendChild(s);
    } else if (!Object.assign) {
      // polyfill other non-evergreen browsers in a blocking way
      var polyfillUrl = "https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.find&flags=gated&unknown=polyfill";

      // send a blocking XHR to fetch the polyfill
      // then append it to the document so that its eval-ed synchronously
      // this is required because the method used for IE is not reliable with other non-evergreen browsers
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        var code = this.responseText;
        s.appendChild(document.createTextNode(code));
        document.head.appendChild(s);
      });
      xhr.open("GET", polyfillUrl, false);
      xhr.send();
    }
  </script>

  <script>
    //load CE polyfill
    //HACK: webpack's html plugin mangles the document.write calls if we don't trick it.

    //load the ES5 shim for browsers with native CE support
    function loadCustomElementsShim(){
      document.write('<scri' + 'pt src="assets/js/native-shim.js"><' + '/script>');
    }

    //load the full custom elements polyfill for browsers without support
    function loadCustomElementsPolyfill(){
      document.write('<scri' + 'pt src="assets/js/custom-elements.min.js"><' + '/script>');
    }
    //detect if we have native CE support
    if(!window.customElements){
      loadCustomElementsPolyfill();
    }
    else {
      loadCustomElementsShim();
    }
  </script><script src="./Angular - HTTP_files/native-shim.js.下载"></script>

<link rel="stylesheet" href="./Angular - HTTP_files/styles.613b7c8de73e274bd4c6.css"><style>@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}</style><style>.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:1}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]{box-shadow:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-flat-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-fab::-moz-focus-inner{border:0}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-fab[disabled]{box-shadow:none}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-mini-fab[disabled]{box-shadow:none}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}</style><style>.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}</style><style>.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}</style><script charset="utf-8" src="./Angular - HTTP_files/live-example-live-example-module-ngfactory.76888e8a441aab262101.js.下载"></script><style>.mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}</style><script charset="utf-8" src="./Angular - HTTP_files/code-code-example-module-ngfactory_code-code-tabs-module-ngfactory.6a5aabadc81dbdfa0f4e.js.下载"></script><script charset="utf-8" src="./Angular - HTTP_files/code-code-tabs-module-ngfactory.8315a94f020cd25fe92d.js.下载"></script><script charset="utf-8" src="./Angular - HTTP_files/code-code-example-module-ngfactory.d0ec50584c7428d1d6ed.js.下载"></script><script charset="utf-8" src="./Angular - HTTP_files/12.50857b4475720140b255.js.下载"></script><style>.mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}</style><style>.mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}</style><style>.mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}</style></head>
<body>

  <aio-shell ng-version="6.0.0" class="mode-stable sidenav-open page-tutorial-toh-pt6 folder-tutorial view-SideNav aio-notification-hide "><div id="top-of-page"></div><!----><mat-toolbar class="app-toolbar no-print mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary"><mat-toolbar-row class="notification-container mat-toolbar-row"><aio-notification actionurl="https://bit.ly/angular-survey-2018" buttontext="Go to survey" expirationdate="2018-01-19" icon="insert_comment" iconlabel="Survey" notificationid="survey-january-2018" class="ng-tns-c2-0 ng-trigger ng-trigger-hideAnimation" style="height: 0px;"><a class="content" href="https://bit.ly/angular-survey-2018"><mat-icon class="icon mat-icon" role="img" aria-hidden="true" aria-label="Survey"><svg fill="#FFFFFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon><span class="message"> Help Angular by taking a <b>1 minute survey</b>! </span><span class="action-button">Go to survey</span></a><button class="close-button mat-icon-button" aria-label="Close" mat-icon-button=""><span class="mat-button-wrapper"><mat-icon aria-label="Dismiss notification" class="mat-icon ng-tns-c2-0" role="img" svgicon="close" aria-hidden="true"><svg fill="#ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple mat-button-ripple-round" matripple=""></div><div class="mat-button-focus-overlay"></div></button></aio-notification></mat-toolbar-row><mat-toolbar-row class="mat-toolbar-row"><button class="hamburger mat-button" mat-button="" title="Docs menu"><span class="mat-button-wrapper"><mat-icon class="mat-icon" role="img" svgicon="menu" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple" matripple=""></div><div class="mat-button-focus-overlay"></div></button><a class="nav-link home" href="https://angular.cn/"><!----><img alt="Home" height="40" src="./Angular - HTTP_files/logo-nav@2x.png" title="Home" width="150" class="ng-star-inserted"><!----></a><!----><aio-top-menu class="ng-star-inserted"><ul role="navigation"><!----><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/features" title="特性">特性</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/docs" title="文档">文档</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/resources" title="资源">资源</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/events" title="会议">会议</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://blog.angular.io/" title="博客">博客</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/translations/cn/home" title="关于中文版">关于中文版</a></li></ul></aio-top-menu><aio-search-box class="search-container"><input aria-label="search" placeholder="搜索" type="search"></aio-search-box></mat-toolbar-row></mat-toolbar><!----><mat-sidenav-container class="sidenav-container mat-drawer-container mat-sidenav-container mat-drawer-transition has-floating-toc" role="main"><!----><div class="mat-drawer-backdrop ng-star-inserted"></div><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><mat-sidenav class="sidenav mat-drawer mat-sidenav ng-tns-c6-1 ng-trigger ng-trigger-transform mat-drawer-side ng-star-inserted" tabindex="-1" style="transform: translate3d(0px, 0px, 0px); visibility: visible;"><!----><aio-nav-menu><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/guide/quickstart" title="Angular 破冰"> 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded selected" type="button" title="此《英雄指南》教程会带你用 TypeScript 一步步创建一个 Angular 应用。" aria-pressed="true"> 教程 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial" title="第一部分：《英雄指南》教程简介"> 1. 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt0" title="第二部分：创建应用的外壳"> 2. 应用的“外壳” </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt1" title="第三部分：构建一个简单的英雄编辑器"> 3. 英雄编辑器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt2" title="第四部分：构建一个主从结构的页面，用于展现英雄列表"> 4. 显示英雄列表 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt3" title="第五部分：把主从结构的页面重构成多个组件"> 5. 主从组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt4" title="第六部分：创建一个可复用的服务来管理英雄数据"> 6. 服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt5" title="第七部分：添加 Angular 路由器，并且学习在视图之间导航"> 7. 路由 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded selected" href="https://angular.cn/tutorial/toh-pt6" title="第八部分：通过 HTTP 来获取并保存英雄数据"> 8. HTTP </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="学习 Angular 的核心知识" aria-pressed="false"> 核心知识 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 应用的基本构造块。" aria-pressed="false"> 架构 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture" title="Angular 应用的基本构造块"> 架构概览 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-modules" title="关于模块。"> 模块（NgModule）简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-components" title="关于组件、模板和视图。"> 组件简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-services" title="关于服务与依赖注入。"> 服务与 DI 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-next-steps" title="学完基础知识之后……"> 后续步骤 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="使用数据绑定构建动态视图" aria-pressed="false"> 组件与模板 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/displaying-data" title="属性绑定可以帮助应用把数据显示在界面上"> 显示数据 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/template-syntax" title="学习如何写模板，以便借助数据绑定机制显示数据并响应事件。"> 模板语法 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lifecycle-hooks" title="Angular 调用指令和组件的生命周期钩子函数，包括它的创建、变更和销毁时。"> 生命周期钩子 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-interaction" title="在不同的指令和组件之间共享信息"> 组件交互 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-styles" title="添加专属于某个组件的样式"> 组件样式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/elements" title="把组件转换成自定义元素。"> Angular 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-component-loader" title="动态加载组件"> 动态组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/attribute-directives" title="属性型指令把行为添加到现有元素上。"> 属性型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/structural-directives" title="结构型指令可以操纵页面的布局"> 结构型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/pipes" title="管道可以在模板中转换显示的内容。"> 管道 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/animations" title="Angular 动画体系指南"> 动画 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的表单" aria-pressed="false"> 表单 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/user-input" title="用户输入触发 DOM 事件。我们通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。"> 用户输入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/forms" title="表单可以创建集中、高效、引人注目的输入体验。Angular 表单可以协调一组数据绑定控件，跟踪变更，验证输入，并表达错误信息。"> 模板驱动表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/form-validation" title="验证用户的表单输入"> 表单验证 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/reactive-forms" title="使用 FormBuilder 、分组和数组创建响应式表单。"> 响应式表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-form" title="使用FormGroup渲染动态表单"> 动态表单 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Observable 与 RxJS" aria-pressed="false"> Observable 与 RxJS <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables" title=""> 可观察对象(Observable) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/rx-library" title=""> RxJS 库 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables-in-angular" title=""> Angular 中的可观察对象 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/practical-observable-usage" title=""> 用法实战 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/comparing-observables" title=""> 与其它技术的比较 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/bootstrapping" title="在应用的根模块（AppModule）中告诉 Angular 如何构造并引导引用。"> 引导启动 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 中的模块" aria-pressed="false"> Angular 模块 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodules" title="使用 NgModule 让你的应用更高效"> NgModule 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-vs-jsmodule" title="JavaScript 模块和 NgModule 之间的差异"> JS 模块 vs NgModule </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/frequent-ngmodules" title="介绍最常用的 Angular 模块"> 常用模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/module-types" title="介绍特性模块的几种类型"> 特性模块的分类 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/entry-components" title="关于 Angular 中入口组件的一切"> 入口组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/feature-modules" title="创建特性模块，以组织你的代码"> 特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/providers" title="服务提供商与 Angular 模块"> 服务提供商 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/singleton-services" title="创建单例应用"> 单例应用 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lazy-loading-ngmodules" title="惰性加载模块，以提高应用的性能"> 惰性加载的特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/sharing-ngmodules" title="共享 Angular 模块让你的应用现代化。"> 共享 Angular 模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-api" title="理解 NgModule 的那些细节。"> NgModule API </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-faq" title="回答关于 NgModules 的常见问题。"> NgModule 常见问题 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="依赖注入：创建并注入各种服务。" aria-pressed="false"> 依赖注入 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-pattern" title="学习 Angular 依赖注入系统背后的依赖注入模式"> 依赖注入模式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection" title="Angular 的依赖注入系统能够为 Angular 创建的类创建并交付它们所依赖的服务。"> Angular 依赖注入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/hierarchical-dependency-injection" title="Angular 的多级注入体系会建立与组件平行的注入器树。"> 多级注入器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-in-action" title="依赖注入的使用技巧"> DI 实用技巧 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/http" title="通过 HTTP 协议与远程服务器对话。"> HttpClient </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/router" title="揭示如何通过 Angular 路由进行基本的屏幕导航。"> 路由与导航 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/testing" title="测试 Angular 应用的技巧与实践。"> 测试 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/cheatsheet" title="关于 Angular 常用编码技术的快速指南。"> 速查表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="把 Angular 用到你的实际工作中的一些技巧" aria-pressed="false"> 其它技术 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/i18n" title="把应用模板中的文本翻译成多种语言。"> 国际化 (i18n) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/language-service" title="使用 Angular 语言服务来为开发提速。"> 语言服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/security" title="Angular 应用开发中的安全技术。"> 安全 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="环境准备与部署" aria-pressed="false"> 环境准备与部署 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup" title="在你自己的机器上安装 Angular QuickStart 种子，以便更快、更高效的开发。"> 搭建本地开发环境 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup-systemjs-anatomy" title="基于 SystemJS 的本地开发环境内幕。"> 搭建方式剖析 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/browser-support" title="浏览器支持与 Polyfills 指南"> 浏览器支持 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/npm-packages" title="建议的 npm 包，以及如何指定包的依赖。"> npm 包 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/typescript-configuration" title="给 Angular 开发者的 TypeScript 配置。"> TypeScript 配置 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/aot-compiler" title="学习如何使用 AOT 预编译器。"> 预先（AOT）编译 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/deployment" title="学习如何部署你的 Angular 应用。"> 部署 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/custom-elements" title="把 Angular 组件用作自定义元素。"> 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的 Service Worker：控制应用的资源缓存。" aria-pressed="false"> Service Worker <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-intro" title="Angular 对 Service Worker 的实现提升了慢速或不稳定的网络连接下的用户体验。"> 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-getting-started" title="在 CLI 项目中启用 Service Worker，并在浏览器中查看效果。"> 快速起步 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-communications" title="那些能让你和 Angular 的 Service Worker 通讯的服务类。"> 与 Service Worker 通讯 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-devops" title="使用 Service Worker 运行应用、管理应用更新、调试以及杀掉正在运行的应用。"> 生产环境下的 Service Worker </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-config" title="配置 Service Worker 的缓存行为。"> Service Worker 配置 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的发布实践，更新计划以及与更新有关的资源。" aria-pressed="false"> 保持最新 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/updating" title="关于如何把 Angular 应用升级到最新版的信息。"> 更新你的项目 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/releases" title="Angular 的版本、发布、支持与弃用策略。"> Angular 的版本发布 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="把 AngularJS 应用增量式的升级到 Angular。" aria-pressed="false"> 从 AngularJS 升级 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/upgrade" title="把 AngularJS 应用增量式的升级到 Angular。"> 升级步骤 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ajs-quick-reference" title="学习如何把 AngularJS 的概念映射到 Angular 中。"> AngularJS 与 Angular 的概念对照 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/universal" title="使用 Angular Universal 在服务端渲染 HTML。">  服务端渲染 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/visual-studio-2015" title="在 Visual Studio 2015 中使用快速起步中的文件"> Visual Studio 2015 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/styleguide" title="写出 Angular 风格的程序"> 风格指南 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/glossary" title="Angular 中最重要的词汇的简要定义。"> 词汇表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/api" title="关于 Angular 中类和值的详细信息。"> API 参考手册 </a></div><!----></aio-nav-item></aio-nav-menu><div class="doc-version"><aio-select><div class="form-select-menu"><button class="form-select-button"><strong></strong><!---->stable (v6.0.0) </button><!----></div></aio-select></div></mat-sidenav><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><!----><mat-sidenav-content cdkscrollable="" class="mat-drawer-content mat-sidenav-content ng-star-inserted" style="margin-left: 262px; margin-right: 0px;"><section class="sidenav-content" role="content" id="tutorial-toh-pt6"><aio-mode-banner><!----></aio-mode-banner><aio-doc-viewer class=""><div style="opacity: 1; transition: all 200ms ease-in-out;">
<div class="content">
<h1 translation-origin="off" id="http">HTTP<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#http"><i class="material-icons">link</i></a></h1><aio-toc class="embedded"></aio-toc>
<p translation-result="">在这节课中，你将借助 Angular 的 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 来添加一些数据持久化特性。</p><p translation-origin="off">In this tutorial, you'll add the following data persistence features with help from
Angular's <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>.</p>

<ul>
<li>
<p translation-result=""> <code>HeroService</code> 通过 HTTP 请求获取英雄数据。</p><p translation-origin="off">The <code>HeroService</code> gets hero data with HTTP requests.</p>

</li>
<li>
<p translation-result=""> 用户可以添加、编辑和删除英雄，并通过 HTTP 来保存这些更改。</p><p translation-origin="off">Users can add, edit, and delete heroes and save these changes over HTTP.</p>

</li>
<li>
<p translation-result=""> 用户可以根据名字搜索英雄。</p><p translation-origin="off">Users can search for heroes by name.</p>

</li>
</ul>
<p translation-result="">当你完成这一章时，应用会变成这样：<live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt6/toh-pt6.zip">下载范例</a></span></span></span></live-example>。</p><p translation-origin="off">When you're done with this page, the app should look like this <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt6/toh-pt6.zip">下载范例</a></span></span></span></live-example>.</p>

<h2 translation-result="" id="enable-http-services">启用 HTTP 服务<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#enable-http-services"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="enable-http-services">Enable HTTP services<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#enable-http-services"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 是 Angular 通过 HTTP 与远程服务器通讯的机制。</p><p translation-origin="off"><code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> is Angular's mechanism for communicating with a remote server over HTTP. </p>

<p translation-result="">要让 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 在应用中随处可用，请</p><p translation-origin="off">To make <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> available everywhere in the app,</p>

<ul>
<li>
<p translation-result=""> 打开根模块 <code>AppModule</code>，</p><p translation-origin="off">open the root <code>AppModule</code>, </p>

</li>
<li>
<p translation-result=""> 从 <code>@angular/common/http</code> 中导入 <code><a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor">HttpClientModule</a></code> 符号，</p><p translation-origin="off">import the <code><a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor">HttpClientModule</a></code> symbol from <code>@angular/common/http</code>,</p>

</li>
<li>
<p translation-result=""> 把它加入 <code>@<a href="https://angular.cn/api/core/NgModule#imports" class="code-anchor">NgModule.imports</a></code> 数组。</p><p translation-origin="off">add it to the <code>@<a href="https://angular.cn/api/core/NgModule#imports" class="code-anchor">NgModule.imports</a></code> array.</p>

</li>
</ul>
<h2 translation-result="" id="simulate-a-data-server">模拟数据服务器<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#simulate-a-data-server"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="simulate-a-data-server">Simulate a data server<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#simulate-a-data-server"><i class="material-icons">link</i></a></h2>

<p translation-result="">这个教学例子会与一个使用 <a href="https://github.com/angular/in-memory-web-api" title="In-memory Web API">内存 Web API（<em>In-memory Web API</em>）</a> 模拟出的远程数据服务器通讯。</p><p translation-origin="off">This tutorial sample <em>mimics</em> communication with a remote data server by using the
<a href="https://github.com/angular/in-memory-web-api" title="In-memory Web API"><em>In-memory Web API</em></a> module.</p>

<p translation-result="">安装完这个模块之后，应用将会通过 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 来发起请求和接收响应，而不用在乎实际上是这个内存 Web API 在拦截这些请求、操作一个内存数据库，并且给出仿真的响应。</p><p translation-origin="off">After installing the module, the app will make requests to and receive responses from the <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>
without knowing that the <em>In-memory Web API</em> is intercepting those requests,
applying them to an in-memory data store, and returning simulated responses.</p>

<p translation-result="">这给本教程带来了极大的便利。你不用被迫先架设一个服务器再来学习 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>。</p><p translation-origin="off">This facility is a great convenience for the tutorial.
You won't have to set up a server to learn about <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>.</p>

<p translation-result="">在你自己的应用开发的早期阶段这也同样很方便，那时候服务器的 Web API 可能定义上存在错误或者尚未实现。</p><p translation-origin="off">It may also be convenient in the early stages of your own app development when
the server's web api is ill-defined or not yet implemented.</p>

<div class="alert is-important">
<p translation-result=""><strong>重要：</strong> 这个<em>内存 Web API</em> 模块与 Angular 中的 HTTP 模块无关。</p><p translation-origin="off"><strong>Important:</strong> the <em>In-memory Web API</em> module has nothing to do with HTTP in Angular.</p>

<p translation-result="">如果你只是在<em>阅读</em>本教程来学习 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>，那么可以<a href="https://angular.cn/tutorial/toh-pt6#import-heroes">跳过</a>这一步。
如果你正在随着本教程<em>敲代码</em>，那就留下来，并加上这个<em>内存 Web API</em>。</p><p translation-origin="off">If you're just <em>reading</em> this tutorial to learn about <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>, you can <a href="https://angular.cn/tutorial/toh-pt6#import-heroes">skip over</a> this step.
If you're <em>coding along</em> with this tutorial, stay here and add the <em>In-memory Web API</em> now.</p>

</div>
<p translation-result="">从 <code>npm</code> 中安装这个<em>内存 Web API</em> 包（译注：请使用 0.5+ 的版本，不要使用 0.4-）</p><p translation-origin="off">Install the <em>In-memory Web API</em> package from <em>npm</em></p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">
  npm install angular-in-memory-web-api --save
</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">npm install angular</span><span class="pun">-</span><span class="kwd">in</span><span class="pun">-</span><span class="pln">memory</span><span class="pun">-</span><span class="pln">web</span><span class="pun">-</span><span class="pln">api </span><span class="pun">--</span><span class="pln">save</span></code>
    </pre></aio-code></code-example>
<p translation-result="">导入 <code>HttpClientInMemoryWebApiModule</code> 和 <code>InMemoryDataService</code> 类（你很快就要创建它）。</p><p translation-origin="off">Import the <code>HttpClientInMemoryWebApiModule</code> and the <code>InMemoryDataService</code> class,
which you will create in a moment.</p>

<code-example path="toh-pt6/src/app/app.module.ts" region="import-in-mem-stuff" title="src/app/app.module.ts (In-memory Web API imports)" ng-version="6.0.0"><div style="display: none">
import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService }  from './in-memory-data.service';

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (In-memory Web API imports)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (In-memory Web API imports)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HttpClientInMemoryWebApiModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'angular-in-memory-web-api'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">InMemoryDataService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./in-memory-data.service'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把 <code>HttpClientInMemoryWebApiModule</code> 添加到 <code>@<a href="https://angular.cn/api/core/NgModule#imports" class="code-anchor">NgModule.imports</a></code> 数组中（放在 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 之后），
然后使用 <code>InMemoryDataService</code> 来配置它。</p><p translation-origin="off">Add the <code>HttpClientInMemoryWebApiModule</code> to the <code>@<a href="https://angular.cn/api/core/NgModule#imports" class="code-anchor">NgModule.imports</a></code> array—
<em>after importing the <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code></em>,
—while configuring it with the <code>InMemoryDataService</code>.</p>

<code-example path="toh-pt6/src/app/app.module.ts" region="in-mem-web-api-imports" ng-version="6.0.0"><div style="display: none">
<a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor">HttpClientModule</a>,

// The HttpClientInMemoryWebApiModule module intercepts HTTP requests
// and returns simulated server responses.
// Remove it when <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> real server is ready to receive requests.
HttpClientInMemoryWebApiModule.forRoot(
  InMemoryDataService, { dataEncapsulation: false }
)

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor"><span class="typ">HttpClientModule</span></a><span class="pun">,</span><span class="pln">

</span><span class="com">// The HttpClientInMemoryWebApiModule module intercepts HTTP requests</span><span class="pln">
</span><span class="com">// and returns simulated server responses.</span><span class="pln">
</span><span class="com">// Remove it when </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> real server is ready to receive requests.</span><span class="pln">
</span><span class="typ">HttpClientInMemoryWebApiModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
  </span><span class="typ">InMemoryDataService</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> dataEncapsulation</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">false</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">)</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>forRoot()</code> 配置方法接受一个 <code>InMemoryDataService</code> 类（初期的内存数据库）作为参数。</p><p translation-origin="off">The <code>forRoot()</code> configuration method takes an <code>InMemoryDataService</code> class
that primes the in-memory database.</p>

<p translation-result="">在<em>英雄指南</em>范例中创建一个类 <code>src/app/in-memory-data.service.ts</code>，内容如下：</p><p translation-origin="off">The <em>Tour of Heroes</em> sample creates such a class
<code>src/app/in-memory-data.service.ts</code> which has the following content:</p>

<code-example path="toh-pt6/src/app/in-memory-data.service.ts" region="init" title="src/app/in-memory-data.service.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { InMemoryDbService } from 'angular-in-memory-web-api';

export class InMemoryDataService implements InMemoryDbService {
  createDb() {
    const heroes = [
      { id: 11, name: 'Mr. Nice' },
      { id: 12, name: 'Narco' },
      { id: 13, name: 'Bombasto' },
      { id: 14, name: 'Celeritas' },
      { id: 15, name: 'Magneta' },
      { id: 16, name: 'RubberMan' },
      { id: 17, name: 'Dynama' },
      { id: 18, name: 'Dr IQ' },
      { id: 19, name: 'Magma' },
      { id: 20, name: 'Tornado' }
    ];
    return {heroes};
  }
}


</div><!----><header class="ng-star-inserted">src/app/in-memory-data.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/in-memory-data.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">InMemoryDbService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'angular-in-memory-web-api'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">InMemoryDataService</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><span class="typ">InMemoryDbService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  createDb</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> heroes </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">11</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Mr. Nice'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">12</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Narco'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">13</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Bombasto'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">14</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Celeritas'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">15</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Magneta'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">16</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'RubberMan'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">17</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Dynama'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">18</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Dr IQ'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">19</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Magma'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">20</span><span class="pun">,</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Tornado'</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">];</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span><span class="pln">heroes</span><span class="pun">};</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这个文件替代了 <code>mock-heroes.ts</code>（你可以安全删除它了）。</p><p translation-origin="off">This file replaces <code>mock-heroes.ts</code>, which is now safe to delete.</p>

<p translation-result="">等你真实的服务器就绪时，就可以删除这个<em>内存 Web API</em>，该应用的请求就会直接发给真实的服务器。</p><p translation-origin="off">When your server is ready, detach the <em>In-memory Web API</em>, and the app's requests will go through to the server.</p>

<p translation-result="">现在，回来看 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code>。</p><p translation-origin="off">Now back to the <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> story.</p>

<a id="import-heroes"></a>
<h2 translation-result="" id="heroes-and-http">英雄与 HTTP<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#heroes-and-http"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="heroes-and-http">Heroes and HTTP<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#heroes-and-http"><i class="material-icons">link</i></a></h2>

<p translation-result="">导入一些所需的 HTTP 符号：</p><p translation-origin="off">Import some HTTP symbols that you'll need:</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="import-httpclient" title="src/app/hero.service.ts (import HTTP symbols)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a>, <a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor">HttpHeaders</a> } from '@angular/common/http';

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts (import HTTP symbols)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts (import HTTP symbols)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor"><span class="typ">HttpClient</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor"><span class="typ">HttpHeaders</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common/http'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 注入到构造函数中一个名叫 <code>http</code> 的私有属性中。</p><p translation-origin="off">Inject <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> into the constructor in a private property called <code>http</code>.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="ctor" ng-version="6.0.0"><div style="display: none">
constructor(
  private http: <a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a>,
  private messageService: MessageService) { }

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> http</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor"><span class="typ">HttpClient</span></a><span class="pun">,</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> messageService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">MessageService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">保留对 <code>MessageService</code> 的注入。你将会频繁调用它，因此请把它包裹进一个私有的 <code>log</code> 方法中。</p><p translation-origin="off">Keep injecting the <code>MessageService</code>. You'll call it so frequently that
you'll wrap it in private <code>log</code> method.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="log" ng-version="6.0.0"><div style="display: none">
/** Log <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> HeroService message with the MessageService */
private log(message: string) {
  this.messageService.add('HeroService: ' + message);
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** Log </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> HeroService message with the MessageService */</span><span class="pln">
</span><span class="kwd">private</span><span class="pln"> log</span><span class="pun">(</span><span class="pln">message</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">messageService</span><span class="pun">.</span><span class="kwd">add</span><span class="pun">(</span><span class="str">'HeroService: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> message</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把服务器上英雄数据资源的访问地址定义为 <code>heroesURL</code>。</p><p translation-origin="off">Define the <code>heroesUrl</code> with the address of the heroes resource on the server.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="heroesUrl" ng-version="6.0.0"><div style="display: none">
private heroesUrl = 'api/heroes';  // URL to web api

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">private</span><span class="pln"> heroesUrl </span><span class="pun">=</span><span class="pln"> </span><span class="str">'api/heroes'</span><span class="pun">;</span><span class="pln">  </span><span class="com">// URL to web api</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="get-heroes-with-emhttpclientem">通过 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 获取英雄<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#get-heroes-with-emhttpclientem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="get-heroes-with-httpclient">Get heroes with <em>HttpClient</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#get-heroes-with-httpclient"><i class="material-icons">link</i></a></h3>

<p translation-result="">当前的 <code>HeroService.getHeroes()</code> 使用 RxJS 的 <code>of()</code> 函数来把模拟英雄数据返回为 <code>Observable&lt;Hero[]&gt;</code> 格式。</p><p translation-origin="off">The current <code>HeroService.getHeroes()</code>
uses the RxJS <code>of()</code> function to return an array of mock heroes
as an <code>Observable&lt;Hero[]&gt;</code>.</p>

<code-example path="toh-pt4/src/app/hero.service.ts" region="getHeroes-1" title="src/app/hero.service.ts (getHeroes with RxJs &#39;of()&#39;)" ng-version="6.0.0"><div style="display: none">
getHeroes(): Observable&lt;Hero[]&gt; {
  return of(HEROES);
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts (getHeroes with RxJs 'of()')</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts (getHeroes with RxJs &#39;of()&#39;)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">getHeroes</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="pln">HEROES</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把该方法转换成使用 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 的</p><p translation-origin="off">Convert that method to use <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code></p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="getHeroes-1" ng-version="6.0.0"><div style="display: none">
/** GET heroes from the server */
getHeroes (): Observable&lt;Hero[]&gt; {
  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** GET heroes from the server */</span><span class="pln">
getHeroes </span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">)</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">刷新浏览器后，英雄数据就会从模拟服务器被成功读取。</p><p translation-origin="off">Refresh the browser. The hero data should successfully load from the
mock server.</p>

<p translation-result="">你用 <code>http.get</code> 替换了 <code>of</code>，没有做其它修改，但是应用仍然在正常工作，这是因为这两个函数都返回了 <code>Observable&lt;Hero[]&gt;</code>。</p><p translation-origin="off">You've swapped <code>of</code> for <code>http.get</code> and the app keeps working without any other changes
because both functions return an <code>Observable&lt;Hero[]&gt;</code>.</p>

<h3 translation-result="" id="http-methods-return-one-value">Http 方法返回单个值<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#http-methods-return-one-value"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="http-methods-return-one-value">Http methods return one value<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#http-methods-return-one-value"><i class="material-icons">link</i></a></h3>

<p translation-result="">所有的 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 方法都会返回某个值的 RxJS <code>Observable</code>。</p><p translation-origin="off">All <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> methods return an RxJS <code>Observable</code> of something.</p>

<p translation-result="">HTTP 是一个请求/响应式协议。你发起请求，它返回单个的响应。</p><p translation-origin="off">HTTP is a request/response protocol.
You make a request, it returns a single response.</p>

<p translation-result="">通常，<code>Observable</code> <em>可以</em>在一段时间内返回多个值。
但来自 <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> 的 <code>Observable</code> 总是发出一个值，然后结束，再也不会发出其它值。</p><p translation-origin="off">In general, an observable <em>can</em> return multiple values over time.
An observable from <code><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a></code> always emits a single value and then completes, never to emit again.</p>

<p translation-result="">具体到这次 <code>HttpClient.get</code> 调用，它返回一个 <code>Observable&lt;Hero[]&gt;</code>，顾名思义就是“一个英雄数组的可观察对象”。在实践中，它也只会返回一个英雄数组。</p><p translation-origin="off">This particular <code>HttpClient.get</code> call returns an <code>Observable&lt;Hero[]&gt;</code>, literally "<em>an observable of hero arrays</em>". In practice, it will only return a single hero array.</p>

<h3 translation-result="" id="emhttpclientgetem-returns-response-data"><code>HttpClient.get</code> 返回响应数据<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#emhttpclientgetem-returns-response-data"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="httpclientget-returns-response-data"><em>HttpClient.get</em> returns response data<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#httpclientget-returns-response-data"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>HttpClient.get</code> 默认情况下把响应体当做无类型的 JSON 对象进行返回。
如果指定了可选的模板类型 <code>&lt;Hero[]&gt;</code>，就会给返回你一个类型化的对象。</p><p translation-origin="off"><code>HttpClient.get</code> returns the <em>body</em> of the response as an untyped JSON object by default.
Applying the optional type specifier, <code>&lt;Hero[]&gt;</code> , gives you a typed result object.</p>

<p translation-result="">JSON 数据的具体形态是由服务器的数据 API 决定的。
<em>英雄指南</em>的数据 API 会把英雄数据作为一个数组进行返回。</p><p translation-origin="off">The shape of the JSON data is determined by the server's data API.
The <em>Tour of Heroes</em> data API returns the hero data as an array.</p>

<div class="l-sub-section">
<p translation-result="">其它 API 可能在返回对象中深埋着你想要的数据。
你可能要借助 RxJS 的 <code>map</code> 操作符对 <code>Observable</code> 的结果进行处理，以便把这些数据挖掘出来。</p><p translation-origin="off">Other APIs may bury the data that you want within an object.
You might have to dig that data out by processing the <code>Observable</code> result
with the RxJS <code>map</code> operator.</p>

<p translation-result="">虽然不打算在此展开讨论，不过你可以到范例源码中的 <code>getHeroNo404()</code> 方法中找到一个使用 <code>map</code> 操作符的例子。</p><p translation-origin="off">Although not discussed here, there's an example of <code>map</code> in the <code>getHeroNo404()</code>
method included in the sample source code.</p>

</div>
<h3 translation-result="" id="error-handling-4">错误处理<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#error-handling-4"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="error-handling">Error handling<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#error-handling"><i class="material-icons">link</i></a></h3>

<p translation-result="">凡事皆会出错，特别是当你从远端服务器获取数据的时候。
<code>HeroService.getHeroes()</code> 方法应该捕获错误，并做适当的处理。</p><p translation-origin="off">Things go wrong, especially when you're getting data from a remote server.
The <code>HeroService.getHeroes()</code> method should catch errors and do something appropriate.</p>

<p translation-result="">要捕获错误，你就要使用 RxJS 的 <code>catchError()</code> 操作符来<strong>建立对 Observable 结果的处理管道（pipe）</strong>。</p><p translation-origin="off">To catch errors, you <strong>"pipe" the observable</strong> result from <code>http.get()</code> through an RxJS <code>catchError()</code> operator.</p>

<p translation-result="">从 <code>rxjs/operators</code> 中导入 <code>catchError</code> 符号，以及你稍后将会用到的其它操作符。</p><p translation-origin="off">Import the <code>catchError</code> symbol from <code>rxjs/operators</code>, along with some other operators you'll need later.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="import-rxjs-operators" ng-version="6.0.0"><div style="display: none">
import { catchError, map, tap } from 'rxjs/operators';

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> catchError</span><span class="pun">,</span><span class="pln"> map</span><span class="pun">,</span><span class="pln"> tap </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">现在，使用 <code>.pipe()</code> 方法来扩展 <code>Observable</code> 的结果，并给它一个 <code>catchError()</code> 操作符。</p><p translation-origin="off">Now extend the observable result with the <code>.pipe()</code> method and
give it a <code>catchError()</code> operator.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="getHeroes-2" ng-version="6.0.0"><div style="display: none">
getHeroes (): Observable&lt;Hero[]&gt; {
  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)
    .pipe(
      catchError(this.handleError('getHeroes', []))
    );
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">getHeroes </span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">(</span><span class="str">'getHeroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]))</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>catchError()</code> 操作符会拦截<strong>失败的 <code>Observable</code></strong>。
它把错误对象传给<em>错误处理器</em>，<em>错误处理器</em>会处理这个错误。</p><p translation-origin="off">The <code>catchError()</code> operator intercepts an <strong><code>Observable</code> that failed</strong>.
It passes the error an <em>error handler</em> that can do what it wants with the error.</p>

<p translation-result="">下面的 <code>handleError()</code> 方法会报告这个错误，并返回一个无害的结果（安全值），以便应用能正常工作。</p><p translation-origin="off">The following <code>handleError()</code> method reports the error and then returns an
innocuous result so that the application keeps working.</p>

<h4 translation-origin="off" id="handleerror"><em>handleError</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#handleerror"><i class="material-icons">link</i></a></h4>
<p translation-result="">下面这个 <code>errorHandler()</code> 将会在很多 <code>HeroService</code> 的方法之间共享，所以要把它通用化，以支持这些彼此不同的需求。</p><p translation-origin="off">The following <code>errorHandler()</code> will be shared by many <code>HeroService</code> methods
so it's generalized to meet their different needs.</p>

<p translation-result="">它不再直接处理这些错误，而是返回给 <code>catchError</code> 返回一个<em>错误处理</em>函数。还要用操作名和出错时要返回的安全值来对这个错误处理函数进行配置。</p><p translation-origin="off">Instead of handling the error directly, it returns an <em>error handler</em> function to <code>catchError</code> that it
has configured with both the name of the operation that failed and a safe return value.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="handleError" ng-version="6.0.0"><div style="display: none">
/**
 * Handle <a href="https://angular.cn/api/http/Http" class="code-anchor">Http</a> operation that failed.
 * Let the app continue.
 * @param operation - name of the operation that failed
 * @param result - optional value to return as the observable result
 */
private handleError&lt;T&gt; (operation = 'operation', result?: T) {
  return (error: any): Observable&lt;T&gt; =&gt; {

    // TODO: send the error to remote logging infrastructure
    console.error(error); // log to console instead

    // TODO: better job of transforming error for user consumption
    this.log(`${operation} failed: ${error.message}`);

    // Let the app keep running by returning an empty result.
    return of(result as T);
  };
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="com">/**</span></li><li class="L1"><span class="com"> * Handle </span><a href="https://angular.cn/api/http/Http" class="code-anchor"><span class="com">Http</span></a><span class="com"> operation that failed.</span></li><li class="L2"><span class="com"> * Let the app continue.</span></li><li class="L3"><span class="com"> * @param operation - name of the operation that failed</span></li><li class="L4"><span class="com"> * @param result - optional value to return as the observable result</span></li><li class="L5"><span class="com"> */</span></li><li class="L6"><span class="kwd">private</span><span class="pln"> handleError</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">operation </span><span class="pun">=</span><span class="pln"> </span><span class="str">'operation'</span><span class="pun">,</span><span class="pln"> result</span><span class="pun">?:</span><span class="pln"> T</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">error</span><span class="pun">:</span><span class="pln"> any</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="pln">    </span><span class="com">// TODO: send the error to remote logging infrastructure</span></li><li class="L0"><span class="pln">    console</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="pln">error</span><span class="pun">);</span><span class="pln"> </span><span class="com">// log to console instead</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="pln">    </span><span class="com">// TODO: better job of transforming error for user consumption</span></li><li class="L3"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`${operation} failed: ${error.message}`</span><span class="pun">);</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">    </span><span class="com">// Let the app keep running by returning an empty result.</span></li><li class="L6"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="pln">result </span><span class="kwd">as</span><span class="pln"> T</span><span class="pun">);</span></li><li class="L7"><span class="pln">  </span><span class="pun">};</span></li><li class="L8"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">在控制台中汇报了这个错误之后，这个处理器会汇报一个用户友好的消息，并给应用返回一个安全值，让它继续工作。</p><p translation-origin="off">After reporting the error to console, the handler constructs
a user friendly message and returns a safe value to the app so it can keep working.</p>

<p translation-result="">因为每个服务方法都会返回不同类型的 <code>Observable</code> 结果，因此 <code>errorHandler()</code> 也需要一个类型参数，以便它返回一个此类型的安全值，正如应用所期望的那样。</p><p translation-origin="off">Because each service method returns a different kind of <code>Observable</code> result,
<code>errorHandler()</code> takes a type parameter so it can return the safe value as the type that the app expects.</p>

<h3 translation-result="" id="tap-into-the-emobservableem">窥探 <code>Observable</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#tap-into-the-emobservableem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="tap-into-the-observable">Tap into the <em>Observable</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#tap-into-the-observable"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>HeroService</code> 的方法将会窥探 <code>Observable</code> 的数据流，并通过 <code>log()</code> 函数往页面底部发送一条消息。</p><p translation-origin="off">The <code>HeroService</code> methods will <strong>tap</strong> into the flow of observable values
and send a message (via <code>log()</code>) to the message area at the bottom of the page.</p>

<p translation-result="">它们可以使用 RxJS 的 <code>tap</code> 操作符来实现，该操作符会<em>查看</em> Observable 中的值，使用那些值做一些事情，并且把它们传出来。
这种 <code>tap</code> 回调不会改变这些值本身。</p><p translation-origin="off">They'll do that with the RxJS <code>tap</code> operator,
which <em>looks</em> at the observable values, does <em>something</em> with those values,
and passes them along.
The <code>tap</code> call back doesn't touch the values themselves.</p>

<p translation-result="">下面是 <code>getHeroes</code> 的最终版本，它使用 <code>tap</code> 来记录各种操作。</p><p translation-origin="off">Here is the final version of <code>getHeroes</code> with the <code>tap</code> that logs the operation.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="getHeroes" ng-version="6.0.0"><div style="display: none">
/** GET heroes from the server */
getHeroes (): Observable&lt;Hero[]&gt; {
  return this.http.get&lt;Hero[]&gt;(this.heroesUrl)
    .pipe(
      tap(heroes =&gt; this.log(`fetched heroes`)),
      catchError(this.handleError('getHeroes', []))
    );
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** GET heroes from the server */</span><span class="pln">
getHeroes </span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
      tap</span><span class="pun">(</span><span class="pln">heroes </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`fetched heroes`</span><span class="pun">)),</span><span class="pln">
      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">(</span><span class="str">'getHeroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]))</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="get-hero-by-id">通过 id 获取英雄<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#get-hero-by-id"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="get-hero-by-id">Get hero by id<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#get-hero-by-id"><i class="material-icons">link</i></a></h3>

<p translation-result="">大多数 web API 都可以通过 <code>api/hero/:id</code> 的形式（比如 <code>api/hero/:id</code> ）支持<em>根据 id 获取单个对象</em>。
添加一个 <code>HeroService.getHero()</code> 方法来发起请求：</p><p translation-origin="off">Most web APIs support a <em>get by id</em> request in the form <code>api/hero/:id</code>
(such as <code>api/hero/11</code>).
Add a <code>HeroService.getHero()</code> method to make that request:</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="getHero" title="src/app/hero.service.ts" ng-version="6.0.0"><div style="display: none">
/** GET hero by id. Will 404 if id not found */
getHero(id: number): Observable&lt;Hero&gt; {
  const url = `${this.heroesUrl}/${id}`;
  return this.http.get&lt;Hero&gt;(url).pipe(
    tap(_ =&gt; this.log(`fetched hero id=${id}`)),
    catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** GET hero by id. Will 404 if id not found */</span><span class="pln">
getHero</span><span class="pun">(</span><span class="pln">id</span><span class="pun">:</span><span class="pln"> number</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`${this.heroesUrl}/${id}`</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="pln">url</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`fetched hero id=${id}`</span><span class="pun">)),</span><span class="pln">
    catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">`getHero id=${id}`</span><span class="pun">))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里和 <code>getHeroes()</code> 相比有三个显著的差异。</p><p translation-origin="off">There are three significant differences from  <code>getHeroes()</code>.</p>

<ul>
<li>
<p translation-result=""> 它使用想获取的英雄的 id 构建了一个请求 URL。</p><p translation-origin="off">it constructs a request URL with the desired hero's id.</p>

</li>
<li>
<p translation-result=""> 服务器应该使用单个英雄作为回应，而不是一个英雄数组。</p><p translation-origin="off">the server should respond with a single hero rather than an array of heroes.</p>

</li>
<li>
<p translation-result="">  所以，<code>getHero</code> 会返回 <code>Observable&lt;Hero&gt;</code>（“一个可观察的<em>单个英雄对象</em>”），而不是一个可观察的英雄对象<em>数组</em>。</p><p translation-origin="off">therefore, <code>getHero</code> returns an <code>Observable&lt;Hero&gt;</code> ("<em>an observable of Hero objects</em>")
rather than an observable of hero <em>arrays</em> .</p>

</li>
</ul>
<h2 translation-result="" id="update-heroes">修改英雄<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#update-heroes"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="update-heroes">Update heroes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#update-heroes"><i class="material-icons">link</i></a></h2>

<p translation-result="">在<em>英雄详情</em>视图中编辑英雄的名字。
随着输入，英雄的名字也跟着在页面顶部的标题区更新了。
但是当你点击“后退”按钮时，这些修改都丢失了。</p><p translation-origin="off">Editing a hero's name in the <em>hero detail</em> view.
As you type, the hero name updates the heading at the top of the page.
But when you click the "go back button", the changes are lost.</p>

<p translation-result="">如果你希望保留这些修改，就要把它们写回到服务器。</p><p translation-origin="off">If you want changes to persist, you must write them back to
the server.</p>

<p translation-result="">在英雄详情模板的底部添加一个保存按钮，它绑定了一个 <code>click</code> 事件，事件绑定会调用组件中一个名叫 <code>save()</code> 的新方法：</p><p translation-origin="off">At the end of the hero detail template, add a save button with a <code>click</code> event
binding that invokes a new component method named <code>save()</code>.</p>

<code-example path="toh-pt6/src/app/hero-detail/hero-detail.component.html" region="save" title="src/app/hero-detail/hero-detail.component.html (save)" ng-version="6.0.0"><div style="display: none">
&lt;button (click)="save()"&gt;save&lt;/button&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (save)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (save)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"save()"</span><span class="tag">&gt;</span><span class="pln">save</span><span class="tag">&lt;/button&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">添加如下的 <code>save()</code> 方法，它使用英雄服务中的 <code>updateHero()</code> 方法来保存对英雄名字的修改，然后导航回前一个视图。</p><p translation-origin="off">Add the following <code>save()</code> method, which persists hero name changes using the hero service
<code>updateHero()</code> method and then navigates back to the previous view.</p>

<code-example path="toh-pt6/src/app/hero-detail/hero-detail.component.ts" region="save" title="src/app/hero-detail/hero-detail.component.ts (save)" ng-version="6.0.0"><div style="display: none">
save(): void {
   this.heroService.updateHero(this.hero)
     .subscribe(() =&gt; this.goBack());
 }

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (save)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (save)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">save</span><span class="pun">():</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
   </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">updateHero</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">)</span><span class="pln">
     </span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">goBack</span><span class="pun">());</span><span class="pln">
 </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<h4 translation-result="" id="add-emheroserviceupdateheroem">添加 <em>HeroService.updateHero()</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-emheroserviceupdateheroem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-heroserviceupdatehero">Add <em>HeroService.updateHero()</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-heroserviceupdatehero"><i class="material-icons">link</i></a></h4>

<p translation-result=""><code>updateHero()</code> 的总体结构和 <code>getHeroes()</code> 很相似，但它会使用 <code>http.put()</code> 来把修改后的英雄保存到服务器上。</p><p translation-origin="off">The overall structure of the <code>updateHero()</code> method is similar to that of
<code>getHeroes()</code>, but it uses <code>http.put()</code> to persist the changed hero
on the server.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="updateHero" title="src/app/hero.service.ts (update)" ng-version="6.0.0"><div style="display: none">
/** PUT: update the hero on the server */
updateHero (hero: Hero): Observable&lt;any&gt; {
  return this.http.put(this.heroesUrl, hero, httpOptions).pipe(
    tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),
    catchError(this.handleError&lt;any&gt;('updateHero'))
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts (update)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts (update)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** PUT: update the hero on the server */</span><span class="pln">
updateHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;any&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`updated hero id=${hero.id}`</span><span class="pun">)),</span><span class="pln">
    catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="str">&lt;any&gt;</span><span class="pun">(</span><span class="str">'updateHero'</span><span class="pun">))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code><a href="https://angular.cn/" class="code-anchor">HttpClient.put()</a></code> 方法接受三个参数</p><p translation-origin="off">The <code><a href="https://angular.cn/" class="code-anchor">HttpClient.put()</a></code> method takes three parameters</p>

<ul>
<li>
<p translation-result=""> URL 地址</p><p translation-origin="off">the URL</p>

</li>
<li>
<p translation-result=""> 要修改的数据（这里就是修改后的英雄）</p><p translation-origin="off">the data to update (the modified hero in this case)</p>

</li>
<li>
<p translation-result=""> 选项</p><p translation-origin="off">options</p>

</li>
</ul>
<p translation-result="">URL 没变。英雄 Web API 通过英雄对象的 <code>id</code> 就可以知道要修改哪个英雄。</p><p translation-origin="off">The URL is unchanged. The heroes web API knows which hero to update by looking at the hero's <code>id</code>.</p>

<p translation-result="">英雄 Web API 期待在保存时的请求中有一个特殊的头。
这个头是在 <code>HeroService</code> 的 <code>httpOptions</code> 常量中定义的。</p><p translation-origin="off">The heroes web API expects a special header in HTTP save requests.
That header is in the <code>httpOptions</code> constant defined in the <code>HeroService</code>.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="http-options" ng-version="6.0.0"><div style="display: none">
const httpOptions = {
  headers: new <a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor">HttpHeaders</a>({ 'Content-Type': 'application/json' })
};

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> httpOptions </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  headers</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor"><span class="typ">HttpHeaders</span></a><span class="pun">({</span><span class="pln"> </span><span class="str">'Content-Type'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'application/json'</span><span class="pln"> </span><span class="pun">})</span><span class="pln">
</span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<p translation-result="">刷新浏览器，修改英雄名，保存这些修改，然后点击“后退”按钮。
现在，改名后的英雄已经显示在列表中了。</p><p translation-origin="off">Refresh the browser, change a hero name, save your change,
and click the "go back" button.
The hero now appears in the list with the changed name.</p>

<h2 translation-result="" id="add-a-new-hero">添加新英雄<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-a-new-hero"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="add-a-new-hero">Add a new hero<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-a-new-hero"><i class="material-icons">link</i></a></h2>

<p translation-result="">要添加英雄，本应用中只需要英雄的名字。你可以使用一个和添加按钮成对的 <code>input</code> 元素。</p><p translation-origin="off">To add a hero, this app only needs the hero's name. You can use an <code>input</code>
element paired with an add button.</p>

<p translation-result="">把下列代码插入到 <code>HeroesComponent</code> 模板中标题的紧后面：</p><p translation-origin="off">Insert the following into the <code>HeroesComponent</code> template, just after
the heading:</p>

<code-example path="toh-pt6/src/app/heroes/heroes.component.html" region="add" title="src/app/heroes/heroes.component.html (add)" ng-version="6.0.0"><div style="display: none">
&lt;div&gt;
  &lt;label&gt;Hero name:
    &lt;input #heroName /&gt;
  &lt;/label&gt;
  &lt;!-- (click) passes input value to add() and then clears the input --&gt;
  &lt;button (click)="add(heroName.value); heroName.value=''"&gt;
    add
  &lt;/button&gt;
&lt;/div&gt;

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.component.html (add)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.html (add)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div&gt;</span><span class="pln">
  </span><span class="tag">&lt;label&gt;</span><span class="pln">Hero name:
    </span><span class="tag">&lt;input</span><span class="pln"> #</span><span class="atn">heroName</span><span class="pln"> </span><span class="tag">/&gt;</span><span class="pln">
  </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="com">&lt;!-- (click) passes input value to add() and then clears the input --&gt;</span><span class="pln">
  </span><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"add(heroName.value); heroName.value=''"</span><span class="tag">&gt;</span><span class="pln">
    add
  </span><span class="tag">&lt;/button&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当点击事件触发时，调用组件的点击处理器，然后清空这个输入框，以便用来输入另一个名字。</p><p translation-origin="off">In response to a click event, call the component's click handler and then
clear the input field so that it's ready for another name.</p>

<code-example path="toh-pt6/src/app/heroes/heroes.component.ts" region="add" title="src/app/heroes/heroes.component.ts (add)" ng-version="6.0.0"><div style="display: none">
add(name: string): void {
  name = name.trim();
  if (!name) { return; }
  this.heroService.addHero({ name } as Hero)
    .subscribe(hero =&gt; {
      this.heroes.push(hero);
    });
}

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.component.ts (add)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.ts (add)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">add</span><span class="pun">(</span><span class="pln">name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  name </span><span class="pun">=</span><span class="pln"> name</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">();</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">name</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">addHero</span><span class="pun">({</span><span class="pln"> name </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">(</span><span class="pln">hero </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当指定的名字非空时，这个处理器会用这个名字创建一个类似于 <code>Hero</code> 的对象（只缺少 <code>id</code> 属性），并把它传给服务的 <code>addHero()</code> 方法。</p><p translation-origin="off">When the given name is non-blank, the handler creates a <code>Hero</code>-like object
from the name (it's only missing the <code>id</code>) and passes it to the services <code>addHero()</code> method.</p>

<p translation-result="">当 <code>addHero</code> 保存成功时，<code>subscribe</code> 的回调函数会收到这个新英雄，并把它追加到 <code>heroes</code> 列表中以供显示。</p><p translation-origin="off">When <code>addHero</code> saves successfully, the <code>subscribe</code> callback
receives the new hero and pushes it into to the <code>heroes</code> list for display.</p>

<p translation-result="">你将在下一节编写 <code>HeroService.addHero</code>。</p><p translation-origin="off">You'll write <code>HeroService.addHero</code> in the next section.</p>

<h4 translation-result="" id="add-emheroserviceaddheroem">添加 <code>HeroService.addHero()</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-emheroserviceaddheroem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-heroserviceaddhero">Add <em>HeroService.addHero()</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-heroserviceaddhero"><i class="material-icons">link</i></a></h4>

<p translation-result="">往 <code>HeroService</code> 类中添加 <code>addHero()</code> 方法。</p><p translation-origin="off">Add the following <code>addHero()</code> method to the <code>HeroService</code> class.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="addHero" title="src/app/hero.service.ts (addHero)" ng-version="6.0.0"><div style="display: none">
/** POST: add <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new hero to the server */
addHero (hero: Hero): Observable&lt;Hero&gt; {
  return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions).pipe(
    tap((hero: Hero) =&gt; this.log(`added hero w/ id=${hero.id}`)),
    catchError(this.handleError&lt;Hero&gt;('addHero'))
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts (addHero)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts (addHero)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** POST: add </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new hero to the server */</span><span class="pln">
addHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="pln">post</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    tap</span><span class="pun">((</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`added hero w/ id=${hero.id}`</span><span class="pun">)),</span><span class="pln">
    catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">'addHero'</span><span class="pun">))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>HeroService.addHero()</code> 和 <code>updateHero</code> 有两点不同。</p><p translation-origin="off"><code>HeroService.addHero()</code> differs from <code>updateHero</code> in two ways.</p>

<ul>
<li>
<p translation-result=""> 它调用 <code><a href="https://angular.cn/" class="code-anchor">HttpClient.post()</a></code> 而不是 <code>put()</code>。</p><p translation-origin="off">it calls <code><a href="https://angular.cn/" class="code-anchor">HttpClient.post()</a></code> instead of <code>put()</code>.</p>

</li>
<li>
<p translation-result="">   它期待服务器为这个新的英雄生成一个 id，然后把它通过 <code>Observable&lt;Hero&gt;</code> 返回给调用者。</p><p translation-origin="off">it expects the server to generates an id for the new hero,
which it returns in the <code>Observable&lt;Hero&gt;</code> to the caller.</p>

</li>
</ul>
<p translation-result="">刷新浏览器，并添加一些英雄。</p><p translation-origin="off">Refresh the browser and add some heroes.</p>

<h2 translation-result="" id="delete-a-hero">删除某个英雄<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#delete-a-hero"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="delete-a-hero">Delete a hero<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#delete-a-hero"><i class="material-icons">link</i></a></h2>

<p translation-result="">英雄列表中的每个英雄都有一个删除按钮。</p><p translation-origin="off">Each hero in the heroes list should have a delete button.</p>

<p translation-result="">把下列按钮（<code>button</code>）元素添加到 <code>HeroesComponent</code> 的模板中，就在每个 <code>&lt;li&gt;</code> 元素中的英雄名字后方。</p><p translation-origin="off">Add the following button element to the <code>HeroesComponent</code> template, after the hero
name in the repeated <code>&lt;li&gt;</code> element.</p>

<code-example path="toh-pt6/src/app/heroes/heroes.component.html" region="delete" ng-version="6.0.0"><div style="display: none">
&lt;button class="delete" title="delete hero"
(click)="delete(hero)"&gt;x&lt;/button&gt;

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"delete"</span><span class="pln"> </span><span class="atn">title</span><span class="pun">=</span><span class="atv">"delete hero"</span><span class="pln">
(</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"delete(hero)"</span><span class="tag">&gt;</span><span class="pln">x</span><span class="tag">&lt;/button&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">英雄列表的 HTML 应该是这样的：</p><p translation-origin="off">The HTML for the list of heroes should look like this:</p>

<code-example path="toh-pt6/src/app/heroes/heroes.component.html" region="list" title="src/app/heroes/heroes.component.html (list of heroes)" ng-version="6.0.0"><div style="display: none">
&lt;ul class="heroes"&gt;
  &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes"&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/detail/{{hero.id}}"&gt;
      &lt;span class="badge"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}
    &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;button class="delete" title="delete hero"
    (click)="delete(hero)"&gt;x&lt;/button&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.component.html (list of heroes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.html (list of heroes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;ul</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"heroes"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;li</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pun">=</span><span class="atv">"/detail/{{hero.id}}"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"badge"</span><span class="tag">&gt;</span><span class="pln">{{hero.id}}</span><span class="tag">&lt;/span&gt;</span><span class="pln"> {{hero.name}}
    </span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"delete"</span><span class="pln"> </span><span class="atn">title</span><span class="pun">=</span><span class="atv">"delete hero"</span><span class="pln">
    (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"delete(hero)"</span><span class="tag">&gt;</span><span class="pln">x</span><span class="tag">&lt;/button&gt;</span><span class="pln">
  </span><span class="tag">&lt;/li&gt;</span><span class="pln">
</span><span class="tag">&lt;/ul&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">要把删除按钮定位在每个英雄条目的最右边，就要往 <code>heroes.component.css</code> 中添加一些 CSS。你可以在下方的 <a href="https://angular.cn/tutorial/toh-pt6#heroescomponent">最终代码</a> 中找到这些 CSS。</p><p translation-origin="off">To position the delete button at the far right of the hero entry,
add some CSS to the <code>heroes.component.css</code>.  You'll find that CSS
in the <a href="https://angular.cn/tutorial/toh-pt6#heroescomponent">final review code</a> below.</p>

<p translation-result="">把 <code>delete()</code> 处理器添加到组件中。</p><p translation-origin="off">Add the <code>delete()</code> handler to the component.</p>

<code-example path="toh-pt6/src/app/heroes/heroes.component.ts" region="delete" title="src/app/heroes/heroes.component.ts (delete)" ng-version="6.0.0"><div style="display: none">
delete(hero: Hero): void {
  this.heroes = this.heroes.filter(h =&gt; h !== hero);
  this.heroService.deleteHero(hero).subscribe();
}

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.component.ts (delete)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.ts (delete)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">delete</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes</span><span class="pun">.</span><span class="pln">filter</span><span class="pun">(</span><span class="pln">h </span><span class="pun">=&gt;</span><span class="pln"> h </span><span class="pun">!==</span><span class="pln"> hero</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">deleteHero</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">).</span><span class="pln">subscribe</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">虽然这个组件把删除英雄的逻辑委托给了 <code>HeroService</code>，但扔保留了更新它自己的英雄列表的职责。
组件的 <code>delete()</code> 方法会在 <code>HeroService</code> 对服务器的操作成功之前，先从列表中移除<em>要删除的英雄</em>。</p><p translation-origin="off">Although the component delegates hero deletion to the <code>HeroService</code>,
it remains responsible for updating its own list of heroes.
The component's <code>delete()</code> method immediately removes the <em>hero-to-delete</em> from that list,
anticipating that the <code>HeroService</code> will succeed on the server.</p>

<p translation-result="">组件与 <code>heroService.delete()</code> 返回的 <code>Observable</code> 还完全没有关联。<strong>必须订阅它</strong>。</p><p translation-origin="off">There's really nothing for the component to do with the <code>Observable</code> returned by
<code>heroService.delete()</code>. <strong>It must subscribe anyway</strong>.</p>

<div class="alert is-important">
<p translation-result="">  如果你忘了调用 <code>subscribe()</code>，本服务将不会把这个删除请求发送给服务器。
作为一条通用的规则，<code>Observable</code> 在有人订阅之前<em>什么都不会做</em>。</p><p translation-origin="off">  If you neglect to <code>subscribe()</code>, the service will not send the delete request to the server!
As a rule, an <code>Observable</code> <em>does nothing</em> until something subscribes!</p>

<p translation-result="">  你可以暂时删除 <code>subscribe()</code> 来确认这一点。点击“Dashboard”，然后点击“Heroes”，就又看到完整的英雄列表了。</p><p translation-origin="off">  Confirm this for yourself by temporarily removing the <code>subscribe()</code>,
clicking "Dashboard", then clicking "Heroes".
You'll see the full list of heroes again.</p>

</div>
<h4 translation-result="" id="add-emheroservicedeleteheroem">添加 <code>HeroService.deleteHero()</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-emheroservicedeleteheroem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-heroservicedeletehero">Add <em>HeroService.deleteHero()</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-heroservicedeletehero"><i class="material-icons">link</i></a></h4>

<p translation-result="">把 <code>deleteHero()</code> 方法添加到 <code>HeroService</code> 中，代码如下。</p><p translation-origin="off">Add a <code>deleteHero()</code> method to <code>HeroService</code> like this.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="deleteHero" title="src/app/hero.service.ts (delete)" ng-version="6.0.0"><div style="display: none">
/** DELETE: delete the hero from the server */
deleteHero (hero: Hero | number): Observable&lt;Hero&gt; {
  const id = typeof hero === 'number' ? hero : hero.id;
  const url = `${this.heroesUrl}/${id}`;

  return this.http.delete&lt;Hero&gt;(url, httpOptions).pipe(
    tap(_ =&gt; this.log(`deleted hero id=${id}`)),
    catchError(this.handleError&lt;Hero&gt;('deleteHero'))
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts (delete)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts (delete)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/** DELETE: delete the hero from the server */</span><span class="pln">
deleteHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> number</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pln"> hero </span><span class="pun">===</span><span class="pln"> </span><span class="str">'number'</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> hero </span><span class="pun">:</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`${this.heroesUrl}/${id}`</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="pln">url</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`deleted hero id=${id}`</span><span class="pun">)),</span><span class="pln">
    catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">'deleteHero'</span><span class="pun">))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意</p><p translation-origin="off">Note that</p>

<ul>
<li>
<p translation-result=""> 它调用了 <code>HttpClient.delete</code>。</p><p translation-origin="off">it calls <code>HttpClient.delete</code>.</p>

</li>
<li>
<p translation-result=""> URL 就是英雄的资源 URL 加上要删除的英雄的 <code>id</code>。</p><p translation-origin="off">the URL is the heroes resource URL plus the <code>id</code> of the hero to delete</p>

</li>
<li>
<p translation-result=""> 你不用像 <code>put</code> 和 <code>post</code> 中那样发送任何数据。</p><p translation-origin="off">you don't send data as you did with <code>put</code> and <code>post</code>.</p>

</li>
<li>
<p translation-result=""> 你仍要发送 <code>httpOptions</code>。</p><p translation-origin="off">you still send the <code>httpOptions</code>.</p>

</li>
</ul>
<p translation-result="">刷新浏览器，并试一下这个新的删除功能。</p><p translation-origin="off">Refresh the browser and try the new delete functionality.</p>

<h2 translation-result="" id="search-by-name">根据名字搜索<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#search-by-name"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="search-by-name">Search by name<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#search-by-name"><i class="material-icons">link</i></a></h2>

<p translation-result="">在最后一次练习中，你要学到把 <code>Observable</code> 的操作符串在一起，让你能将相似 HTTP 请求的数量最小化，并节省网络带宽。</p><p translation-origin="off">In this last exercise, you learn to chain <code>Observable</code> operators together
so you can minimize the number of similar HTTP requests
and consume network bandwidth economically.</p>

<p translation-result="">你将往<em>仪表盘</em>中加入<em>英雄搜索</em>特性。
当用户在搜索框中输入名字时，你会不断发送根据名字过滤英雄的 HTTP 请求。
你的目标是仅仅发出尽可能少的必要请求。</p><p translation-origin="off">You will add a <em>heroes search</em> feature to the <em>Dashboard</em>.
As the user types a name into a search box,
you'll make repeated HTTP requests for heroes filtered by that name.
Your goal is to issue only as many requests as necessary.</p>

<h4 translation-origin="off" id="heroservicesearchheroes"><em>HeroService.searchHeroes</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#heroservicesearchheroes"><i class="material-icons">link</i></a></h4>
<p translation-result="">先把 <code>searchHeroes</code> 方法添加到 <code>HeroService</code> 中。</p><p translation-origin="off">Start by adding a <code>searchHeroes</code> method to the <code>HeroService</code>.</p>

<code-example path="toh-pt6/src/app/hero.service.ts" region="searchHeroes" title="src/app/hero.service.ts" ng-version="6.0.0"><div style="display: none">
/* GET heroes whose name contains search term */
searchHeroes(term: string): Observable&lt;Hero[]&gt; {
  if (!term.trim()) {
    // if not search term, return empty hero array.
    return of([]);
  }
  return this.http.get&lt;Hero[]&gt;(`api/heroes/?name=${term}`).pipe(
    tap(_ =&gt; this.log(`found heroes matching "${term}"`)),
    catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">/* GET heroes whose name contains search term */</span><span class="pln">
searchHeroes</span><span class="pun">(</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">term</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// if not search term, return empty hero array.</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">([]);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="str">`api/heroes/?name=${term}`</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`found heroes matching "${term}"`</span><span class="pun">)),</span><span class="pln">
    catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="str">'searchHeroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果没有搜索词，该方法立即返回一个空数组。
剩下的部分和 <code>getHeroes()</code> 很像。
唯一的不同点是 URL，它包含了一个由搜索词组成的查询字符串。</p><p translation-origin="off">The method returns immediately with an empty array if there is no search term.
The rest of it closely resembles <code>getHeroes()</code>.
The only significant difference is the URL,
which includes a query string with the search term.</p>

<h3 translation-result="" id="add-search-to-the-dashboard">为仪表盘添加搜索功能<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-search-to-the-dashboard"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="add-search-to-the-dashboard">Add search to the Dashboard<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#add-search-to-the-dashboard"><i class="material-icons">link</i></a></h3>

<p translation-result="">打开 <code>DashboardComponent</code> 的<em>模板</em>并且把用于搜索英雄的元素 <code>&lt;app-hero-search&gt;</code> 添加到 <code>DashboardComponent</code> 模板的底部。</p><p translation-origin="off">Open the <code>DashboardComponent</code> <em>template</em> and
Add the hero search element, <code>&lt;app-hero-search&gt;</code>, to the bottom of the <code>DashboardComponent</code> template.</p>

<code-example path="toh-pt6/src/app/dashboard/dashboard.component.html" title="src/app/dashboard/dashboard.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h3&gt;Top Heroes&lt;/h3&gt;
&lt;div class="grid grid-pad"&gt;
  &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes" class="col-1-4"
      <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/detail/{{hero.id}}"&gt;
    &lt;div class="module hero"&gt;
      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;
    &lt;/div&gt;
  &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
&lt;/div&gt;

&lt;app-hero-search&gt;&lt;/app-hero-search&gt;


</div><!----><header class="ng-star-inserted">src/app/dashboard/dashboard.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/dashboard/dashboard.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h3&gt;</span><span class="pln">Top Heroes</span><span class="tag">&lt;/h3&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"grid grid-pad"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"col-1-4"</span><span class="pln">
      </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pun">=</span><span class="atv">"/detail/{{hero.id}}"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"module hero"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;h4&gt;</span><span class="pln">{{hero.name}}</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
    </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span><span class="pln">

</span><span class="tag">&lt;app-hero-search&gt;&lt;/app-hero-search&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这个模板看起来很像 <code>HeroesComponent</code> 模板中的 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 复写器。</p><p translation-origin="off">This template looks a lot like the <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> repeater in the <code>HeroesComponent</code> template.</p>

<p translation-result="">很不幸，添加这个元素让本应用挂了。
Angular 找不到哪个组件的选择器能匹配上 <code>&lt;app-hero-search&gt;</code>。</p><p translation-origin="off">Unfortunately, adding this element breaks the app.
Angular can't find a component with a selector that matches <code>&lt;app-hero-search&gt;</code>.</p>

<p translation-result=""><code>HeroSearchComponent</code> 还不存在，这就解决。</p><p translation-origin="off">The <code>HeroSearchComponent</code> doesn't exist yet. Fix that.</p>

<h3 translation-result="" id="create-emherosearchcomponentem">创建 <code>HeroSearchComponent</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#create-emherosearchcomponentem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="create-herosearchcomponent">Create <em>HeroSearchComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#create-herosearchcomponent"><i class="material-icons">link</i></a></h3>

<p translation-result="">使用 CLI 创建一个 <code>HeroSearchComponent</code>。</p><p translation-origin="off">Create a <code>HeroSearchComponent</code> with the CLI.</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">
  ng generate component hero-search
</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate component hero</span><span class="pun">-</span><span class="pln">search</span></code>
    </pre></aio-code></code-example>
<p translation-result="">CLI 生成了 <code>HeroSearchComponent</code> 的三个文件，并把该组件添加到了 <code>AppModule</code> 的声明中。</p><p translation-origin="off">The CLI generates the three <code>HeroSearchComponent</code> and adds the component to the `AppModule' declarations</p>

<p translation-result="">把生成的 <code>HeroSearchComponent</code> 的<em>模板</em>改成一个输入框和一个匹配到的搜索结果的列表。代码如下：</p><p translation-origin="off">Replace the generated <code>HeroSearchComponent</code> <em>template</em> with a text box and a list of matching search results like this.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.html" title="src/app/hero-search/hero-search.component.html" ng-version="6.0.0"><div style="display: none">
&lt;div id="search-component"&gt;
  &lt;h4&gt;Hero Search&lt;/h4&gt;

  &lt;input #searchBox id="search-box" (keyup)="search(searchBox.value)" /&gt;

  &lt;ul class="search-result"&gt;
    &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>" &gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/detail/{{hero.id}}"&gt;
        {{hero.name}}
      &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


</div><!----><header class="ng-star-inserted">src/app/hero-search/hero-search.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-search/hero-search.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"search-component"</span><span class="tag">&gt;</span></li><li class="L1"><span class="pln">  </span><span class="tag">&lt;h4&gt;</span><span class="pln">Hero Search</span><span class="tag">&lt;/h4&gt;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="pln">  </span><span class="tag">&lt;input</span><span class="pln"> #</span><span class="atn">searchBox</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"search-box"</span><span class="pln"> (</span><span class="atn">keyup</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"search(searchBox.value)"</span><span class="pln"> </span><span class="tag">/&gt;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="tag">&lt;ul</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"search-result"</span><span class="tag">&gt;</span></li><li class="L6"><span class="pln">    </span><span class="tag">&lt;li</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes$ | </span><a href="https://angular.cn/api/core/testing/async" class="code-anchor"><span class="atv">async</span></a><span class="atv">"</span><span class="pln"> </span><span class="tag">&gt;</span></li><li class="L7"><span class="pln">      </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pun">=</span><span class="atv">"/detail/{{hero.id}}"</span><span class="tag">&gt;</span></li><li class="L8"><span class="pln">        {{hero.name}}</span></li><li class="L9"><span class="pln">      </span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></li><li class="L0"><span class="pln">    </span><span class="tag">&lt;/li&gt;</span></li><li class="L1"><span class="pln">  </span><span class="tag">&lt;/ul&gt;</span></li><li class="L2"><span class="tag">&lt;/div&gt;</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">从下面的 <a href="https://angular.cn/tutorial/toh-pt6#herosearchcomponent">最终代码</a> 中把私有 CSS 样式添加到 <code>hero-search.component.css</code> 中。</p><p translation-origin="off">Add private CSS styles to <code>hero-search.component.css</code>
as listed in the <a href="https://angular.cn/tutorial/toh-pt6#herosearchcomponent">final code review</a> below.</p>

<p translation-result="">当用户在搜索框中输入时，一个 <em>keyup</em> 事件绑定会调用该组件的 <code>search()</code> 方法，并传入新的搜索框的值。</p><p translation-origin="off">As the user types in the search box, a <em>keyup</em> event binding calls the component's <code>search()</code>
method with the new search box value.</p>

<a id="asyncpipe"></a>
<h3 translation-origin="off" id="asyncpipe"><em>AsyncPipe</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#asyncpipe"><i class="material-icons">link</i></a></h3>
<p translation-result="">如你所愿，<code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 重复渲染出了这些英雄。</p><p translation-origin="off">As expected, the <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> repeats hero objects.</p>

<p translation-result="">仔细看，你会发现 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 是在一个名叫 <code>heroes$</code> 的列表上迭代，而不是 <code>heroes</code>。</p><p translation-origin="off">Look closely and you'll see that the <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> iterates over a list called <code>heroes$</code>, not <code>heroes</code>.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.html" region="async" ng-version="6.0.0"><div style="display: none">
&lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>" &gt;

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;li</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes$ | </span><a href="https://angular.cn/api/core/testing/async" class="code-anchor"><span class="atv">async</span></a><span class="atv">"</span><span class="pln"> </span><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>$</code> 是一个命名惯例，用来表明 <code>heroes$</code> 是一个 <code>Observable</code>，而不是数组。</p><p translation-origin="off">The <code>$</code> is a convention that indicates <code>heroes$</code> is an <code>Observable</code>, not an array.</p>

<p translation-result=""><code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 不能直接使用 <code>Observable</code>。
不过，它后面还有一个管道字符（<code>|</code>），后面紧跟着一个 <code><a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a></code>，它表示 Angular 的 <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code>。</p><p translation-origin="off">The <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> can't do anything with an <code>Observable</code>.
But there's also a pipe character (<code>|</code>) followed by <code><a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a></code>,
which identifies Angular's <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code>.</p>

<p translation-result=""><code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code> 会自动订阅到 <code>Observable</code>，这样你就不用再在组件类中订阅了。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code> subscribes to an <code>Observable</code> automatically so you won't have to
do so in the component class.</p>

<h3 translation-result="" id="fix-the-emherosearchcomponentem-class">修正 <code>HeroSearchComponent</code> 类<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#fix-the-emherosearchcomponentem-class"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="fix-the-herosearchcomponent-class">Fix the <em>HeroSearchComponent</em> class<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#fix-the-herosearchcomponent-class"><i class="material-icons">link</i></a></h3>

<p translation-result="">修改所生成的 <code>HeroSearchComponent</code> 类及其元数据，代码如下：</p><p translation-origin="off">Replace the generated <code>HeroSearchComponent</code> class and metadata as follows.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.ts" title="src/app/hero-search/hero-search.component.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';

import { Observable, Subject } from 'rxjs';

import {
   debounceTime, distinctUntilChanged, switchMap
 } from 'rxjs/operators';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-search',
  templateUrl: './hero-search.component.html',
  styleUrls: [ './hero-search.component.css' ]
})
export class HeroSearchComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes$: Observable&lt;Hero[]&gt;;
  private searchTerms = new Subject&lt;string&gt;();

  constructor(private heroService: HeroService) {}

  // Push <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> search term into the observable stream.
  search(term: string): void {
    this.searchTerms.next(term);
  }

  ngOnInit(): void {
    this.heroes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),

      // ignore new term if same as previous term
      distinctUntilChanged(),

      // switch to new search observable each time the term changes
      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),
    );
  }
}


</div><!----><header class="ng-star-inserted">src/app/hero-search/hero-search.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-search/hero-search.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Subject</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">   debounceTime</span><span class="pun">,</span><span class="pln"> distinctUntilChanged</span><span class="pun">,</span><span class="pln"> switchMap</span></li><li class="L6"><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../hero'</span><span class="pun">;</span></li><li class="L9"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../hero.service'</span><span class="pun">;</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L2"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-hero-search'</span><span class="pun">,</span></li><li class="L3"><span class="pln">  templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./hero-search.component.html'</span><span class="pun">,</span></li><li class="L4"><span class="pln">  styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">'./hero-search.component.css'</span><span class="pln"> </span><span class="pun">]</span></li><li class="L5"><span class="pun">})</span></li><li class="L6"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroSearchComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">  heroes$</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;;</span></li><li class="L8"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> searchTerms </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Subject</span><span class="str">&lt;string&gt;</span><span class="pun">();</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="pln">  </span><span class="com">// Push </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> search term into the observable stream.</span></li><li class="L3"><span class="pln">  search</span><span class="pun">(</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span></li><li class="L4"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">searchTerms</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">term</span><span class="pun">);</span></li><li class="L5"><span class="pln">  </span><span class="pun">}</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">  ngOnInit</span><span class="pun">():</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes$ </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">searchTerms</span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L9"><span class="pln">      </span><span class="com">// wait 300ms after each keystroke before considering the term</span></li><li class="L0"><span class="pln">      debounceTime</span><span class="pun">(</span><span class="lit">300</span><span class="pun">),</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="pln">      </span><span class="com">// ignore new term if same as previous term</span></li><li class="L3"><span class="pln">      distinctUntilChanged</span><span class="pun">(),</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">      </span><span class="com">// switch to new search observable each time the term changes</span></li><li class="L6"><span class="pln">      switchMap</span><span class="pun">((</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">searchHeroes</span><span class="pun">(</span><span class="pln">term</span><span class="pun">)),</span></li><li class="L7"><span class="pln">    </span><span class="pun">);</span></li><li class="L8"><span class="pln">  </span><span class="pun">}</span></li><li class="L9"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，<code>heroes$</code> 声明为一个 <code>Observable</code></p><p translation-origin="off">Notice the declaration of <code>heroes$</code> as an <code>Observable</code></p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.ts" region="heroes-stream" ng-version="6.0.0"><div style="display: none">
heroes$: Observable&lt;Hero[]&gt;;

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">heroes$</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你将会在 <a href="https://angular.cn/tutorial/toh-pt6#search-pipe"><code>ngOnInit()</code></a> 中设置它，在此之前，先仔细看看 <code>searchTerms</code> 的定义。</p><p translation-origin="off">You'll set it in <a href="https://angular.cn/tutorial/toh-pt6#search-pipe"><code>ngOnInit()</code></a>.
Before you do, focus on the definition of <code>searchTerms</code>.</p>

<h3 translation-result="" id="the-emsearchtermsem-rxjs-subject">RxJS <code>Subject</code> 类型的 <code>searchTerms</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#the-emsearchtermsem-rxjs-subject"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-searchterms-rxjs-subject">The <em>searchTerms</em> RxJS subject<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#the-searchterms-rxjs-subject"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>searchTerms</code> 属性声明成了 RxJS 的 <code>Subject</code> 类型。</p><p translation-origin="off">The <code>searchTerms</code> property is declared as an RxJS <code>Subject</code>.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.ts" region="searchTerms" ng-version="6.0.0"><div style="display: none">
private searchTerms = new Subject&lt;string&gt;();

// Push <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> search term into the observable stream.
search(term: string): void {
  this.searchTerms.next(term);
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">private</span><span class="pln"> searchTerms </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Subject</span><span class="str">&lt;string&gt;</span><span class="pun">();</span><span class="pln">

</span><span class="com">// Push </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> search term into the observable stream.</span><span class="pln">
search</span><span class="pun">(</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">searchTerms</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">term</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>Subject</code> 既是可观察对象的数据源，本身也是 <code>Observable</code>。
你可以像订阅任何 <code>Observable</code> 一样订阅 <code>Subject</code>。</p><p translation-origin="off">A <code>Subject</code> is both a source of <em>observable</em> values and an <code>Observable</code> itself.
You can subscribe to a <code>Subject</code> as you would any <code>Observable</code>.</p>

<p translation-result="">你还可以通过调用它的 <code>next(value)</code> 方法往 <code>Observable</code> 中推送一些值，就像 <code>search()</code> 方法中一样。</p><p translation-origin="off">You can also push values into that <code>Observable</code> by calling its <code>next(value)</code> method
as the <code>search()</code> method does.</p>

<p translation-result=""><code>search()</code> 是通过对文本框的 <code>keystroke</code> 事件的<em>事件绑定</em>来调用的。</p><p translation-origin="off">The <code>search()</code> method is called via an <em>event binding</em> to the
textbox's <code>keystroke</code> event.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.html" region="input" ng-version="6.0.0"><div style="display: none">
&lt;input #searchBox id="search-box" (keyup)="search(searchBox.value)" /&gt;

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;input</span><span class="pln"> #</span><span class="atn">searchBox</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"search-box"</span><span class="pln"> (</span><span class="atn">keyup</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"search(searchBox.value)"</span><span class="pln"> </span><span class="tag">/&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">每当用户在文本框中输入时，这个事件绑定就会使用文本框的值（搜索词）调用 <code>search()</code> 函数。
<code>searchTerms</code> 变成了一个能发出搜索词的稳定的流。</p><p translation-origin="off">Every time the user types in the textbox, the binding calls <code>search()</code> with the textbox value, a "search term".
The <code>searchTerms</code> becomes an <code>Observable</code> emitting a steady stream of search terms.</p>

<a id="search-pipe"></a>
<h3 translation-result="" id="chaining-rxjs-operators">串联 RxJS 操作符<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#chaining-rxjs-operators"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="chaining-rxjs-operators">Chaining RxJS operators<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#chaining-rxjs-operators"><i class="material-icons">link</i></a></h3>

<p translation-result="">如果每当用户击键后就直接调用 <code>searchHeroes()</code> 将导致创建海量的 HTTP 请求，浪费服务器资源并消耗大量网络流量。</p><p translation-origin="off">Passing a new search term directly to the <code>searchHeroes()</code> after every user keystroke would create an excessive amount of HTTP requests,
taxing server resources and burning through the cellular network data plan.</p>

<p translation-result="">应该怎么做呢？<code>ngOnInit()</code> 往 <code>searchTerms</code> 这个可观察对象的处理管道中加入了一系列 RxJS 操作符，用以缩减对 <code>searchHeroes()</code> 的调用次数，并最终返回一个可及时给出英雄搜索结果的可观察对象（每次都是 <code>Hero[]</code> ）。</p><p translation-origin="off">Instead, the <code>ngOnInit()</code> method pipes the <code>searchTerms</code> observable through a sequence of RxJS operators that reduce the number of calls to the <code>searchHeroes()</code>,
ultimately returning an observable of timely hero search results (each a <code>Hero[]</code>).</p>

<p translation-result="">代码如下：</p><p translation-origin="off">Here's the code.</p>

<code-example path="toh-pt6/src/app/hero-search/hero-search.component.ts" region="search" ng-version="6.0.0"><div style="display: none">
this.heroes$ = this.searchTerms.pipe(
  // wait 300ms after each keystroke before considering the term
  debounceTime(300),

  // ignore new term if same as previous term
  distinctUntilChanged(),

  // switch to new search observable each time the term changes
  switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),
);

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes$ </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">searchTerms</span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
  </span><span class="com">// wait 300ms after each keystroke before considering the term</span><span class="pln">
  debounceTime</span><span class="pun">(</span><span class="lit">300</span><span class="pun">),</span><span class="pln">

  </span><span class="com">// ignore new term if same as previous term</span><span class="pln">
  distinctUntilChanged</span><span class="pun">(),</span><span class="pln">

  </span><span class="com">// switch to new search observable each time the term changes</span><span class="pln">
  switchMap</span><span class="pun">((</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">searchHeroes</span><span class="pun">(</span><span class="pln">term</span><span class="pun">)),</span><span class="pln">
</span><span class="pun">);</span></code>
    </pre></aio-code></code-example>
<ul>
<li>
<p translation-result="">   在传出最终字符串之前，<code>debounceTime(300)</code> 将会等待，直到新增字符串的事件暂停了 300 毫秒。
你实际发起请求的间隔永远不会小于 300ms。</p><p translation-origin="off"><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds
before passing along the latest string. You'll never make requests more frequently than 300ms.</p>

</li>
<li>
<p translation-result=""> <code>distinctUntilChanged()</code> 会确保只在过滤条件变化时才发送请求。</p><p translation-origin="off"><code>distinctUntilChanged()</code> ensures that a request is sent only if the filter text changed.</p>

</li>
<li>
<p translation-result="">   <code>switchMap()</code> 会为每个从 <code>debounce</code> 和 <code>distinctUntilChanged</code> 中通过的搜索词调用搜索服务。
它会取消并丢弃以前的搜索可观察对象，只保留最近的。</p><p translation-origin="off"><code>switchMap()</code> calls the search service for each search term that makes it through <code>debounce</code> and <code>distinctUntilChanged</code>.
It cancels and discards previous search observables, returning only the latest search service observable.</p>

</li>
</ul>
<div class="l-sub-section">
<p translation-result="">  借助 <a href="http://www.learnrxjs.io/operators/transformation/switchmap.html">switchMap 操作符</a>，
每个有效的击键事件都会触发一次 <code><a href="https://angular.cn/" class="code-anchor">HttpClient.get()</a></code> 方法调用。
即使在每个请求之间都有至少 300ms 的间隔，仍然可能会同时存在多个尚未返回的 HTTP 请求。</p><p translation-origin="off">  With the <a href="http://www.learnrxjs.io/operators/transformation/switchmap.html">switchMap operator</a>,
every qualifying key event can trigger an <code><a href="https://angular.cn/" class="code-anchor">HttpClient.get()</a></code> method call.
Even with a 300ms pause between requests, you could have multiple HTTP requests in flight
and they may not return in the order sent.</p>

<p translation-result="">  <code>switchMap()</code> 会记住原始的请求顺序，只会返回最近一次 HTTP 方法调用的结果。
以前的那些请求都会被取消和舍弃。</p><p translation-origin="off">  <code>switchMap()</code> preserves the original request order while returning only the observable from the most recent HTTP method call.
Results from prior calls are canceled and discarded.</p>

<p translation-result="">  注意，<em>取消</em>前一个 <code>searchHeroes()</code> 可观察对象并不会中止尚未完成的 HTTP 请求。
那些不想要的结果只会在它们抵达应用代码之前被舍弃。</p><p translation-origin="off">  Note that <em>canceling</em> a previous <code>searchHeroes()</code> <em>Observable</em>
doesn't actually abort a pending HTTP request.
Unwanted results are simply discarded before they reach your application code.</p>

</div>
<p translation-result="">记住，组件类中并没有订阅 <code>heroes$</code> 这个可观察对象，而是由模板中的 <a href="https://angular.cn/tutorial/toh-pt6#asyncpipe"><code>AsyncPipe</code></a> 完成的。</p><p translation-origin="off">Remember that the component <em>class</em> does not subscribe to the <code>heroes$</code> <em>observable</em>.
That's the job of the <a href="https://angular.cn/tutorial/toh-pt6#asyncpipe"><code>AsyncPipe</code></a> in the template.</p>

<h4 translation-result="" id="try-it-3">试试看<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#try-it-3"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="try-it">Try it<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#try-it"><i class="material-icons">link</i></a></h4>

<p translation-result="">再次运行本应用。在这个 <em>仪表盘</em> 中，在搜索框中输入一些文字。如果你输入的字符匹配上了任何现有英雄的名字，你将会看到如下效果：</p><p translation-origin="off">Run the app again. In the <em>Dashboard</em>, enter some text in the search box.
If you enter characters that match any existing hero names, you'll see something like this.</p>

<figure>
  <img src="./Angular - HTTP_files/toh-hero-search.png" alt="Hero Search Component" width="240" height="224">
</figure>
<h2 translation-result="" id="final-code-review-6">查看最终代码<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#final-code-review-6"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="final-code-review">Final code review<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#final-code-review"><i class="material-icons">link</i></a></h2>

<p translation-result="">你的应用现在变成了这样：<live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt6/toh-pt6.zip">下载范例</a></span></span></span></live-example>。</p><p translation-origin="off">Your app should look like this <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt6/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt6/toh-pt6.zip">下载范例</a></span></span></span></live-example>.</p>

<p translation-result="">本文讨论过的代码文件如下（都位于 <code>src/app/</code> 文件夹中）。</p><p translation-origin="off">Here are the code files discussed on this page (all in the <code>src/app/</code> folder).</p>

<a id="heroservice"></a>
<a id="inmemorydataservice"></a>
<a id="appmodule"></a>
<h4 translation-origin="off" id="heroservice-inmemorydataservice-appmodule"><em>HeroService</em>, <em>InMemoryDataService</em>, <em>AppModule</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule"><i class="material-icons">link</i></a></h4>
<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="hero.service.ts" path="toh-pt6/src/app/hero.service.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { <a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a>, <a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor">HttpHeaders</a> } from '@angular/common/http';

import { Observable, of } from 'rxjs';
import { catchError, map, tap } from 'rxjs/operators';

import { Hero } from './hero';
import { MessageService } from './message.service';

const httpOptions = {
  headers: new <a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor">HttpHeaders</a>({ 'Content-Type': 'application/json' })
};

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({ providedIn: 'root' })
export class HeroService {

  private heroesUrl = 'api/heroes';  // URL to web api

  constructor(
    private http: <a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor">HttpClient</a>,
    private messageService: MessageService) { }

  /** GET heroes from the server */
  getHeroes (): Observable&lt;Hero[]&gt; {
    return this.http.get&lt;Hero[]&gt;(this.heroesUrl)
      .pipe(
        tap(heroes =&gt; this.log(`fetched heroes`)),
        catchError(this.handleError('getHeroes', []))
      );
  }

  /** GET hero by id. Return `undefined` when id not found */
  getHeroNo404&lt;<a href="https://angular.cn/api/router/Data" class="code-anchor">Data</a>&gt;(id: number): Observable&lt;Hero&gt; {
    const url = `${this.heroesUrl}/?id=${id}`;
    return this.http.get&lt;Hero[]&gt;(url)
      .pipe(
        map(heroes =&gt; heroes[0]), // returns <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> {0|1} element array
        tap(h =&gt; {
          const outcome = h ? `fetched` : `did not find`;
          this.log(`${outcome} hero id=${id}`);
        }),
        catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))
      );
  }

  /** GET hero by id. Will 404 if id not found */
  getHero(id: number): Observable&lt;Hero&gt; {
    const url = `${this.heroesUrl}/${id}`;
    return this.http.get&lt;Hero&gt;(url).pipe(
      tap(_ =&gt; this.log(`fetched hero id=${id}`)),
      catchError(this.handleError&lt;Hero&gt;(`getHero id=${id}`))
    );
  }

  /* GET heroes whose name contains search term */
  searchHeroes(term: string): Observable&lt;Hero[]&gt; {
    if (!term.trim()) {
      // if not search term, return empty hero array.
      return of([]);
    }
    return this.http.get&lt;Hero[]&gt;(`api/heroes/?name=${term}`).pipe(
      tap(_ =&gt; this.log(`found heroes matching "${term}"`)),
      catchError(this.handleError&lt;Hero[]&gt;('searchHeroes', []))
    );
  }

  //////// Save methods //////////

  /** POST: add <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new hero to the server */
  addHero (hero: Hero): Observable&lt;Hero&gt; {
    return this.http.post&lt;Hero&gt;(this.heroesUrl, hero, httpOptions).pipe(
      tap((hero: Hero) =&gt; this.log(`added hero w/ id=${hero.id}`)),
      catchError(this.handleError&lt;Hero&gt;('addHero'))
    );
  }

  /** DELETE: delete the hero from the server */
  deleteHero (hero: Hero | number): Observable&lt;Hero&gt; {
    const id = typeof hero === 'number' ? hero : hero.id;
    const url = `${this.heroesUrl}/${id}`;

    return this.http.delete&lt;Hero&gt;(url, httpOptions).pipe(
      tap(_ =&gt; this.log(`deleted hero id=${id}`)),
      catchError(this.handleError&lt;Hero&gt;('deleteHero'))
    );
  }

  /** PUT: update the hero on the server */
  updateHero (hero: Hero): Observable&lt;any&gt; {
    return this.http.put(this.heroesUrl, hero, httpOptions).pipe(
      tap(_ =&gt; this.log(`updated hero id=${hero.id}`)),
      catchError(this.handleError&lt;any&gt;('updateHero'))
    );
  }

  /**
   * Handle <a href="https://angular.cn/api/http/Http" class="code-anchor">Http</a> operation that failed.
   * Let the app continue.
   * @param operation - name of the operation that failed
   * @param result - optional value to return as the observable result
   */
  private handleError&lt;T&gt; (operation = 'operation', result?: T) {
    return (error: any): Observable&lt;T&gt; =&gt; {

      // TODO: send the error to remote logging infrastructure
      console.error(error); // log to console instead

      // TODO: better job of transforming error for user consumption
      this.log(`${operation} failed: ${error.message}`);

      // Let the app keep running by returning an empty result.
      return of(result as T);
    };
  }

  /** Log <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> HeroService message with the MessageService */
  private log(message: string) {
    this.messageService.add('HeroService: ' + message);
  }
}


</code-pane>
  <code-pane title="in-memory-data.service.ts" path="toh-pt6/src/app/in-memory-data.service.ts">
import { InMemoryDbService } from 'angular-in-memory-web-api';

export class InMemoryDataService implements InMemoryDbService {
  createDb() {
    const heroes = [
      { id: 11, name: 'Mr. Nice' },
      { id: 12, name: 'Narco' },
      { id: 13, name: 'Bombasto' },
      { id: 14, name: 'Celeritas' },
      { id: 15, name: 'Magneta' },
      { id: 16, name: 'RubberMan' },
      { id: 17, name: 'Dynama' },
      { id: 18, name: 'Dr IQ' },
      { id: 19, name: 'Magma' },
      { id: 20, name: 'Tornado' }
    ];
    return {heroes};
  }
}


</code-pane>
  <code-pane title="app.module.ts" path="toh-pt6/src/app/app.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';
import { <a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor">HttpClientModule</a> }    from '@angular/common/http';

import { HttpClientInMemoryWebApiModule } from 'angular-in-memory-web-api';
import { InMemoryDataService }  from './in-memory-data.service';

import { AppRoutingModule }     from './app-routing.module';

import { AppComponent }         from './app.component';
import { DashboardComponent }   from './dashboard/dashboard.component';
import { HeroDetailComponent }  from './hero-detail/hero-detail.component';
import { HeroesComponent }      from './heroes/heroes.component';
import { HeroSearchComponent }  from './hero-search/hero-search.component';
import { MessagesComponent }    from './messages/messages.component';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    AppRoutingModule,
    <a href="https://angular.cn/api/common/http/HttpClientModule" class="code-anchor">HttpClientModule</a>,

    // The HttpClientInMemoryWebApiModule module intercepts HTTP requests
    // and returns simulated server responses.
    // Remove it when <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> real server is ready to receive requests.
    HttpClientInMemoryWebApiModule.forRoot(
      InMemoryDataService, { dataEncapsulation: false }
    )
  ],
  declarations: [
    AppComponent,
    DashboardComponent,
    HeroesComponent,
    HeroDetailComponent,
    MessagesComponent,
    HeroSearchComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

</code-pane>
</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-0" tabindex="0" aria-controls="mat-tab-content-12-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero.service.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-1" tabindex="-1" aria-controls="mat-tab-content-12-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">in-memory-data.service.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-2" tabindex="-1" aria-controls="mat-tab-content-12-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.module.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 160px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c10-44 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-12-0" aria-labelledby="mat-tab-label-12-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor"><span class="typ">HttpClient</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor"><span class="typ">HttpHeaders</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common/http'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">,</span><span class="pln"> of </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> catchError</span><span class="pun">,</span><span class="pln"> map</span><span class="pun">,</span><span class="pln"> tap </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero'</span><span class="pun">;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">MessageService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./message.service'</span><span class="pun">;</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="kwd">const</span><span class="pln"> httpOptions </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">  headers</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpHeaders" class="code-anchor"><span class="typ">HttpHeaders</span></a><span class="pun">({</span><span class="pln"> </span><span class="str">'Content-Type'</span><span class="pun">:</span><span class="pln"> </span><span class="str">'application/json'</span><span class="pln"> </span><span class="pun">})</span></li><li class="L1"><span class="pun">};</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln"> providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pln"> </span><span class="pun">})</span></li><li class="L4"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> heroesUrl </span><span class="pun">=</span><span class="pln"> </span><span class="str">'api/heroes'</span><span class="pun">;</span><span class="pln">  </span><span class="com">// URL to web api</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span></li><li class="L9"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> http</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/common/http/HttpClient" class="code-anchor"><span class="typ">HttpClient</span></a><span class="pun">,</span></li><li class="L0"><span class="pln">    </span><span class="kwd">private</span><span class="pln"> messageService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">MessageService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="pln">  </span><span class="com">/** GET heroes from the server */</span></li><li class="L3"><span class="pln">  getHeroes </span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L4"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">)</span></li><li class="L5"><span class="pln">      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L6"><span class="pln">        tap</span><span class="pun">(</span><span class="pln">heroes </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`fetched heroes`</span><span class="pun">)),</span></li><li class="L7"><span class="pln">        catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">(</span><span class="str">'getHeroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]))</span></li><li class="L8"><span class="pln">      </span><span class="pun">);</span></li><li class="L9"><span class="pln">  </span><span class="pun">}</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="pln">  </span><span class="com">/** GET hero by id. Return `undefined` when id not found */</span></li><li class="L2"><span class="pln">  getHeroNo404</span><span class="pun">&lt;</span><a href="https://angular.cn/api/router/Data" class="code-anchor"><span class="typ">Data</span></a><span class="pun">&gt;(</span><span class="pln">id</span><span class="pun">:</span><span class="pln"> number</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`${this.heroesUrl}/?id=${id}`</span><span class="pun">;</span></li><li class="L4"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="pln">url</span><span class="pun">)</span></li><li class="L5"><span class="pln">      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L6"><span class="pln">        map</span><span class="pun">(</span><span class="pln">heroes </span><span class="pun">=&gt;</span><span class="pln"> heroes</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]),</span><span class="pln"> </span><span class="com">// returns </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> {0|1} element array</span></li><li class="L7"><span class="pln">        tap</span><span class="pun">(</span><span class="pln">h </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">          </span><span class="kwd">const</span><span class="pln"> outcome </span><span class="pun">=</span><span class="pln"> h </span><span class="pun">?</span><span class="pln"> </span><span class="str">`fetched`</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">`did not find`</span><span class="pun">;</span></li><li class="L9"><span class="pln">          </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`${outcome} hero id=${id}`</span><span class="pun">);</span></li><li class="L0"><span class="pln">        </span><span class="pun">}),</span></li><li class="L1"><span class="pln">        catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">`getHero id=${id}`</span><span class="pun">))</span></li><li class="L2"><span class="pln">      </span><span class="pun">);</span></li><li class="L3"><span class="pln">  </span><span class="pun">}</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="com">/** GET hero by id. Will 404 if id not found */</span></li><li class="L6"><span class="pln">  getHero</span><span class="pun">(</span><span class="pln">id</span><span class="pun">:</span><span class="pln"> number</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`${this.heroesUrl}/${id}`</span><span class="pun">;</span></li><li class="L8"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="pln">url</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L9"><span class="pln">      tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`fetched hero id=${id}`</span><span class="pun">)),</span></li><li class="L0"><span class="pln">      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">`getHero id=${id}`</span><span class="pun">))</span></li><li class="L1"><span class="pln">    </span><span class="pun">);</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">  </span><span class="com">/* GET heroes whose name contains search term */</span></li><li class="L5"><span class="pln">  searchHeroes</span><span class="pun">(</span><span class="pln">term</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L6"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">term</span><span class="pun">.</span><span class="pln">trim</span><span class="pun">())</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">      </span><span class="com">// if not search term, return empty hero array.</span></li><li class="L8"><span class="pln">      </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">([]);</span></li><li class="L9"><span class="pln">    </span><span class="pun">}</span></li><li class="L0"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="str">`api/heroes/?name=${term}`</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L1"><span class="pln">      tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`found heroes matching "${term}"`</span><span class="pun">)),</span></li><li class="L2"><span class="pln">      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;(</span><span class="str">'searchHeroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[]))</span></li><li class="L3"><span class="pln">    </span><span class="pun">);</span></li><li class="L4"><span class="pln">  </span><span class="pun">}</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">  </span><span class="com">//////// Save methods //////////</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="com">/** POST: add </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new hero to the server */</span></li><li class="L9"><span class="pln">  addHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="pln">post</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L1"><span class="pln">      tap</span><span class="pun">((</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`added hero w/ id=${hero.id}`</span><span class="pun">)),</span></li><li class="L2"><span class="pln">      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">'addHero'</span><span class="pun">))</span></li><li class="L3"><span class="pln">    </span><span class="pun">);</span></li><li class="L4"><span class="pln">  </span><span class="pun">}</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">  </span><span class="com">/** DELETE: delete the hero from the server */</span></li><li class="L7"><span class="pln">  deleteHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> number</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">typeof</span><span class="pln"> hero </span><span class="pun">===</span><span class="pln"> </span><span class="str">'number'</span><span class="pln"> </span><span class="pun">?</span><span class="pln"> hero </span><span class="pun">:</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">;</span></li><li class="L9"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`${this.heroesUrl}/${id}`</span><span class="pun">;</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="kwd">delete</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="pln">url</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L2"><span class="pln">      tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`deleted hero id=${id}`</span><span class="pun">)),</span></li><li class="L3"><span class="pln">      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;(</span><span class="str">'deleteHero'</span><span class="pun">))</span></li><li class="L4"><span class="pln">    </span><span class="pun">);</span></li><li class="L5"><span class="pln">  </span><span class="pun">}</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">  </span><span class="com">/** PUT: update the hero on the server */</span></li><li class="L8"><span class="pln">  updateHero </span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;any&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L9"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">http</span><span class="pun">.</span><span class="pln">put</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroesUrl</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">,</span><span class="pln"> httpOptions</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L0"><span class="pln">      tap</span><span class="pun">(</span><span class="pln">_ </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`updated hero id=${hero.id}`</span><span class="pun">)),</span></li><li class="L1"><span class="pln">      catchError</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">handleError</span><span class="str">&lt;any&gt;</span><span class="pun">(</span><span class="str">'updateHero'</span><span class="pun">))</span></li><li class="L2"><span class="pln">    </span><span class="pun">);</span></li><li class="L3"><span class="pln">  </span><span class="pun">}</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="com">/**</span></li><li class="L6"><span class="com">   * Handle </span><a href="https://angular.cn/api/http/Http" class="code-anchor"><span class="com">Http</span></a><span class="com"> operation that failed.</span></li><li class="L7"><span class="com">   * Let the app continue.</span></li><li class="L8"><span class="com">   * @param operation - name of the operation that failed</span></li><li class="L9"><span class="com">   * @param result - optional value to return as the observable result</span></li><li class="L0"><span class="com">   */</span></li><li class="L1"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> handleError</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">(</span><span class="pln">operation </span><span class="pun">=</span><span class="pln"> </span><span class="str">'operation'</span><span class="pun">,</span><span class="pln"> result</span><span class="pun">?:</span><span class="pln"> T</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">error</span><span class="pun">:</span><span class="pln"> any</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="pln">T</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">      </span><span class="com">// TODO: send the error to remote logging infrastructure</span></li><li class="L5"><span class="pln">      console</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="pln">error</span><span class="pun">);</span><span class="pln"> </span><span class="com">// log to console instead</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">      </span><span class="com">// TODO: better job of transforming error for user consumption</span></li><li class="L8"><span class="pln">      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`${operation} failed: ${error.message}`</span><span class="pun">);</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="pln">      </span><span class="com">// Let the app keep running by returning an empty result.</span></li><li class="L1"><span class="pln">      </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="pln">result </span><span class="kwd">as</span><span class="pln"> T</span><span class="pun">);</span></li><li class="L2"><span class="pln">    </span><span class="pun">};</span></li><li class="L3"><span class="pln">  </span><span class="pun">}</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="com">/** Log </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> HeroService message with the MessageService */</span></li><li class="L6"><span class="pln">  </span><span class="kwd">private</span><span class="pln"> log</span><span class="pun">(</span><span class="pln">message</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">messageService</span><span class="pun">.</span><span class="kwd">add</span><span class="pun">(</span><span class="str">'HeroService: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> message</span><span class="pun">);</span></li><li class="L8"><span class="pln">  </span><span class="pun">}</span></li><li class="L9"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-45 ng-star-inserted" role="tabpanel" id="mat-tab-content-12-1" aria-labelledby="mat-tab-label-12-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-46 ng-star-inserted" role="tabpanel" id="mat-tab-content-12-2" aria-labelledby="mat-tab-label-12-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="heroescomponent"></a>
<h4 translation-origin="off" id="heroescomponent"><em>HeroesComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#heroescomponent"><i class="material-icons">link</i></a></h4>
<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="heroes/heroes.component.html" path="toh-pt6/src/app/heroes/heroes.component.html">
&lt;h2&gt;My Heroes&lt;/h2&gt;

&lt;div&gt;
  &lt;label&gt;Hero name:
    &lt;input #heroName /&gt;
  &lt;/label&gt;
  &lt;!-- (click) passes input value to add() and then clears the input --&gt;
  &lt;button (click)="add(heroName.value); heroName.value=''"&gt;
    add
  &lt;/button&gt;
&lt;/div&gt;

&lt;ul class="heroes"&gt;
  &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes"&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/detail/{{hero.id}}"&gt;
      &lt;span class="badge"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}
    &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;button class="delete" title="delete hero"
    (click)="delete(hero)"&gt;x&lt;/button&gt;
  &lt;/li&gt;
&lt;/ul&gt;


</code-pane>
  <code-pane title="heroes/heroes.component.ts" path="toh-pt6/src/app/heroes/heroes.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-heroes',
  templateUrl: './heroes.component.html',
  styleUrls: ['./heroes.component.css']
})
export class HeroesComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes: Hero[];

  constructor(private heroService: HeroService) { }

  ngOnInit() {
    this.getHeroes();
  }

  getHeroes(): void {
    this.heroService.getHeroes()
    .subscribe(heroes =&gt; this.heroes = heroes);
  }

  add(name: string): void {
    name = name.trim();
    if (!name) { return; }
    this.heroService.addHero({ name } as Hero)
      .subscribe(hero =&gt; {
        this.heroes.push(hero);
      });
  }

  delete(hero: Hero): void {
    this.heroes = this.heroes.filter(h =&gt; h !== hero);
    this.heroService.deleteHero(hero).subscribe();
  }

}


</code-pane>
  <code-pane title="heroes/heroes.component.css" path="toh-pt6/src/app/heroes/heroes.component.css">
/* HeroesComponent's private CSS styles */
.heroes {
  margin: 0 0 2em 0;
  list-style-type: none;
  padding: 0;
  width: 15em;
}
.heroes li {
  position: relative;
  cursor: pointer;
  background-color: #EEE;
  margin: .5em;
  padding: .3em 0;
  height: 1.6em;
  border-radius: 4px;
}

.heroes li:hover {
  color: #607D8B;
  background-color: #DDD;
  left: .1em;
}

.heroes <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> {
  color: #888;
  text-decoration: none;
  position: relative;
  display: block;
  width: 250px;
}

.heroes <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>:hover {
  color:#607D8B;
}

.heroes .badge {
  display: inline-block;
  font-size: small;
  color: white;
  padding: 0.8em 0.7em 0 0.7em;
  background-color: #607D8B;
  line-height: 1em;
  position: relative;
  left: -1px;
  top: -4px;
  height: 1.8em;
  min-width: 16px;
  text-align: right;
  margin-right: .8em;
  border-radius: 4px 0 0 4px;
}

button {
  background-color: #eee;
  border: none;
  padding: 5px 10px;
  border-radius: 4px;
  cursor: pointer;
  cursor: hand;
  font-family: Arial;
}

button:hover {
  background-color: #cfd8dc;
}

button.delete {
  position: relative;
  left: 194px;
  top: -32px;
  background-color: gray !important;
  color: white;
}



</code-pane>
</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-0" tabindex="0" aria-controls="mat-tab-content-13-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">heroes/heroes.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-1" tabindex="-1" aria-controls="mat-tab-content-13-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">heroes/heroes.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-2" tabindex="-1" aria-controls="mat-tab-content-13-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">heroes/heroes.component.css</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 245px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c10-47 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-13-0" aria-labelledby="mat-tab-label-13-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from heroes/heroes.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="tag">&lt;h2&gt;</span><span class="pln">My Heroes</span><span class="tag">&lt;/h2&gt;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="tag">&lt;div&gt;</span></li><li class="L3"><span class="pln">  </span><span class="tag">&lt;label&gt;</span><span class="pln">Hero name:</span></li><li class="L4"><span class="pln">    </span><span class="tag">&lt;input</span><span class="pln"> #</span><span class="atn">heroName</span><span class="pln"> </span><span class="tag">/&gt;</span></li><li class="L5"><span class="pln">  </span><span class="tag">&lt;/label&gt;</span></li><li class="L6"><span class="pln">  </span><span class="com">&lt;!-- (click) passes input value to add() and then clears the input --&gt;</span></li><li class="L7"><span class="pln">  </span><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"add(heroName.value); heroName.value=''"</span><span class="tag">&gt;</span></li><li class="L8"><span class="pln">    add</span></li><li class="L9"><span class="pln">  </span><span class="tag">&lt;/button&gt;</span></li><li class="L0"><span class="tag">&lt;/div&gt;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="tag">&lt;ul</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"heroes"</span><span class="tag">&gt;</span></li><li class="L3"><span class="pln">  </span><span class="tag">&lt;li</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes"</span><span class="tag">&gt;</span></li><li class="L4"><span class="pln">    </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pun">=</span><span class="atv">"/detail/{{hero.id}}"</span><span class="tag">&gt;</span></li><li class="L5"><span class="pln">      </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"badge"</span><span class="tag">&gt;</span><span class="pln">{{hero.id}}</span><span class="tag">&lt;/span&gt;</span><span class="pln"> {{hero.name}}</span></li><li class="L6"><span class="pln">    </span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></li><li class="L7"><span class="pln">    </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"delete"</span><span class="pln"> </span><span class="atn">title</span><span class="pun">=</span><span class="atv">"delete hero"</span></li><li class="L8"><span class="pln">    (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"delete(hero)"</span><span class="tag">&gt;</span><span class="pln">x</span><span class="tag">&lt;/button&gt;</span></li><li class="L9"><span class="pln">  </span><span class="tag">&lt;/li&gt;</span></li><li class="L0"><span class="tag">&lt;/ul&gt;</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-48 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-1" aria-labelledby="mat-tab-label-13-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-49 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-2" aria-labelledby="mat-tab-label-13-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="herodetailcomponent"></a>
<h4 translation-origin="off" id="herodetailcomponent"><em>HeroDetailComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#herodetailcomponent"><i class="material-icons">link</i></a></h4>
<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="hero-detail/hero-detail.component.html" path="toh-pt6/src/app/hero-detail/hero-detail.component.html">
&lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="hero"&gt;
  &lt;h2&gt;{{ hero.name | <a href="https://angular.cn/api/common/UpperCasePipe" class="code-anchor">uppercase</a> }} Details&lt;/h2&gt;
  &lt;div&gt;&lt;span&gt;id: &lt;/span&gt;{{hero.id}}&lt;/div&gt;
  &lt;div&gt;
    &lt;label&gt;name:
      &lt;input [(<a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a>)]="hero.name" placeholder="name"/&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;button (click)="goBack()"&gt;go back&lt;/button&gt;
  &lt;button (click)="save()"&gt;save&lt;/button&gt;
&lt;/div&gt;


</code-pane>
  <code-pane title="hero-detail/hero-detail.component.ts" path="toh-pt6/src/app/hero-detail/hero-detail.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a>, <a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a> } from '@angular/router';
import { <a href="https://angular.cn/api/common/Location" class="code-anchor">Location</a> } from '@angular/common';

import { Hero }         from '../hero';
import { HeroService }  from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-detail',
  templateUrl: './hero-detail.component.html',
  styleUrls: [ './hero-detail.component.css' ]
})
export class HeroDetailComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  @<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>() hero: Hero;

  constructor(
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>,
    private heroService: HeroService,
    private location: <a href="https://angular.cn/api/common/Location" class="code-anchor">Location</a>
  ) {}

  ngOnInit(): void {
    this.getHero();
  }

  getHero(): void {
    const id = +this.route.snapshot.paramMap.get('id');
    this.heroService.getHero(id)
      .subscribe(hero =&gt; this.hero = hero);
  }

  goBack(): void {
    this.location.back();
  }

 save(): void {
    this.heroService.updateHero(this.hero)
      .subscribe(() =&gt; this.goBack());
  }
}


</code-pane>
</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-14-0" tabindex="0" aria-controls="mat-tab-content-14-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-detail/hero-detail.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-14-1" tabindex="-1" aria-controls="mat-tab-content-14-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-detail/hero-detail.component.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 292px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c10-50 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-14-0" aria-labelledby="mat-tab-label-14-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgIf" class="code-anchor"><span class="atn">ngIf</span></a><span class="pun">=</span><span class="atv">"hero"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;h2&gt;</span><span class="pln">{{ hero.name | </span><a href="https://angular.cn/api/common/UpperCasePipe" class="code-anchor"><span class="pln">uppercase</span></a><span class="pln"> }} Details</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
  </span><span class="tag">&lt;div&gt;&lt;span&gt;</span><span class="pln">id: </span><span class="tag">&lt;/span&gt;</span><span class="pln">{{hero.id}}</span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div&gt;</span><span class="pln">
    </span><span class="tag">&lt;label&gt;</span><span class="pln">name:
      </span><span class="tag">&lt;input</span><span class="pln"> [(</span><a href="https://angular.cn/api/forms/NgModel" class="code-anchor"><span class="atn">ngModel</span></a><span class="pln">)]</span><span class="pun">=</span><span class="atv">"hero.name"</span><span class="pln"> </span><span class="atn">placeholder</span><span class="pun">=</span><span class="atv">"name"</span><span class="tag">/&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"goBack()"</span><span class="tag">&gt;</span><span class="pln">go back</span><span class="tag">&lt;/button&gt;</span><span class="pln">
  </span><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"save()"</span><span class="tag">&gt;</span><span class="pln">save</span><span class="tag">&lt;/button&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-51 ng-star-inserted" role="tabpanel" id="mat-tab-content-14-1" aria-labelledby="mat-tab-label-14-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="herosearchcomponent"></a>
<h4 translation-origin="off" id="herosearchcomponent"><em>HeroSearchComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#herosearchcomponent"><i class="material-icons">link</i></a></h4>
<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="hero-search/hero-search.component.html" path="toh-pt6/src/app/hero-search/hero-search.component.html">
&lt;div id="search-component"&gt;
  &lt;h4&gt;Hero Search&lt;/h4&gt;

  &lt;input #searchBox id="search-box" (keyup)="search(searchBox.value)" /&gt;

  &lt;ul class="search-result"&gt;
    &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>" &gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/detail/{{hero.id}}"&gt;
        {{hero.name}}
      &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;


</code-pane>
  <code-pane title="hero-search/hero-search.component.ts" path="toh-pt6/src/app/hero-search/hero-search.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';

import { Observable, Subject } from 'rxjs';

import {
   debounceTime, distinctUntilChanged, switchMap
 } from 'rxjs/operators';

import { Hero } from '../hero';
import { HeroService } from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-search',
  templateUrl: './hero-search.component.html',
  styleUrls: [ './hero-search.component.css' ]
})
export class HeroSearchComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes$: Observable&lt;Hero[]&gt;;
  private searchTerms = new Subject&lt;string&gt;();

  constructor(private heroService: HeroService) {}

  // Push <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> search term into the observable stream.
  search(term: string): void {
    this.searchTerms.next(term);
  }

  ngOnInit(): void {
    this.heroes$ = this.searchTerms.pipe(
      // wait 300ms after each keystroke before considering the term
      debounceTime(300),

      // ignore new term if same as previous term
      distinctUntilChanged(),

      // switch to new search observable each time the term changes
      switchMap((term: string) =&gt; this.heroService.searchHeroes(term)),
    );
  }
}


</code-pane>
  <code-pane title="hero-search/hero-search.component.css" path="toh-pt6/src/app/hero-search/hero-search.component.css">
/* HeroSearch private styles */
.search-result li {
  border-bottom: 1px solid gray;
  border-left: 1px solid gray;
  border-right: 1px solid gray;
  width:195px;
  height: 16px;
  padding: 5px;
  background-color: white;
  cursor: pointer;
  list-style-type: none;
}

.search-result li:hover {
  background-color: #607D8B;
}

.search-result li <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> {
  color: #888;
  display: block;
  text-decoration: none;
}

.search-result li <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>:hover {
  color: white;
}
.search-result li <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>:active {
  color: white;
}
#search-box {
  width: 200px;
  height: 20px;
}


ul.search-result {
  margin-top: 0;
  padding-left: 0;
}


</code-pane>
</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-0" tabindex="0" aria-controls="mat-tab-content-15-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-search/hero-search.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-1" tabindex="-1" aria-controls="mat-tab-content-15-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-search/hero-search.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-2" tabindex="-1" aria-controls="mat-tab-content-15-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-search/hero-search.component.css</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 307px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c10-52 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-15-0" aria-labelledby="mat-tab-label-15-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-search/hero-search.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"search-component"</span><span class="tag">&gt;</span></li><li class="L1"><span class="pln">  </span><span class="tag">&lt;h4&gt;</span><span class="pln">Hero Search</span><span class="tag">&lt;/h4&gt;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="pln">  </span><span class="tag">&lt;input</span><span class="pln"> #</span><span class="atn">searchBox</span><span class="pln"> </span><span class="atn">id</span><span class="pun">=</span><span class="atv">"search-box"</span><span class="pln"> (</span><span class="atn">keyup</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"search(searchBox.value)"</span><span class="pln"> </span><span class="tag">/&gt;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="tag">&lt;ul</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"search-result"</span><span class="tag">&gt;</span></li><li class="L6"><span class="pln">    </span><span class="tag">&lt;li</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes$ | </span><a href="https://angular.cn/api/core/testing/async" class="code-anchor"><span class="atv">async</span></a><span class="atv">"</span><span class="pln"> </span><span class="tag">&gt;</span></li><li class="L7"><span class="pln">      </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pun">=</span><span class="atv">"/detail/{{hero.id}}"</span><span class="tag">&gt;</span></li><li class="L8"><span class="pln">        {{hero.name}}</span></li><li class="L9"><span class="pln">      </span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></li><li class="L0"><span class="pln">    </span><span class="tag">&lt;/li&gt;</span></li><li class="L1"><span class="pln">  </span><span class="tag">&lt;/ul&gt;</span></li><li class="L2"><span class="tag">&lt;/div&gt;</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-53 ng-star-inserted" role="tabpanel" id="mat-tab-content-15-1" aria-labelledby="mat-tab-label-15-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-54 ng-star-inserted" role="tabpanel" id="mat-tab-content-15-2" aria-labelledby="mat-tab-label-15-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<h2 translation-result="" id="summary-16">小结<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#summary-16"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="summary">Summary<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/tutorial/toh-pt6#summary"><i class="material-icons">link</i></a></h2>

<p translation-result="">旅程即将结束，不过你已经收获颇丰。</p><p translation-origin="off">You're at the end of your journey, and you've accomplished a lot.</p>

<ul>
<li>
<p translation-result=""> 你添加了在应用程序中使用 HTTP 的必备依赖。</p><p translation-origin="off">You added the necessary dependencies to use HTTP in the app.</p>

</li>
<li>
<p translation-result=""> 你重构了 <code>HeroService</code>，以通过 web API 来加载英雄数据。</p><p translation-origin="off">You refactored <code>HeroService</code> to load heroes from a web API.</p>

</li>
<li>
<p translation-result=""> 你扩展了 <code>HeroService</code> 来支持 <code>post()</code>、<code>put()</code> 和 <code>delete()</code> 方法。</p><p translation-origin="off">You extended <code>HeroService</code> to support <code>post()</code>, <code>put()</code>, and <code>delete()</code> methods.</p>

</li>
<li>
<p translation-result=""> 你修改了组件，以允许用户添加、编辑和删除英雄。</p><p translation-origin="off">You updated the components to allow adding, editing, and deleting of heroes.</p>

</li>
<li>
<p translation-result=""> 你配置了一个内存 Web API。</p><p translation-origin="off">You configured an in-memory web API.</p>

</li>
<li>
<p translation-result=""> 你学会了如何使用“可观察对象”。</p><p translation-origin="off">You learned how to use observables.</p>

</li>
</ul>
<p translation-result="">《英雄指南》教程结束了。
如果你准备开始学习 Angular 开发的原理，请开始 <a href="https://angular.cn/guide/architecture" title="Architecture">架构</a> 一章。</p><p translation-origin="off">This concludes the "Tour of Heroes" tutorial.
You're ready to learn more about Angular development in the fundamentals section,
starting with the <a href="https://angular.cn/guide/architecture" title="Architecture">Architecture</a> guide.</p>


</div>
<!-- links to this doc:
 - tutorial/toh-pt4
-->
<!-- links from this doc:
 - api/common/AsyncPipe
 - api/common/Location
 - api/common/NgForOf
 - api/common/NgIf
 - api/common/UpperCasePipe
 - api/common/http/HttpClient
 - api/common/http/HttpClientModule
 - api/common/http/HttpHeaders
 - api/core/Component
 - api/core/Injectable
 - api/core/Input
 - api/core/NgModule
 - api/core/NgModule#imports
 - api/core/OnInit
 - api/core/testing/async
 - api/forms/FormsModule
 - api/forms/NgModel
 - api/http/Http
 - api/platform-browser/BrowserModule
 - api/router/ActivatedRoute
 - api/router/Data
 - api/router/RouterLink
 - api/router/RouterLinkWithHref
 - guide/architecture
 - tutorial/toh-pt6#add-a-new-hero
 - tutorial/toh-pt6#add-emheroserviceaddheroem
 - tutorial/toh-pt6#add-emheroservicedeleteheroem
 - tutorial/toh-pt6#add-emheroserviceupdateheroem
 - tutorial/toh-pt6#add-heroserviceaddhero
 - tutorial/toh-pt6#add-heroservicedeletehero
 - tutorial/toh-pt6#add-heroserviceupdatehero
 - tutorial/toh-pt6#add-search-to-the-dashboard
 - tutorial/toh-pt6#asyncpipe
 - tutorial/toh-pt6#chaining-rxjs-operators
 - tutorial/toh-pt6#create-emherosearchcomponentem
 - tutorial/toh-pt6#create-herosearchcomponent
 - tutorial/toh-pt6#delete-a-hero
 - tutorial/toh-pt6#emhttpclientgetem-returns-response-data
 - tutorial/toh-pt6#enable-http-services
 - tutorial/toh-pt6#error-handling
 - tutorial/toh-pt6#error-handling-4
 - tutorial/toh-pt6#final-code-review
 - tutorial/toh-pt6#final-code-review-6
 - tutorial/toh-pt6#fix-the-emherosearchcomponentem-class
 - tutorial/toh-pt6#fix-the-herosearchcomponent-class
 - tutorial/toh-pt6#get-hero-by-id
 - tutorial/toh-pt6#get-heroes-with-emhttpclientem
 - tutorial/toh-pt6#get-heroes-with-httpclient
 - tutorial/toh-pt6#handleerror
 - tutorial/toh-pt6#herodetailcomponent
 - tutorial/toh-pt6#heroes-and-http
 - tutorial/toh-pt6#heroescomponent
 - tutorial/toh-pt6#herosearchcomponent
 - tutorial/toh-pt6#heroservice-inmemorydataservice-appmodule
 - tutorial/toh-pt6#heroservicesearchheroes
 - tutorial/toh-pt6#http
 - tutorial/toh-pt6#http-methods-return-one-value
 - tutorial/toh-pt6#httpclientget-returns-response-data
 - tutorial/toh-pt6#import-heroes
 - tutorial/toh-pt6#search-by-name
 - tutorial/toh-pt6#search-pipe
 - tutorial/toh-pt6#simulate-a-data-server
 - tutorial/toh-pt6#summary
 - tutorial/toh-pt6#summary-16
 - tutorial/toh-pt6#tap-into-the-emobservableem
 - tutorial/toh-pt6#tap-into-the-observable
 - tutorial/toh-pt6#the-emsearchtermsem-rxjs-subject
 - tutorial/toh-pt6#the-searchterms-rxjs-subject
 - tutorial/toh-pt6#try-it
 - tutorial/toh-pt6#try-it-3
 - tutorial/toh-pt6#update-heroes
 - http://www.learnrxjs.io/operators/transformation/switchmap.html
 - https://github.com/angular/in-memory-web-api
--></div></aio-doc-viewer><aio-dt><!----></aio-dt></section></mat-sidenav-content></mat-sidenav-container><!----><div class="toc-container no-print ng-star-inserted" style="max-height: 3052px;"><aio-toc><!----><div class="toc-inner no-print collapsed ng-star-inserted"><!----><!----><ul class="toc-list"><!----><!----><!----><li title="HTTPlink" class="h1 active ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#http">HTTP</a></li><!----><!----><!----><li title="启用 HTTP 服务link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#enable-http-services">启用 HTTP 服务</a></li><!----><!----><!----><li title="模拟数据服务器link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#simulate-a-data-server">模拟数据服务器</a></li><!----><!----><!----><li title="英雄与 HTTPlink" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#heroes-and-http">英雄与 HTTP</a></li><!----><!----><!----><li title="通过 HttpClient 获取英雄link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#get-heroes-with-emhttpclientem">通过 <code>HttpClient</code> 获取英雄</a></li><!----><!----><!----><li title="Http 方法返回单个值link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#http-methods-return-one-value">Http 方法返回单个值</a></li><!----><!----><!----><li title="HttpClient.get 返回响应数据link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#emhttpclientgetem-returns-response-data"><code>HttpClient.get</code> 返回响应数据</a></li><!----><!----><!----><li title="错误处理link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#error-handling-4">错误处理</a></li><!----><!----><!----><li title="窥探 Observablelink" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#tap-into-the-emobservableem">窥探 <code>Observable</code></a></li><!----><!----><!----><li title="通过 id 获取英雄link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#get-hero-by-id">通过 id 获取英雄</a></li><!----><!----><!----><li title="修改英雄link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#update-heroes">修改英雄</a></li><!----><!----><!----><li title="添加新英雄link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#add-a-new-hero">添加新英雄</a></li><!----><!----><!----><li title="删除某个英雄link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#delete-a-hero">删除某个英雄</a></li><!----><!----><!----><li title="根据名字搜索link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#search-by-name">根据名字搜索</a></li><!----><!----><!----><li title="为仪表盘添加搜索功能link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#add-search-to-the-dashboard">为仪表盘添加搜索功能</a></li><!----><!----><!----><li title="创建 HeroSearchComponentlink" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#create-emherosearchcomponentem">创建 <code>HeroSearchComponent</code></a></li><!----><!----><!----><li title="AsyncPipelink" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#asyncpipe"><em>AsyncPipe</em></a></li><!----><!----><!----><li title="修正 HeroSearchComponent 类link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#fix-the-emherosearchcomponentem-class">修正 <code>HeroSearchComponent</code> 类</a></li><!----><!----><!----><li title="RxJS Subject 类型的 searchTermslink" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#the-emsearchtermsem-rxjs-subject">RxJS <code>Subject</code> 类型的 <code>searchTerms</code></a></li><!----><!----><!----><li title="串联 RxJS 操作符link" class="h3 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#chaining-rxjs-operators">串联 RxJS 操作符</a></li><!----><!----><!----><li title="查看最终代码link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#final-code-review-6">查看最终代码</a></li><!----><!----><!----><li title="小结link" class="h2 ng-star-inserted"><a href="https://angular.cn/tutorial/toh-pt6#summary-16">小结</a></li><!----></ul><!----></div></aio-toc></div><footer class="no-print"><aio-footer><div class="grid-fluid"><!----><div class="footer-block ng-star-inserted"><h3>资源</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/about" title="Angular 贡献者。">关于</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/resources" title="网络上的 Angular 工具、培训、博客等">资源列表</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/presskit" title="我们的联系方式、LOGO 和品牌">宣传资料</a></li><li class="ng-star-inserted"><a class="link" href="https://blog.angular.io/" title="Angular 官方博客">博客</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>帮助</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://stackoverflow.com/questions/tagged/angular" title="Stack Overflow: 这里的社区会回答你关于 Angular 的技术问题">Stack Overflow</a></li><li class="ng-star-inserted"><a class="link" href="https://gitter.im/angular/angular" title="和老鸟聊 Angular">Gitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular/issues" title="在 github 上报告问题和建议。">报告问题</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md" title="让我们彼此尊重">行为规范</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>社区</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/events" title="Post issues and suggestions on github.">活动</a></li><li class="ng-star-inserted"><a class="link" href="http://www.meetup.com/topics/angularjs/" title="参加聚会，向别的开发人员学习">聚会</a></li><li class="ng-star-inserted"><a class="link" href="https://twitter.com/angular" title="Twitter">Twitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular" title="GitHub">GitHub</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/contribute" title="向 Angular 做贡献">做贡献</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>多语言</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.io/" title="English Version.">English Version</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.jp/" title="日本語版">日本語版</a></li></ul></div></div><p> Powered by Google ©2010-2018. 代码授权方式：<a href="https://angular.cn/license" title="License text">MIT-style License</a>. 文档授权方式：<a href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>. </p><p><span class="text-caption">本网站由第三方公司洛阳永欣维护 &nbsp;<a href="http://www.miitbeian.gov.cn/">豫ICP备16019859号-1</a></span></p><p> 当前版本：6.0.1-build.180+sha.8494cf4. </p></aio-footer></footer></aio-shell>

  <noscript>
    &lt;div class="background-sky hero"&gt;&lt;/div&gt;
    &lt;section id="intro"&gt;
      &lt;div class="hero-logo"&gt;
        &lt;img src="assets/images/logos/angular/angular.svg" width="250" height="250"&gt;
      &lt;/div&gt;
      &lt;div class="homepage-container"&gt;
        &lt;div class="hero-headline"&gt;一套框架，多种平台&lt;br&gt;移动 &amp;amp; 桌面&lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
    &lt;h2 style="color: red; text-align: center; margin-top: -50px;"&gt;
      &lt;b&gt;&lt;i&gt;该网站需要浏览器支持 JavaScript &lt;/i&gt;&lt;/b&gt;
    &lt;/h2&gt;
  </noscript>


<script type="text/javascript" src="./Angular - HTTP_files/runtime.e7e60529879ffb07e28e.js.下载"></script><script type="text/javascript" src="./Angular - HTTP_files/polyfills.56dafdd128abda80a86c.js.下载"></script><script type="text/javascript" src="./Angular - HTTP_files/main.e580488e21fdad9d749c.js.下载"></script><div class="cdk-visually-hidden" aria-atomic="true" aria-live="polite"></div></body></html>