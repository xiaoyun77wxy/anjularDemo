<!DOCTYPE html>
<!-- saved from url=(0031)https://angular.cn/guide/router -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Angular - 路由与导航</title>
  <!--<base href="/">--><base href=".">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/x-icon" href="https://angular.cn/favicon.ico">
  <link rel="icon" type="image/x-icon" href="https://angular.cn/assets/images/favicons/favicon.ico">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-194x194.png" sizes="194x194">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-16x16.png" sizes="16x16">
  <link rel="apple-touch-icon" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">

  <!-- NOTE: These need to be kept in sync with `ngsw-manifest.json`. -->
  <link href="./Angular - 路由与导航_files/Material_Icons.css" rel="stylesheet">
  <link href="./Angular - 路由与导航_files/Droid_Sans_Mono.css" rel="stylesheet">
  <link href="./Angular - 路由与导航_files/font-awesome.min.css" rel="stylesheet">
  <!-- -->

  <link rel="manifest" href="https://angular.cn/pwa-manifest.json">
  <meta name="theme-color" content="#1976d2">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="translucent">

  <script async="" src="./Angular - 路由与导航_files/analytics.js.下载"></script><script>
    // Dynamically, pre-emptively, add `noindex`, which will be removed when the doc is ready and valid
    tag = document.createElement('meta'); tag.name = 'robots'; tag.content = 'noindex';
    document.head.appendChild(tag);
  </script>

  <!-- Google Analytics -->
  <script>
  // Note this is a customised version of the GA tracking snippet
  // See the comments below for more info
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;
  ~i.name.indexOf('NG_DEFER_BOOTSTRAP')|| // only load library if not running e2e tests
  m.parentNode.insertBefore(a,m)
  })(window,document,'script','assets/js/analytics.js','ga');
  </script>
  <!-- End Google Analytics -->

  <script>
    // Report fatal errors to Google Analytics
    window.onerror = function() {
      ga('send', 'exception', {exDescription: formatError.apply(null, arguments), exFatal: true});

      function formatError(msg, url, line, col, e) {
        var stack;
        msg = msg.replace(/^Error: /, '');
        if (e) {
          stack = e.stack
              // strip the leading "Error: " from the stack trace
              .replace(/^Error: /, '')
              // strip the message from the stack trace, if present
              .replace(msg + '\n', '')
              // strip leading spaces
              .replace(/^ +/gm, '')
              // strip all leading "at " for each frame
              .replace(/^at /gm, '')
              // replace long urls with just the last segment: `filename:line:column`
              .replace(/(?: \(|@)http.+\/([^/)]+)\)?(?:\n|$)/gm, '@$1\n')
              // replace "eval code" in Edge
              .replace(/ *\(eval code(:\d+:\d+)\)(?:\n|$)/gm, '@???$1\n')
        } else {
          line = line || '?';
          col = col || '?';
          stack = url + ':' + line + ':' + col;
        }
        return (msg + '\n' + stack).substr(0, 150);
      }
    };
  </script>

  <script>
    if (window.document.documentMode) {
      // polyfill IE11 in a blocking way
      var s = document.createElement('script');
      s.src = 'generated/ie-polyfills.min.js';
      document.head.appendChild(s);
    } else if (!Object.assign) {
      // polyfill other non-evergreen browsers in a blocking way
      var polyfillUrl = "https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.find&flags=gated&unknown=polyfill";

      // send a blocking XHR to fetch the polyfill
      // then append it to the document so that its eval-ed synchronously
      // this is required because the method used for IE is not reliable with other non-evergreen browsers
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        var code = this.responseText;
        s.appendChild(document.createTextNode(code));
        document.head.appendChild(s);
      });
      xhr.open("GET", polyfillUrl, false);
      xhr.send();
    }
  </script>

  <script>
    //load CE polyfill
    //HACK: webpack's html plugin mangles the document.write calls if we don't trick it.

    //load the ES5 shim for browsers with native CE support
    function loadCustomElementsShim(){
      document.write('<scri' + 'pt src="assets/js/native-shim.js"><' + '/script>');
    }

    //load the full custom elements polyfill for browsers without support
    function loadCustomElementsPolyfill(){
      document.write('<scri' + 'pt src="assets/js/custom-elements.min.js"><' + '/script>');
    }
    //detect if we have native CE support
    if(!window.customElements){
      loadCustomElementsPolyfill();
    }
    else {
      loadCustomElementsShim();
    }
  </script><script src="./Angular - 路由与导航_files/native-shim.js.下载"></script>

<link rel="stylesheet" href="./Angular - 路由与导航_files/styles.613b7c8de73e274bd4c6.css"><style>@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}</style><style>.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:1}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]{box-shadow:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-flat-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-fab::-moz-focus-inner{border:0}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-fab[disabled]{box-shadow:none}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-mini-fab[disabled]{box-shadow:none}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}</style><style>.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}</style><style>.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}</style><script charset="utf-8" src="./Angular - 路由与导航_files/current-location-current-location-module-ngfactory.f94bfe4754b66577c07b.js.下载"></script><style>.mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}</style><script charset="utf-8" src="./Angular - 路由与导航_files/code-code-example-module-ngfactory_code-code-tabs-module-ngfactory.6a5aabadc81dbdfa0f4e.js.下载"></script><script charset="utf-8" src="./Angular - 路由与导航_files/code-code-tabs-module-ngfactory.8315a94f020cd25fe92d.js.下载"></script><script charset="utf-8" src="./Angular - 路由与导航_files/code-code-example-module-ngfactory.d0ec50584c7428d1d6ed.js.下载"></script><script charset="utf-8" src="./Angular - 路由与导航_files/12.50857b4475720140b255.js.下载"></script><style>.mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}</style><style>.mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}</style><style>.mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}</style><script charset="utf-8" src="./Angular - 路由与导航_files/live-example-live-example-module-ngfactory.76888e8a441aab262101.js.下载"></script></head>
<body>

  <aio-shell ng-version="6.0.0" class="mode-stable sidenav-open page-guide-router folder-guide view-SideNav aio-notification-hide "><div id="top-of-page"></div><!----><mat-toolbar class="app-toolbar no-print mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary"><mat-toolbar-row class="notification-container mat-toolbar-row"><aio-notification actionurl="https://bit.ly/angular-survey-2018" buttontext="Go to survey" expirationdate="2018-01-19" icon="insert_comment" iconlabel="Survey" notificationid="survey-january-2018" class="ng-tns-c2-0 ng-trigger ng-trigger-hideAnimation" style="height: 0px;"><a class="content" href="https://bit.ly/angular-survey-2018"><mat-icon class="icon mat-icon" role="img" aria-hidden="true" aria-label="Survey"><svg fill="#FFFFFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon><span class="message"> Help Angular by taking a <b>1 minute survey</b>! </span><span class="action-button">Go to survey</span></a><button class="close-button mat-icon-button" aria-label="Close" mat-icon-button=""><span class="mat-button-wrapper"><mat-icon aria-label="Dismiss notification" class="mat-icon ng-tns-c2-0" role="img" svgicon="close" aria-hidden="true"><svg fill="#ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple mat-button-ripple-round" matripple=""></div><div class="mat-button-focus-overlay"></div></button></aio-notification></mat-toolbar-row><mat-toolbar-row class="mat-toolbar-row"><button class="hamburger mat-button" mat-button="" title="Docs menu"><span class="mat-button-wrapper"><mat-icon class="mat-icon" role="img" svgicon="menu" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple" matripple=""></div><div class="mat-button-focus-overlay"></div></button><a class="nav-link home" href="https://angular.cn/"><!----><img alt="Home" height="40" src="./Angular - 路由与导航_files/logo-nav@2x.png" title="Home" width="150" class="ng-star-inserted"><!----></a><!----><aio-top-menu class="ng-star-inserted"><ul role="navigation"><!----><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/features" title="特性">特性</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/docs" title="文档">文档</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/resources" title="资源">资源</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/events" title="会议">会议</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://blog.angular.io/" title="博客">博客</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/translations/cn/home" title="关于中文版">关于中文版</a></li></ul></aio-top-menu><aio-search-box class="search-container"><input aria-label="search" placeholder="搜索" type="search"></aio-search-box></mat-toolbar-row></mat-toolbar><!----><mat-sidenav-container class="sidenav-container mat-drawer-container mat-sidenav-container mat-drawer-transition has-floating-toc" role="main"><!----><div class="mat-drawer-backdrop ng-star-inserted"></div><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><mat-sidenav class="sidenav mat-drawer mat-sidenav ng-tns-c6-1 ng-trigger ng-trigger-transform mat-drawer-side ng-star-inserted" tabindex="-1" style="transform: translate3d(0px, 0px, 0px); visibility: visible;"><!----><aio-nav-menu><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/guide/quickstart" title="Angular 破冰"> 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="此《英雄指南》教程会带你用 TypeScript 一步步创建一个 Angular 应用。" aria-pressed="false"> 教程 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial" title="第一部分：《英雄指南》教程简介"> 1. 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt0" title="第二部分：创建应用的外壳"> 2. 应用的“外壳” </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt1" title="第三部分：构建一个简单的英雄编辑器"> 3. 英雄编辑器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt2" title="第四部分：构建一个主从结构的页面，用于展现英雄列表"> 4. 显示英雄列表 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt3" title="第五部分：把主从结构的页面重构成多个组件"> 5. 主从组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt4" title="第六部分：创建一个可复用的服务来管理英雄数据"> 6. 服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt5" title="第七部分：添加 Angular 路由器，并且学习在视图之间导航"> 7. 路由 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt6" title="第八部分：通过 HTTP 来获取并保存英雄数据"> 8. HTTP </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded selected" type="button" title="学习 Angular 的核心知识" aria-pressed="true"> 核心知识 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 应用的基本构造块。" aria-pressed="false"> 架构 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture" title="Angular 应用的基本构造块"> 架构概览 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-modules" title="关于模块。"> 模块（NgModule）简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-components" title="关于组件、模板和视图。"> 组件简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-services" title="关于服务与依赖注入。"> 服务与 DI 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-next-steps" title="学完基础知识之后……"> 后续步骤 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="使用数据绑定构建动态视图" aria-pressed="false"> 组件与模板 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/displaying-data" title="属性绑定可以帮助应用把数据显示在界面上"> 显示数据 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/template-syntax" title="学习如何写模板，以便借助数据绑定机制显示数据并响应事件。"> 模板语法 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lifecycle-hooks" title="Angular 调用指令和组件的生命周期钩子函数，包括它的创建、变更和销毁时。"> 生命周期钩子 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-interaction" title="在不同的指令和组件之间共享信息"> 组件交互 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-styles" title="添加专属于某个组件的样式"> 组件样式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/elements" title="把组件转换成自定义元素。"> Angular 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-component-loader" title="动态加载组件"> 动态组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/attribute-directives" title="属性型指令把行为添加到现有元素上。"> 属性型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/structural-directives" title="结构型指令可以操纵页面的布局"> 结构型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/pipes" title="管道可以在模板中转换显示的内容。"> 管道 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/animations" title="Angular 动画体系指南"> 动画 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的表单" aria-pressed="false"> 表单 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/user-input" title="用户输入触发 DOM 事件。我们通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。"> 用户输入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/forms" title="表单可以创建集中、高效、引人注目的输入体验。Angular 表单可以协调一组数据绑定控件，跟踪变更，验证输入，并表达错误信息。"> 模板驱动表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/form-validation" title="验证用户的表单输入"> 表单验证 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/reactive-forms" title="使用 FormBuilder 、分组和数组创建响应式表单。"> 响应式表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-form" title="使用FormGroup渲染动态表单"> 动态表单 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Observable 与 RxJS" aria-pressed="false"> Observable 与 RxJS <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables" title=""> 可观察对象(Observable) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/rx-library" title=""> RxJS 库 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables-in-angular" title=""> Angular 中的可观察对象 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/practical-observable-usage" title=""> 用法实战 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/comparing-observables" title=""> 与其它技术的比较 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/bootstrapping" title="在应用的根模块（AppModule）中告诉 Angular 如何构造并引导引用。"> 引导启动 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="Angular 中的模块" aria-pressed="true"> Angular 模块 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodules" title="使用 NgModule 让你的应用更高效"> NgModule 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-vs-jsmodule" title="JavaScript 模块和 NgModule 之间的差异"> JS 模块 vs NgModule </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/frequent-ngmodules" title="介绍最常用的 Angular 模块"> 常用模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/module-types" title="介绍特性模块的几种类型"> 特性模块的分类 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/entry-components" title="关于 Angular 中入口组件的一切"> 入口组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/feature-modules" title="创建特性模块，以组织你的代码"> 特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/providers" title="服务提供商与 Angular 模块"> 服务提供商 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/singleton-services" title="创建单例应用"> 单例应用 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/lazy-loading-ngmodules" title="惰性加载模块，以提高应用的性能"> 惰性加载的特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/sharing-ngmodules" title="共享 Angular 模块让你的应用现代化。"> 共享 Angular 模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-api" title="理解 NgModule 的那些细节。"> NgModule API </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-faq" title="回答关于 NgModules 的常见问题。"> NgModule 常见问题 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="依赖注入：创建并注入各种服务。" aria-pressed="false"> 依赖注入 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-pattern" title="学习 Angular 依赖注入系统背后的依赖注入模式"> 依赖注入模式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection" title="Angular 的依赖注入系统能够为 Angular 创建的类创建并交付它们所依赖的服务。"> Angular 依赖注入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/hierarchical-dependency-injection" title="Angular 的多级注入体系会建立与组件平行的注入器树。"> 多级注入器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-in-action" title="依赖注入的使用技巧"> DI 实用技巧 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/guide/http" title="通过 HTTP 协议与远程服务器对话。"> HttpClient </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded selected" href="https://angular.cn/guide/router" title="揭示如何通过 Angular 路由进行基本的屏幕导航。"> 路由与导航 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/testing" title="测试 Angular 应用的技巧与实践。"> 测试 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/cheatsheet" title="关于 Angular 常用编码技术的快速指南。"> 速查表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="把 Angular 用到你的实际工作中的一些技巧" aria-pressed="false"> 其它技术 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/i18n" title="把应用模板中的文本翻译成多种语言。"> 国际化 (i18n) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/language-service" title="使用 Angular 语言服务来为开发提速。"> 语言服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/security" title="Angular 应用开发中的安全技术。"> 安全 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="环境准备与部署" aria-pressed="false"> 环境准备与部署 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup" title="在你自己的机器上安装 Angular QuickStart 种子，以便更快、更高效的开发。"> 搭建本地开发环境 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup-systemjs-anatomy" title="基于 SystemJS 的本地开发环境内幕。"> 搭建方式剖析 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/browser-support" title="浏览器支持与 Polyfills 指南"> 浏览器支持 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/npm-packages" title="建议的 npm 包，以及如何指定包的依赖。"> npm 包 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/typescript-configuration" title="给 Angular 开发者的 TypeScript 配置。"> TypeScript 配置 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/aot-compiler" title="学习如何使用 AOT 预编译器。"> 预先（AOT）编译 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/deployment" title="学习如何部署你的 Angular 应用。"> 部署 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/custom-elements" title="把 Angular 组件用作自定义元素。"> 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的 Service Worker：控制应用的资源缓存。" aria-pressed="false"> Service Worker <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-intro" title="Angular 对 Service Worker 的实现提升了慢速或不稳定的网络连接下的用户体验。"> 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-getting-started" title="在 CLI 项目中启用 Service Worker，并在浏览器中查看效果。"> 快速起步 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-communications" title="那些能让你和 Angular 的 Service Worker 通讯的服务类。"> 与 Service Worker 通讯 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-devops" title="使用 Service Worker 运行应用、管理应用更新、调试以及杀掉正在运行的应用。"> 生产环境下的 Service Worker </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-config" title="配置 Service Worker 的缓存行为。"> Service Worker 配置 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的发布实践，更新计划以及与更新有关的资源。" aria-pressed="false"> 保持最新 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/updating" title="关于如何把 Angular 应用升级到最新版的信息。"> 更新你的项目 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/releases" title="Angular 的版本、发布、支持与弃用策略。"> Angular 的版本发布 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="把 AngularJS 应用增量式的升级到 Angular。" aria-pressed="false"> 从 AngularJS 升级 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/upgrade" title="把 AngularJS 应用增量式的升级到 Angular。"> 升级步骤 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ajs-quick-reference" title="学习如何把 AngularJS 的概念映射到 Angular 中。"> AngularJS 与 Angular 的概念对照 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/universal" title="使用 Angular Universal 在服务端渲染 HTML。">  服务端渲染 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/visual-studio-2015" title="在 Visual Studio 2015 中使用快速起步中的文件"> Visual Studio 2015 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/styleguide" title="写出 Angular 风格的程序"> 风格指南 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/glossary" title="Angular 中最重要的词汇的简要定义。"> 词汇表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/api" title="关于 Angular 中类和值的详细信息。"> API 参考手册 </a></div><!----></aio-nav-item></aio-nav-menu><div class="doc-version"><aio-select><div class="form-select-menu"><button class="form-select-button"><strong></strong><!---->stable (v6.0.0) </button><!----></div></aio-select></div></mat-sidenav><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><!----><mat-sidenav-content cdkscrollable="" class="mat-drawer-content mat-sidenav-content ng-star-inserted" style="margin-left: 262px; margin-right: 0px;"><section class="sidenav-content" role="content" id="guide-router"><aio-mode-banner><!----></aio-mode-banner><aio-doc-viewer class=""><div style="opacity: 1; transition: all 200ms ease-in-out;">
<div class="content">
<h1 translation-result="" id="routing-x26-navigation">路由与导航<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#routing-x26-navigation"><i class="material-icons">link</i></a></h1><aio-toc class="embedded"></aio-toc><h1 translation-origin="off" id="routing--navigation">Routing &amp; Navigation<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#routing--navigation"><i class="material-icons">link</i></a></h1>

<p translation-result="">在用户使用应用程序时，Angular 的<strong><em>路由器</em></strong>能让用户从一个<a href="https://angular.cn/guide/glossary#view">视图</a>导航到另一个视图。</p><p translation-origin="off">The Angular <strong><code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code></strong> enables navigation from one <a href="https://angular.cn/guide/glossary#view">view</a> to the next
as users perform application tasks.</p>

<p translation-result="">本章涵盖了该路由器的主要特性，通过一个小型应用的成长演进来讲解它。参见<live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>。</p><p translation-origin="off">This guide covers the router's primary features, illustrating them through the evolution
of a small application that you can <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>.</p>

<!-- style for all tables on this page -->
<style>
  td, th {vertical-align: top}
</style>
<h2 translation-result="" id="overview-2">概览<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#overview-2"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="overview">Overview<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#overview"><i class="material-icons">link</i></a></h2>

<p translation-result="">浏览器具有熟悉的导航模式：</p><p translation-origin="off">The browser is a familiar model of application navigation:</p>

<ul>
<li>
<p translation-result=""> 在地址栏输入 URL，浏览器就会导航到相应的页面。</p><p translation-origin="off">Enter a URL in the address bar and the browser navigates to a corresponding page.</p>

</li>
<li>
<p translation-result=""> 在页面中点击链接，浏览器就会导航到一个新页面。</p><p translation-origin="off">Click links on the page and the browser navigates to a new page.</p>

</li>
<li>
<p translation-result=""> 点击浏览器的前进和后退按钮，浏览器就会在你的浏览历史中向前或向后导航。</p><p translation-origin="off">Click the browser's back and forward buttons and the browser navigates
backward and forward through the history of pages you've seen.</p>

</li>
</ul>
<p translation-result="">Angular 的 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>（即“路由器”）借鉴了这个模型。它把浏览器中的 URL 看做一个操作指南，
据此导航到一个由客户端生成的视图，并可以把参数传给支撑视图的相应组件，帮它决定具体该展现哪些内容。
你可以为页面中的链接绑定一个路由，这样，当用户点击链接时，就会导航到应用中相应的视图。
当用户点击按钮、从下拉框中选取，或响应来自任何地方的事件时，你也可以在代码控制下进行导航。
路由器还在浏览器的历史日志中记录下这些活动，这样浏览器的前进和后退按钮也能照常工作。</p><p translation-origin="off">The Angular <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> ("the router") borrows from this model.
It can interpret a browser URL as an instruction to navigate to a client-generated view.
It can pass optional parameters along to the supporting view component that help it decide what specific content to present.
You can bind the router to links on a page and it will navigate to
the appropriate application view when the user clicks a link.
You can navigate imperatively when the user clicks a button, selects from a drop box,
or in response to some other stimulus from any source. And the router logs activity
in the browser's history journal so the back and forward buttons work as well.</p>

<a id="basics"></a>
<h2 translation-result="" id="the-basics">基础知识<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-basics"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="the-basics">The Basics<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-basics"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章包括一系列里程碑，从一个单模块、两个页面的简单程序逐步走向带有多个子路由的多视图设计。</p><p translation-origin="off">This guide proceeds in phases, marked by milestones, starting from a simple two-pager
and building toward a modular, multi-view design with child routes.</p>

<p translation-result="">先对路由的一些核心概念做一个介绍，它能帮你逐步过渡到细节。</p><p translation-origin="off">An introduction to a few core router concepts will help orient you to the details that follow.</p>

<a id="basics-base-href"></a>
<h3 translation-result="" id="emx3cbase-hrefem"><em>&lt;base href&gt;</em> 元素<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emx3cbase-hrefem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="base-href"><em>&lt;base href&gt;</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#base-href"><i class="material-icons">link</i></a></h3>

<p translation-result="">大多数带路由的应用都要在<strong><code>index.html</code></strong>的 <code>&lt;head&gt;</code> 标签下先添加一个 <code>&lt;base&gt;</code> 元素，来告诉路由器该如何合成导航用的 URL。</p><p translation-origin="off">Most routing applications should add a <code>&lt;base&gt;</code> element to the <code>index.html</code> as the first child in the  <code>&lt;head&gt;</code> tag
to tell the router how to compose navigation URLs.</p>

<p translation-result="">如果 <code>app</code> 文件夹是该应用的根目录（就像范例应用中一样），那就把 <code>href</code> 的值设置为下面这样：</p><p translation-origin="off">If the <code>app</code> folder is the application root, as it is for the sample application,
set the <code>href</code> value <em>exactly</em> as shown here.</p>

<code-example path="router/src/index.html" linenums="false" title="src/index.html (base-href)" region="base-href" ng-version="6.0.0"><div style="display: none">
&lt;base href="/"&gt;

</div><!----><header class="ng-star-inserted">src/index.html (base-href)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/index.html (base-href)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;base</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"/"</span><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<a id="basics-router-imports"></a>
<h3 translation-result="" id="router-imports">从路由库中导入<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-imports"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-imports">Router imports<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-imports"><i class="material-icons">link</i></a></h3>

<p translation-result="">Angular 的路由器是一个可选的服务，它用来呈现指定的 URL 所对应的视图。
它并不是 Angular 核心库的一部分，而是在它自己的 <code>@angular/router</code> 包中。
像其它 Angular 包一样，你可以从它导入所需的一切。</p><p translation-origin="off">The Angular Router is an optional service that presents a particular component view for a given URL.
It is not part of the Angular core. It is in its own library package, <code>@angular/router</code>.
Import what you need from it as you would from any other Angular package.</p>

<code-example path="router/src/app/app.module.1.ts" linenums="false" title="src/app/app.module.ts (import)" region="import-router" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (import)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (import)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">你将会在<a href="https://angular.cn/guide/router#browser-url-styles">后面</a>学到更多选项。</p><p translation-origin="off">You'll learn about more options in the <a href="https://angular.cn/guide/router#browser-url-styles">details below</a>.</p>

</div>
<a id="basics-config"></a>
<h3 translation-result="" id="configuration">配置<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#configuration"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="configuration">Configuration<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#configuration"><i class="material-icons">link</i></a></h3>

<p translation-result="">每个带路由的 Angular 应用都有一个<em><code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>（路由器）</em>服务的单例对象。
当浏览器的 URL 变化时，路由器会查找对应的 <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code>（路由），并据此决定该显示哪个组件。</p><p translation-origin="off">A routed Angular application has one singleton instance of the <em><code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code></em> service.
When the browser's URL changes, that router looks for a corresponding <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code>
from which it can determine the component to display.</p>

<p translation-result="">路由器需要先配置才会有路由信息。
下面的例子创建了四个路由定义，并用 <code>RouterModule.forRoot</code> 方法来配置路由器，
并把它的返回值添加到 <code>AppModule</code> 的 <code>imports</code> 数组中。</p><p translation-origin="off">A router has no routes until you configure it.
The following example creates four route definitions, configures the router via the <code>RouterModule.forRoot</code> method,
and adds the result to the <code>AppModule</code>'s <code>imports</code> array.</p>

<code-example path="router/src/app/app.module.0.ts" linenums="false" title="src/app/app.module.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'hero/:id',      component: HeroDetailComponent },
  {
    path: 'heroes',
    component: HeroListComponent,
    data: { title: 'Heroes List' }
  },
  { path: '',
    redirectTo: '/heroes',
    pathMatch: 'full'
  },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
    // other imports here
  ],
  ...
})
export class AppModule { }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'hero/:id'</span><span class="pun">,</span><span class="pln">      component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pun">,</span><span class="pln">
    data</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> title</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Heroes List'</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
    redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln">
    pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
      appRoutes</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
    </span><span class="com">// other imports here</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  </span><span class="pun">...</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="example-config"></a>
<p translation-result="">这里的路由数组 <code>appRoutes</code> 描述如何进行导航。
把它传给 <code>RouterModule.forRoot</code> 方法并传给本模块的 <code>imports</code> 数组就可以配置路由器。</p><p translation-origin="off">The <code>appRoutes</code> array of <em>routes</em> describes how to navigate.
Pass it to the <code>RouterModule.forRoot</code> method in the module <code>imports</code> to configure the router.</p>

<p translation-result="">每个 <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code> 都会把一个 URL 的 <code>path</code> 映射到一个组件。
注意，<code>path</code> 不能以<em>斜杠（<code>/</code>）</em>开头。
路由器会为解析和构建最终的 URL，这样当你在应用的多个视图之间导航时，可以任意使用相对路径和绝对路径。</p><p translation-origin="off">Each <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code> maps a URL <code>path</code> to a component.
There are <em>no leading slashes</em> in the <em>path</em>.
The router parses and builds the final URL for you,
allowing you to use both relative and absolute paths when navigating between application views.</p>

<p translation-result="">第二个路由中的 <code>:id</code> 是一个路由参数的令牌(Token)。比如 <code>/hero/42</code> 这个 URL 中，“42”就是 <code>id</code> 参数的值。
此 URL 对应的 <code>HeroDetailComponent</code> 组件将据此查找和展现 <code>id</code> 为 42 的英雄。
在本章中稍后的部分，你将会学习关于路由参数的更多知识。</p><p translation-origin="off">The <code>:id</code> in the second route is a token for a route parameter. In a URL such as <code>/hero/42</code>, "42"
is the value of the <code>id</code> parameter. The corresponding <code>HeroDetailComponent</code>
will use that value to find and present the hero whose <code>id</code> is 42.
You'll learn more about route parameters later in this guide.</p>

<p translation-result="">第三个路由中的 <code>data</code> 属性用来存放于每个具体路由有关的任意信息。该数据可以被任何一个激活路由访问，并能用来保存诸如
页标题、面包屑以及其它静态只读数据。本章稍后的部分，你将使用<a href="https://angular.cn/guide/router#resolve-guard">resolve 守卫</a>来获取动态数据。</p><p translation-origin="off">The <code>data</code> property in the third route is a place to store arbitrary data associated with
this specific route. The data property is accessible within each activated route. Use it to store
items such as page titles, breadcrumb text, and other read-only, <em>static</em> data.
You'll use the <a href="https://angular.cn/guide/router#resolve-guard">resolve guard</a> to retrieve <em>dynamic</em> data later in the guide.</p>

<p translation-result="">第四个路由中的空路径（<code>''</code>）表示应用的默认路径，当 URL 为空时就会访问那里，因此它通常会作为起点。
这个默认路由会重定向到 URL <code>/heroes</code>，并显示 <code>HeroesListComponent</code>。</p><p translation-origin="off">The <strong>empty path</strong> in the fourth route represents the default path for the application,
the place to go when the path in the URL is empty, as it typically is at the start.
This default route redirects to the route for the <code>/heroes</code> URL and, therefore, will display the <code>HeroesListComponent</code>.</p>

<p translation-result="">最后一个路由中的 <code>**</code> 路径是一个<strong>通配符</strong>。当所请求的 URL 不匹配前面定义的路由表中的任何路径时，路由器就会选择此路由。
这个特性可用于显示“404 - Not Found”页，或自动重定向到其它路由。</p><p translation-origin="off">The <code>**</code> path in the last route is a <strong>wildcard</strong>. The router will select this route
if the requested URL doesn't match any paths for routes defined earlier in the configuration.
This is useful for displaying a "404 - Not Found" page or redirecting to another route.</p>

<p translation-result=""><strong>这些路由的定义顺序</strong>是刻意如此设计的。路由器使用<strong>先匹配者优先</strong>的策略来匹配路由，所以，具体路由应该放在通用路由的前面。在上面的配置中，带静态路径的路由被放在了前面，后面是空路径路由，因此它会作为默认路由。而通配符路由被放在最后面，这是因为它能匹配上<em>每一个 URL</em>，因此应该<strong>只有在</strong>前面找不到其它能匹配的路由时才匹配它。</p><p translation-origin="off"><strong>The order of the routes in the configuration matters</strong> and this is by design. The router uses a <strong>first-match wins</strong>
strategy when matching routes, so more specific routes should be placed above less specific routes.
In the configuration above, routes with a static path are listed first, followed by an empty path route,
that matches the default route.
The wildcard route comes last because it matches <em>every URL</em> and should be selected <em>only</em> if no other routes are matched first.</p>

<p translation-result="">如果你想要看到在导航的生命周期中发生过哪些事件，可以使用路由器默认配置中的 <strong>enableTracing</strong> 选项。它会把每个导航生命周期中的事件输出到浏览器的控制台。
这应该只用于<em>调试</em>。你只需要把 <code>enableTracing: true</code> 选项作为第二个参数传给 <code><a href="https://angular.cn/api/router/RouterModule#forRoot" class="code-anchor">RouterModule.forRoot()</a></code> 方法就可以了。</p><p translation-origin="off">If you need to see what events are happening during the navigation lifecycle, there is the <strong>enableTracing</strong> option as part of the router's default configuration. This outputs each router event that took place during each navigation lifecycle to the browser console. This should only be used for <em>debugging</em> purposes. You set the <code>enableTracing: true</code> option in the object passed as the second argument to the <code><a href="https://angular.cn/api/router/RouterModule#forRoot" class="code-anchor">RouterModule.forRoot()</a></code> method.</p>

<a id="basics-router-outlet"></a>
<h3 translation-result="" id="router-outlet-1">路由出口<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-outlet-1"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-outlet">Router outlet<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-outlet"><i class="material-icons">link</i></a></h3>

<p translation-result="">有了这份配置，当本应用在浏览器中的 URL 变为 <code>/heroes</code> 时，路由器就会匹配到 <code>path</code> 为 <code>heroes</code> 的 <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code>，并在宿主视图中的<em><code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code></em>之后显示 <code>HeroListComponent</code> 组件。</p><p translation-origin="off">Given this configuration, when the browser URL for this application becomes <code>/heroes</code>,
the router matches that URL to the route path <code>/heroes</code> and displays the <code>HeroListComponent</code>
<em>after</em> a <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> that you've placed in the host view's HTML.</p>

<code-example language="html" ng-version="6.0.0"><div style="display: none">
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  &lt;!-- Routed views go here --&gt;

</div><!----><aio-code><pre class="prettyprint lang-html">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="tag">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="tag">&gt;</span><span class="pln">
</span><span class="com">&lt;!-- Routed views go here --&gt;</span></code>
    </pre></aio-code></code-example>
<a id="basics-router-links"></a>
<h3 translation-result="" id="router-links">路由器链接<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-links"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-links">Router links<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-links"><i class="material-icons">link</i></a></h3>

<p translation-result="">现在，你已经有了配置好的一些路由，还找到了渲染它们的地方，但又该如何导航到它呢？固然，从浏览器的地址栏直接输入 URL 也能做到，但是大多数情况下，导航是某些用户操作的结果，比如点击一个 A 标签。</p><p translation-origin="off">Now you have routes configured and a place to render them, but
how do you navigate? The URL could arrive directly from the browser address bar.
But most of the time you navigate as a result of some user action such as the click of
an anchor tag.</p>

<p translation-result="">考虑下列模板：</p><p translation-origin="off">Consider the following template:</p>

<code-example path="router/src/app/app.component.1.ts" linenums="false" title="src/app/app.component.ts (template)" region="template" ng-version="6.0.0"><div style="display: none">
template: `
  &lt;h1&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
  &lt;nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
  &lt;/nav&gt;
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
`

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (template)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (template)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
  &lt;h1&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
  &lt;nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
  &lt;/nav&gt;
  &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
`</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a></code> 标签上的 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令让路由器得以控制这个 <code><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a></code> 元素。
这里的导航路径是固定的，因此可以把一个字符串赋给 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code>（“一次性”绑定）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directives on the anchor tags give the router control over those elements.
The navigation paths are fixed, so you can assign a string to the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> (a "one-time" binding).</p>

<p translation-result="">如果需要更加动态的导航路径，那就把它绑定到一个返回<em>链接参数数组</em>的模板表达式。
路由器会把这个数组解析成完整的 URL。</p><p translation-origin="off">Had the navigation path been more dynamic, you could have bound to a template expression that
returned an array of route link parameters (the <em>link parameters array</em>).
The router resolves that array into a complete URL.</p>

<p translation-result="">每个 <code><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a></code> 标签上的<strong><code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code></strong>指令可以帮用户在外观上区分出当前选中的“活动”路由。
当与它关联的 <em>RouterLink</em> 被激活时，路由器会把 CSS 类 <code>active</code> 添加到这个元素上。
你可以把该指令添加到 <code><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a></code> 元素或它的父元素上。</p><p translation-origin="off">The <strong><code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code></strong> directive on each anchor tag helps visually distinguish the anchor for the currently selected "active" route.
The router adds the <code>active</code> CSS class to the element when the associated <em>RouterLink</em> becomes active.
You can add this directive to the anchor or to its parent element.</p>

<a id="basics-router-state"></a>
<h3 translation-result="" id="router-state">路由器状态<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-state"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-state">Router state<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-state"><i class="material-icons">link</i></a></h3>

<p translation-result="">在导航时的每个生命周期成功完成时，路由器会构建出一个 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 组成的树，它表示路由器的当前状态。
你可以在应用中的任何地方用 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 服务及其 <code>routerState</code> 属性来访问当前的 <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> 值。</p><p translation-origin="off">After the end of each successful navigation lifecycle, the router builds a tree of <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> objects
that make up the current state of the router. You can access the current <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> from anywhere in the
application using the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> service and the <code>routerState</code> property.</p>

<p translation-result=""><code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> 中的每个 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 都提供了从任意激活路由开始向上或向下遍历路由树的一种方式，以获得关于父、子、兄弟路由的信息。</p><p translation-origin="off">Each <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> in the <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> provides methods to traverse up and down the route tree
to get information from parent, child and sibling routes.</p>

<a id="activated-route"></a>
<h3 translation-result="" id="activated-route">激活的路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#activated-route"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="activated-route">Activated route<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#activated-route"><i class="material-icons">link</i></a></h3>

<p translation-result="">该路由的路径和参数可以通过注入进来的一个名叫<a href="https://angular.cn/api/router/ActivatedRoute">ActivatedRoute</a>的路由服务来获取。
它有一大堆有用的信息，包括：</p><p translation-origin="off">The route path and parameters are available through an injected router service called the
<a href="https://angular.cn/api/router/ActivatedRoute">ActivatedRoute</a>.
It has a great deal of useful information including:</p>

<table>
  <tbody><tr>
    <th>
<p translation-result="">      属性</p><p translation-origin="off">      Property</p>

    </th>
    <th>
<p translation-result="">      说明</p><p translation-origin="off">      Description</p>

    </th>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>url</code></p>
    </td>
    <td>
<p translation-result="">    路由路径的 <code>Observable</code> 对象，是一个由路由路径中的各个部分组成的字符串数组。</p><p translation-origin="off">    An <code>Observable</code> of the route path(s), represented as an array of strings for each part of the route path.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>data</code></p>
    </td>
    <td>
<p translation-result="">    一个 <code>Observable</code>，其中包含提供给路由的 <code>data</code> 对象。也包含由<a href="https://angular.cn/guide/router#resolve-guard">解析守卫（resolve guard）</a>解析而来的值。</p><p translation-origin="off">    An <code>Observable</code> that contains the <code>data</code> object provided for the route. Also contains any resolved values from the <a href="https://angular.cn/guide/router#resolve-guard">resolve guard</a>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>paramMap</code></p>
    </td>
    <td>
<p translation-result="">    一个 <code>Observable</code>，其中包含一个由当前路由的必要参数和<a href="https://angular.cn/guide/router#optional-route-parameters">可选参数</a>组成的<a href="https://angular.cn/api/router/ParamMap">map</a>对象。用这个 map 可以获取来自同名参数的单一值或多重值。</p><p translation-origin="off">    An <code>Observable</code> that contains a <a href="https://angular.cn/api/router/ParamMap">map</a> of the required and <a href="https://angular.cn/guide/router#optional-route-parameters">optional parameters</a> specific to the route. The map supports retrieving single and multiple values from the same parameter.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>queryParamMap</code></p>
    </td>
    <td>
<p translation-result="">    一个 <code>Observable</code>，其中包含一个对所有路由都有效的<a href="https://angular.cn/guide/router#query-parameters">查询参数</a>组成的<a href="https://angular.cn/api/router/ParamMap">map</a>对象。
用这个 map 可以获取来自查询参数的单一值或多重值。</p><p translation-origin="off">    An <code>Observable</code> that contains a <a href="https://angular.cn/api/router/ParamMap">map</a> of the <a href="https://angular.cn/guide/router#query-parameters">query parameters</a> available to all routes.
The map supports retrieving single and multiple values from the query parameter.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>fragment</code></p>
    </td>
    <td>
<p translation-result="">    一个适用于所有路由的 URL 的 <a href="https://angular.cn/guide/router#fragment">fragment（片段）</a>的 <code>Observable</code>。</p><p translation-origin="off">    An <code>Observable</code> of the URL <a href="https://angular.cn/guide/router#fragment">fragment</a> available to all routes.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>outlet</code></p>
    </td>
    <td>
<p translation-result="">    要把该路由渲染到的 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> 的名字。对于无名路由，它的路由名是 <code>primary</code>，而不是空串。</p><p translation-origin="off">    The name of the <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> used to render the route. For an unnamed outlet, the outlet name is <em>primary</em>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>routeConfig</code></p>
    </td>
    <td>
<p translation-result="">    用于该路由的路由配置信息，其中包含原始路径。</p><p translation-origin="off">    The route configuration used for the route that contains the origin path.</p>

    </td>
  </tr>
    <tr>
    <td>
<p translation-origin="off">      <code>parent</code></p>
    </td>
    <td>
<p translation-result="">    当该路由是一个<a href="https://angular.cn/guide/router#child-routing-component">子路由</a>时，表示该路由的父级 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>。</p><p translation-origin="off">    The route's parent <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> when this route is a <a href="https://angular.cn/guide/router#child-routing-component">child route</a>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>firstChild</code></p>
    </td>
    <td>
<p translation-result="">    包含该路由的子路由列表中的第一个 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>。</p><p translation-origin="off">    Contains the first <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> in the list of this route's child routes.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>children</code></p>
    </td>
    <td>
<p translation-result="">    包含当前路由下所有已激活的<a href="https://angular.cn/guide/router#child-routing-component">子路由</a>。</p><p translation-origin="off">    Contains all the <a href="https://angular.cn/guide/router#child-routing-component">child routes</a> activated under the current route.</p>

    </td>
  </tr>
</tbody></table>
<div class="l-sub-section">
<p translation-result="">有两个旧式属性仍然是有效的，但它们不如其替代品那样强力，建议不再用它们，它们还将在未来的 Angular 版本中废弃。</p><p translation-origin="off">Two older properties are still available. They are less capable than their replacements, discouraged, and may be deprecated in a future Angular version.</p>

<p translation-result=""><strong><code>params</code></strong> —— 一个 <code>Observable</code> 对象，其中包含当前路由的必要参数和<a href="https://angular.cn/guide/router#optional-route-parameters">可选参数</a>。请改用 <code>paramMap</code>。</p><p translation-origin="off"><strong><code>params</code></strong>—An <code>Observable</code> that contains the required and <a href="https://angular.cn/guide/router#optional-route-parameters">optional parameters</a> specific to the route. Use <code>paramMap</code> instead.</p>

<p translation-result=""><strong><code>queryParams</code></strong> —— 一个 <code>Observable</code> 对象，其中包含对所有路由都有效的<a href="https://angular.cn/guide/router#query-parameters">查询参数</a>。请改用 <code>queryParamMap</code>。</p><p translation-origin="off"><strong><code>queryParams</code></strong>—An <code>Observable</code> that contains the <a href="https://angular.cn/guide/router#query-parameters">query parameters</a> available to all routes.
Use <code>queryParamMap</code> instead.</p>

</div>
<h3 translation-result="" id="router-events">路由事件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-events"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-events">Router events<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-events"><i class="material-icons">link</i></a></h3>

<p translation-result="">在每次导航中，<code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 都会通过 <code><a href="https://angular.cn/api/router/Router#events" class="code-anchor">Router.events</a></code> 属性发布一些导航事件。这些事件的范围涵盖了从开始导航到结束导航之间的很多时间点。下表中列出了全部导航事件：</p><p translation-origin="off">During each navigation, the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> emits navigation events through the <code><a href="https://angular.cn/api/router/Router#events" class="code-anchor">Router.events</a></code> property. These events range from when the navigation starts and ends to many points in between. The full list of navigation events is displayed in the table below.</p>

<table>
  <tbody><tr>
    <th>
<p translation-result="">      路由器事件</p><p translation-origin="off">      Router Event</p>

    </th>
    <th>
<p translation-result="">      说明</p><p translation-origin="off">      Description</p>

    </th>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/NavigationStart" class="code-anchor">NavigationStart</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/NavigationStart">事件</a>会在导航开始时触发。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/NavigationStart">event</a> triggered when navigation starts.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/RoutesRecognized" class="code-anchor">RoutesRecognized</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/RoutesRecognized">事件</a>会在路由器解析完 URL，并识别出了相应的路由时触发</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/RoutesRecognized">event</a> triggered when the Router parses the URL and the routes are recognized.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouteConfigLoadStart" class="code-anchor">RouteConfigLoadStart</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/RouteConfigLoadStart">事件</a>会在 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 对一个路由配置进行<a href="https://angular.cn/guide/router#asynchronous-routing">惰性加载</a>之前触发。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/RouteConfigLoadStart">event</a> triggered before the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>
<a href="https://angular.cn/guide/router#asynchronous-routing">lazy loads</a> a route configuration.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouteConfigLoadEnd" class="code-anchor">RouteConfigLoadEnd</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/RouteConfigLoadEnd">事件</a>会在路由被惰性加载之后触发。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/RouteConfigLoadEnd">event</a> triggered after a route has been lazy loaded.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/NavigationEnd" class="code-anchor">NavigationEnd</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/NavigationEnd">事件</a>会在导航成功结束之后触发。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/NavigationEnd">event</a> triggered when navigation ends successfully.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/NavigationCancel" class="code-anchor">NavigationCancel</a></code></p>
    </td>
    <td>
<p translation-result="">      本<a href="https://angular.cn/api/router/NavigationCancel">事件</a>会在导航被取消之后触发。
这可能是因为在导航期间某个<a href="https://angular.cn/guide/router#guards">路由守卫</a>返回了 <code>false</code>。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/NavigationCancel">event</a> triggered when navigation is canceled.
This is due to a <a href="https://angular.cn/guide/router#guards">Route Guard</a> returning false during navigation.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/NavigationError" class="code-anchor">NavigationError</a></code></p>
    </td>
    <td>
<p translation-result="">      这个<a href="https://angular.cn/api/router/NavigationError">事件</a>会在导航由于意料之外的错误而失败时触发。</p><p translation-origin="off">      An <a href="https://angular.cn/api/router/NavigationError">event</a> triggered when navigation fails due to an unexpected error.</p>

    </td>
  </tr>
</tbody></table>
<p translation-result="">当打开了 <code>enableTracing</code> 选项时，这些事件也同时会记录到控制台中。由于这些事件是以 <code>Observable</code> 的形式提供的，所以你可以对自己感兴趣的事件进行 <code>filter()</code>，并 <code>subscribe()</code> 它们，以便根据导航过程中的事件顺序做出决策。</p><p translation-origin="off">These events are logged to the console when the <code>enableTracing</code> option is enabled also. Since the events are provided as an <code>Observable</code>, you can <code>filter()</code> for events of interest and <code>subscribe()</code> to them to make decisions based on the sequence of events in the navigation process.</p>

<a id="basics-summary"></a>
<h3 translation-result="" id="summary-5">总结一下<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#summary-5"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="summary">Summary<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#summary"><i class="material-icons">link</i></a></h3>

<p translation-result="">该应用有一个配置过的路由器。
外壳组件中有一个 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>，它能显示路由器所生成的视图。
它还有一些 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>，用户可以点击它们，来通过路由器进行导航。</p><p translation-origin="off">The application has a configured router.
The shell component has a <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> where it can display views produced by the router.
It has <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>s that users can click to navigate via the router.</p>

<p translation-result="">下面是一些<em>路由器</em>中的关键词汇及其含义：</p><p translation-origin="off">Here are the key <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> terms and their meanings:</p>

<table>
  <tbody><tr>
    <th>
<p translation-result="">      路由器部件</p><p translation-origin="off">      Router Part</p>

    </th>
    <th>
<p translation-result="">      含义</p><p translation-origin="off">      Meaning</p>

    </th>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>（路由器）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code></p>

    </td>
    <td>
<p translation-result="">      为激活的 URL 显示应用组件。管理从一个组件到另一个组件的导航</p><p translation-origin="off">      Displays the application component for the active URL.
Manages navigation from one component to the next.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code></p>
    </td>
    <td>
<p translation-result="">      一个独立的 Angular 模块，用于提供所需的服务提供商，以及用来在应用视图之间进行导航的指令。</p><p translation-origin="off">      A separate NgModule that provides the necessary service providers
and directives for navigating through application views.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a></code>（路由数组）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a></code></p>

    </td>
    <td>
<p translation-result="">      定义了一个路由数组，每一个都会把一个 URL 路径映射到一个组件。</p><p translation-origin="off">      Defines an array of Routes, each mapping a URL path to a component.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code>（路由）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a></code></p>

    </td>
    <td>
<p translation-result="">      定义路由器该如何根据 URL 模式（pattern）来导航到组件。大多数路由都由路径和组件类构成。</p><p translation-origin="off">      Defines how the router should navigate to a component based on a URL pattern.
Most routes consist of a path and a component type.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>（路由出口）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code></p>

    </td>
    <td>
<p translation-result="">      该指令（<code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code>）用来标记出路由器该在哪里显示视图。</p><p translation-origin="off">      The directive (<code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code>) that marks where the router displays a view.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>（路由链接）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code></p>

    </td>
    <td>
<p translation-result="">      这个指令把可点击的 HTML 元素绑定到某个路由。点击带有 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> 指令（绑定到<i>字符串</i>或<i>链接参数数组</i>）的元素时就会触发一次导航。</p><p translation-origin="off">      The directive for binding a clickable HTML element to
a route. Clicking an element with a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> directive
that is bound to a <i>string</i> or a <i>link parameters array</i> triggers a navigation.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code>（活动路由链接）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code></p>

    </td>
    <td>
<p translation-result="">      当 HTML 元素上或元素内的<code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code>变为激活或非激活状态时，该指令为这个 HTML 元素添加或移除 CSS 类。</p><p translation-origin="off">      The directive for adding/removing classes from an HTML element when an associated
<code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> contained on or inside the element becomes active/inactive.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>（激活的路由）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code></p>

    </td>
    <td>
<p translation-result="">      为每个路由组件提供提供的一个服务，它包含特定于路由的信息，比如路由参数、静态数据、解析数据、全局查询参数和全局碎片（fragment）。</p><p translation-origin="off">      A service that is provided to each route component that contains route specific
information such as route parameters, static data, resolve data, global query params, and the global fragment.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code>（路由器状态）</p><p translation-origin="off">      <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code></p>

    </td>
    <td>
<p translation-result="">      路由器的当前状态包含了一棵由程序中激活的路由构成的树。它包含一些用于遍历路由树的快捷方法。</p><p translation-origin="off">      The current state of the router including a tree of the currently activated
routes together with convenience methods for traversing the route tree.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <b><i>链接参数数组</i></b></p><p translation-origin="off">      <b><i>Link parameters array</i></b></p>

    </td>
    <td>
<p translation-result="">      这个数组会被路由器解释成一个路由操作指南。你可以把一个<code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>绑定到该数组，或者把它作为参数传给<code>Router.navigate</code>方法。</p><p translation-origin="off">      An array that the router interprets as a routing instruction.
You can bind that array to a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> or pass the array as an argument to
the <code>Router.navigate</code> method.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-result="">      <b><i>路由组件</i></b></p><p translation-origin="off">      <b><i>Routing component</i></b></p>

    </td>
    <td>
<p translation-result="">      一个带有<code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>的 Angular 组件，它根据路由器的导航来显示相应的视图。</p><p translation-origin="off">      An Angular component with a <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> that displays views based on router navigations.</p>

    </td>
  </tr>
</tbody></table>
<a id="sample-app-intro"></a>
<h2 translation-result="" id="the-sample-application">范例应用<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-sample-application"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="the-sample-application">The sample application<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-sample-application"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章要讲的是如何开发一个带路由的多页面应用。
接下来会重点讲它的设计决策，并描述路由的关键特性，比如：</p><p translation-origin="off">This guide describes development of a multi-page routed sample application.
Along the way, it highlights design decisions and describes key features of the router such as:</p>

<ul>
<li>
<p translation-result=""> 把应用的各个特性组织成模块。</p><p translation-origin="off">Organizing the application features into modules.</p>

</li>
<li>
<p translation-result=""> 导航到组件（<em>Heroes</em> 链接到“英雄列表”组件）。</p><p translation-origin="off">Navigating to a component (<em>Heroes</em> link to "Heroes List").</p>

</li>
<li>
<p translation-result=""> 包含一个路由参数（当路由到“英雄详情”时，把该英雄的 <code>id</code> 传进去）。</p><p translation-origin="off">Including a route parameter (passing the Hero <code>id</code> while routing to the "Hero Detail").</p>

</li>
<li>
<p translation-result=""> 子路由（<em>危机中心</em>特性有一组自己的路由）。</p><p translation-origin="off">Child routes (the <em>Crisis Center</em> has its own routes).</p>

</li>
<li>
<p translation-result=""> <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> 守卫（检查路由的访问权限）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> guard (checking route access).</p>

</li>
<li>
<p translation-result=""> <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 守卫（检查子路由的访问权限）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> guard (checking child route access).</p>

</li>
<li>
<p translation-result=""> <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> 守卫（询问是否丢弃未保存的更改）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> guard (ask permission to discard unsaved changes).</p>

</li>
<li>
<p translation-result=""> <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> 守卫（预先获取路由数据）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> guard (pre-fetching route data).</p>

</li>
<li>
<p translation-result=""> 惰性加载特性模块。</p><p translation-origin="off">Lazy loading feature modules.</p>

</li>
<li>
<p translation-result=""> <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 守卫（在加载特性模块之前进行检查）。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> guard (check before loading feature module assets).</p>

</li>
</ul>
<p translation-result="">如果打算一步步构建出本应用，本章就会经过一系列里程碑。
但是，本章并不是一个教程，它隐藏了构造 Angular 应用的细节，那些细节会在本文档的其它地方展开。</p><p translation-origin="off">The guide proceeds as a sequence of milestones as if you were building the app step-by-step.
But, it is not a tutorial and it glosses over details of Angular application construction
that are more thoroughly covered elsewhere in the documentation.</p>

<p translation-result="">本应用的最终版源码可以在<live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>中查看和下载。</p><p translation-origin="off">The full source for the final version of the app can be seen and downloaded from the <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>.</p>

<h3 translation-result="" id="the-sample-application-in-action">范例程序的动图<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-sample-application-in-action"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-sample-application-in-action">The sample application in action<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-sample-application-in-action"><i class="material-icons">link</i></a></h3>

<p translation-result="">假设本程序会用来帮助“英雄管理局”运行他们的业务。
英雄们需要找工作，而“英雄管理局”为他们寻找待解决的危机。</p><p translation-origin="off">Imagine an application that helps the <em>Hero Employment Agency</em> run its business.
Heroes need work and the agency finds crises for them to solve.</p>

<p translation-result="">本应用具有三个主要的特性区：</p><p translation-origin="off">The application has three main feature areas:</p>

<ol>
<li>
<p translation-result=""><em>危机中心</em>用于维护要指派给英雄的危机列表。</p><p translation-origin="off">A <em>Crisis Center</em> for maintaining the list of crises for assignment to heroes.</p>

</li>
<li>
<p translation-result=""><em>英雄</em>区用于维护管理局雇佣的英雄列表。</p><p translation-origin="off">A <em>Heroes</em> area for maintaining the list of heroes employed by the agency.</p>

</li>
<li>
<p translation-result=""><em>管理</em>区会管理危机和英雄的列表。</p><p translation-origin="off">An <em>Admin</em> area to manage the list of crises and heroes.</p>

</li>
</ol>
<p translation-result="">点击<live-example title="英雄职介中心的在线例子" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="英雄职介中心的在线例子">英雄职介中心的在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>试用一下。</p><p translation-origin="off">Try it by clicking on this <live-example title="Hero Employment Agency Live Example" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="Hero Employment Agency Live Example">Hero Employment Agency Live Example</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>.</p>

<p translation-result="">等应用热身完毕，你就会看到一排导航按钮，以及一个<em>英雄列表</em>视图。</p><p translation-origin="off">Once the app warms up, you'll see a row of navigation buttons
and the <em>Heroes</em> view with its list of heroes.</p>

<figure>
  <img src="./Angular - 路由与导航_files/hero-list.png" alt="Hero List" width="250" height="225">
</figure>
<p translation-result="">选择其中之一，该应用就会把你带到此英雄的编辑页面。</p><p translation-origin="off">Select one hero and the app takes you to a hero editing screen.</p>

<figure>
  <img src="./Angular - 路由与导航_files/hero-detail.png" alt="Crisis Center Detail" width="250" height="162">
</figure>
<p translation-result="">修改完名字，再点击“后退”按钮，应用又回到了英雄列表页，其中显示的英雄名已经变了。注意，对名字的修改会立即生效。</p><p translation-origin="off">Alter the name.
Click the "Back" button and the app returns to the heroes list which displays the changed hero name.
Notice that the name change took effect immediately.</p>

<p translation-result="">另外你也可以点击浏览器本身的后退按钮，这样也同样会回到英雄列表页。
在 Angular 应用中导航也会和标准的 Web 导航一样更新浏览器中的历史。</p><p translation-origin="off">Had you clicked the browser's back button instead of the "Back" button,
the app would have returned you to the heroes list as well.
Angular app navigation updates the browser history as normal web navigation does.</p>

<p translation-result="">现在，点击<em>危机中心</em>链接，前往<em>危机</em>列表页。</p><p translation-origin="off">Now click the <em>Crisis Center</em> link for a list of ongoing crises.</p>

<figure>
  <img src="./Angular - 路由与导航_files/crisis-center-list.png" alt="Crisis Center List" width="250" height="209">
</figure>
<p translation-result="">选择其中之一，该应用就会把你带到此危机的编辑页面。
<em>危机详情</em>出现在了当前页的子视图区，也就是在列表的紧下方。</p><p translation-origin="off">Select a crisis and the application takes you to a crisis editing screen.
The <em>Crisis Detail</em> appears in a child view on the same page, beneath the list.</p>

<p translation-result="">修改危机的名称。
注意，危机列表中的相应名称<strong>并没有</strong>修改。</p><p translation-origin="off">Alter the name of a crisis.
Notice that the corresponding name in the crisis list does <em>not</em> change.</p>

<figure>
  <img src="./Angular - 路由与导航_files/crisis-center-detail.png" alt="Crisis Center Detail" width="250" height="281">
</figure>
<p translation-result="">这和<em>英雄详情</em>页略有不同。<em>英雄详情</em>会立即保存你所做的更改。
而<em>危机详情</em>页中，你的更改都是临时的 —— 除非按“保存”按钮保存它们，或者按“取消”按钮放弃它们。
这两个按钮都会导航回<em>危机中心</em>，显示危机列表。</p><p translation-origin="off">Unlike <em>Hero Detail</em>, which updates as you type,
<em>Crisis Detail</em> changes are temporary until you either save or discard them by pressing the "Save" or "Cancel" buttons.
Both buttons navigate back to the <em>Crisis Center</em> and its list of crises.</p>

<p translation-result=""><strong><em>先不要点击这些按钮</em></strong>。
而是点击浏览器的后退按钮，或者点击“Heroes”链接。</p><p translation-origin="off"><strong><em>Do not click either button yet</em></strong>.
Click the browser back button or the "Heroes" link instead.</p>

<p translation-result="">这时会弹出一个对话框。</p><p translation-origin="off">Up pops a dialog box.</p>

<figure>
  <img src="./Angular - 路由与导航_files/confirm-dialog.png" alt="Confirm Dialog" width="250" height="101">
</figure>
<p translation-result="">你可以回答“确定”以放弃这些更改，或者回答“取消”来继续编辑。</p><p translation-origin="off">You can say "OK" and lose your changes or click "Cancel" and continue editing.</p>

<p translation-result="">这种行为的幕后是路由器的 <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> 守卫。
该守卫让你有机会进行清理工作或在离开当前视图之前请求用户的许可。</p><p translation-origin="off">Behind this behavior is the router's <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> guard.
The guard gives you a chance to clean-up or ask the user's permission before navigating away from the current view.</p>

<p translation-result=""><code>Admin</code> 和 <code>Login</code> 按钮用于演示路由器的其它能力，本章稍后的部分会讲解它们。这里只是个简短的讲解。</p><p translation-origin="off">The <code>Admin</code> and <code>Login</code> buttons illustrate other router capabilities to be covered later in the guide.
This short introduction will do for now.</p>

<p translation-result="">这就开始本应用的第一个里程碑。</p><p translation-origin="off">Proceed to the first application milestone.</p>

<a id="getting-started"></a>
<h2 translation-result="" id="milestone-1-getting-started-with-the-router">里程碑 1：从路由器开始<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-1-getting-started-with-the-router"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-1-getting-started-with-the-router">Milestone 1: Getting started with the router<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-1-getting-started-with-the-router"><i class="material-icons">link</i></a></h2>

<p translation-result="">开始本应用的一个简版，它在两个空路由之间导航。</p><p translation-origin="off">Begin with a simple version of the app that navigates between two empty views.</p>

<figure>
  <img src="./Angular - 路由与导航_files/router-1-anim.gif" alt="App in action" width="250" height="152">
</figure>
<a id="base-href"></a>
<h3 translation-result="" id="set-the-emx3cbase-hrefem">设置<em>&lt;base href&gt;</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#set-the-emx3cbase-hrefem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="set-the-base-href">Set the <em>&lt;base href&gt;</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#set-the-base-href"><i class="material-icons">link</i></a></h3>

<p translation-result="">路由器使用浏览器的<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" title="HTML5 browser history push-state">history.pushState</a>进行导航。
感谢 <code>pushState</code>！有了它，你就能按所期望的样子来显示应用内部的 URL 路径，比如：<code>localhost:3000/crisis-center</code>。虽然你使用的全部是客户端合成的视图，但应用内部的这些 URL 看起来和来自服务器的没有什么不同。</p><p translation-origin="off">The router uses the browser's
<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" title="HTML5 browser history push-state">history.pushState</a>
for navigation. Thanks to <code>pushState</code>, you can make in-app URL paths look the way you want them to
look, e.g. <code>localhost:3000/crisis-center</code>. The in-app URLs can be indistinguishable from server URLs.</p>

<p translation-result="">现代 HTML 5 浏览器是最早支持 <code>pushState</code> 的，这也就是很多人喜欢把这种 URL 称作“HTML 5 风格的”URL 的原因。</p><p translation-origin="off">Modern HTML5 browsers were the first to support <code>pushState</code> which is why many people refer to these URLs as
"HTML5 style" URLs.</p>

<div class="l-sub-section">
<p translation-result="">HTML 5 风格的导航是路由器的默认值。请到下面的附录<a href="https://angular.cn/guide/router#browser-url-styles">浏览器 URL 风格</a>中学习为什么首选“HTML 5”风格、如何调整它的行为，以及如何在必要时切换回老式的 hash（#）风格。</p><p translation-origin="off">HTML5 style navigation is the router default.
In the <a href="https://angular.cn/guide/router#browser-url-styles">LocationStrategy and browser URL styles</a> Appendix,
learn why HTML5 style is preferred, how to adjust its behavior, and how to switch to the
older hash (#) style, if necessary.</p>

</div>
<p translation-result="">你必须往本应用的 <code>index.html</code> 中<strong>添加一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" target="_blank" title="base href">&lt;base href&gt; 元素</a></strong>，这样 <code>pushState</code> 才能正常工作。
当引用 CSS 文件、脚本和图片时，浏览器会用 <code>&lt;base href&gt;</code> 的值作为<em>相对</em>URL 的前缀。</p><p translation-origin="off">You must <strong>add a
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" title="base href">&lt;base href&gt; element</a></strong>
to the app's <code>index.html</code> for <code>pushState</code> routing to work.
The browser uses the <code>&lt;base href&gt;</code> value to prefix <em>relative</em> URLs when referencing
CSS files, scripts, and images.</p>

<p translation-result="">把 <code>&lt;base&gt;</code> 元素添加到 <code>&lt;head&gt;</code> 元素中。
如果 <code>app</code> 目录是应用的根目录，对于本应用，可以像这样设置<strong><code>index.html</code></strong>中的 <code>href</code> 值：</p><p translation-origin="off">Add the <code>&lt;base&gt;</code> element just after the  <code>&lt;head&gt;</code> tag.
If the <code>app</code> folder is the application root, as it is for this application,
set the <code>href</code> value in <strong><code>index.html</code></strong> <em>exactly</em> as shown here.</p>

<code-example path="router/src/index.html" linenums="false" title="src/index.html (base-href)" region="base-href" ng-version="6.0.0"><div style="display: none">
&lt;base href="/"&gt;

</div><!----><header class="ng-star-inserted">src/index.html (base-href)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/index.html (base-href)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;base</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"/"</span><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<div class="callout is-important">
<header translation-result="">在线例子说明</header><header translation-origin="off">Live example note</header>

<p translation-result="">像 Stackblitz 这样的在线编程环境会动态设置应用的基地址（base href），因此你没办法指定固定的地址。
这就是为什么范例代码中要用一个脚本动态写入 <code>&lt;base&gt;</code> 标签，而不是直接写 <code>&lt;base href...&gt;</code>。</p><p translation-origin="off">A live coding environment like Stackblitz sets the application base address dynamically so you can't specify a fixed address.
That's why the example code replaces the <code>&lt;base href...&gt;</code> with a script that writes the <code>&lt;base&gt;</code> tag on the fly.</p>

<code-example language="html" ng-version="6.0.0"><div style="display: none">
  &lt;script&gt;document.write('&lt;base href="' + document.location + '" /&gt;');&lt;/script&gt;

</div><!----><aio-code><pre class="prettyprint lang-html">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;script&gt;</span><span class="pln">document</span><span class="pun">.</span><span class="pln">write</span><span class="pun">(</span><span class="str">'&lt;base href="'</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">location </span><span class="pun">+</span><span class="pln"> </span><span class="str">'" /&gt;'</span><span class="pun">);</span><span class="tag">&lt;/script&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你只应该在在线例子这种情况下使用这种小花招，不要把它用到产品的正式代码中。</p><p translation-origin="off">You only need this trick for the live example, not production code.</p>

</div>
<a id="import"></a>
<h3 translation-result="" id="importing-from-the-router-library">从路由库中导入<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#importing-from-the-router-library"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="importing-from-the-router-library">Importing from the router library<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#importing-from-the-router-library"><i class="material-icons">link</i></a></h3>

<p translation-result="">先从路由库导入一些符号。
路由器在它自己的 <code>@angular/router</code> 包中。
它不是 Angular 内核的一部分。该路由器是可选的服务，这是因为并不是所有应用都需要路由，并且，如果需要，你还可能需要另外的路由库。</p><p translation-origin="off">Begin by importing some symbols from the router library.
The Router is in its own <code>@angular/router</code> package.
It's not part of the Angular core. The router is an optional service because not all applications
need routing and, depending on your requirements, you may need a different routing library.</p>

<p translation-result="">通过一些路由来配置路由器，你可以教路由器如何进行导航。</p><p translation-origin="off">You teach the router how to navigate by configuring it with routes.</p>

<a id="route-config"></a>
<h4 translation-result="" id="define-routes">定义路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#define-routes"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="define-routes">Define routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#define-routes"><i class="material-icons">link</i></a></h4>

<p translation-result="">路由器必须用“路由定义”的列表进行配置。</p><p translation-origin="off">A router must be configured with a list of route definitions.</p>

<p translation-result="">第一个配置中定义了由两个路由构成的数组，它们分别通过路径(path)导航到了 <code>CrisisListComponent</code> 和 <code>HeroListComponent</code> 组件。</p><p translation-origin="off">The first configuration defines an array of two routes with simple paths leading to the
<code>CrisisListComponent</code> and <code>HeroListComponent</code>.</p>

<p translation-result="">每个定义都被翻译成了一个<a href="https://angular.cn/api/router/Route">Route</a>对象。该对象有一个 <code>path</code> 字段，表示该路由中的 URL 路径部分，和一个 <code>component</code> 字段，表示与该路由相关联的组件。</p><p translation-origin="off">Each definition translates to a <a href="https://angular.cn/api/router/Route">Route</a> object which has two things: a
<code>path</code>, the URL path segment for this route; and a
<code>component</code>, the component associated with this route.</p>

<p translation-result="">当浏览器的 URL 变化时或在代码中告诉路由器导航到一个路径时，路由器就会翻出它用来保存这些路由定义的注册表。</p><p translation-origin="off">The router draws upon its registry of definitions when the browser URL changes
or when application code tells the router to navigate along a route path.</p>

<p translation-result="">直白的说，你可以这样解释第一个路由：</p><p translation-origin="off">In simpler terms, you might say this of the first route:</p>

<ul>
<li>
<p translation-result="">   当浏览器地址栏的 URL 变化时，如果它匹配上了路径部分 <code>/crisis-center</code>，路由器就会激活一个 <code>CrisisListComponent</code> 的实例，并显示它的视图。</p><p translation-origin="off">When the browser's location URL changes to match the path segment <code>/crisis-center</code>, then
the router activates an instance of the <code>CrisisListComponent</code> and displays its view.</p>

</li>
<li>
<p translation-result="">   <strong>当应用程序请求导航到路径 <code>/crisis-center</code> 时，路由器激活一个 <code>CrisisListComponent</code> 的实例，显示它的视图，并将该路径更新到浏览器地址栏和历史。</strong></p><p translation-origin="off">When the application requests navigation to the path <code>/crisis-center</code>, the router
activates an instance of <code>CrisisListComponent</code>, displays its view, and updates the
browser's address location and history with the URL for that path.</p>

</li>
</ul>
<p translation-result="">下面是第一个配置。把路由数组传递到 <code>RouterModule.forRoot</code> 方法，该方法返回一个包含已配置的 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 服务提供商模块和一些其它路由包需要的服务提供商。应用启动时，<code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 将在当前浏览器 URL 的基础上进行初始导航。</p><p translation-origin="off">Here is the first configuration. Pass the array of routes, <code>appRoutes</code>, to the <code>RouterModule.forRoot</code> method.
It returns a module, containing the configured <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> service provider, plus other providers that the routing library requires.
Once the application is bootstrapped, the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> performs the initial navigation based on the current browser URL.</p>

<code-example path="router/src/app/app.module.1.ts" linenums="false" title="src/app/app.module.ts (first-config)" region="first-config" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }        from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }          from '@angular/forms';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { AppComponent }          from './app.component';
import { CrisisListComponent }   from './crisis-list.component';
import { HeroListComponent }     from './hero-list.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'heroes', component: HeroListComponent },
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  declarations: [
    AppComponent,
    HeroListComponent,
    CrisisListComponent,
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (first-config)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (first-config)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
      appRoutes</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroListComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">CrisisListComponent</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">作为简单的路由配置，将添加配置好的 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> 到 <code>AppModule</code> 中就足够了。
随着应用的成长，你将需要将路由配置重构到单独的文件，并创建<strong><a href="https://angular.cn/guide/router#routing-module">路由模块</a></strong> - 一种特别的、专门为特性模块的路由器服务的<strong>服务模块</strong>。</p><p translation-origin="off">Adding the configured <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> to the <code>AppModule</code> is sufficient for simple route configurations.
As the application grows, you'll want to refactor the routing configuration into a separate file
and create a <strong><a href="https://angular.cn/guide/router#routing-module">Routing Module</a></strong>, a special type of <code>Service Module</code> dedicated to the purpose
of routing in feature modules.</p>

</div>
<p translation-result="">在 <code>AppModule</code> 中提供 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code>，让该路由器在应用的任何地方都能被使用。</p><p translation-origin="off">Providing the <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> in the <code>AppModule</code> makes the Router available everywhere in the application.</p>

<a id="shell"></a>
<h3 translation-result="" id="the-emappcomponentem-shell"><em>AppComponent</em> 外壳组件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-emappcomponentem-shell"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-appcomponent-shell">The <em>AppComponent</em> shell<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-appcomponent-shell"><i class="material-icons">link</i></a></h3>

<p translation-result="">根组件 <code>AppComponent</code> 是本应用的壳。它在顶部有一个标题、一个带两个链接的导航条，在底部有一个<em>路由器出口</em>，路由器会在它所指定的位置上把视图切入或调出页面。就像下图中所标出的：</p><p translation-origin="off">The root <code>AppComponent</code> is the application shell. It has a title, a navigation bar with two links,
and a <em>router outlet</em> where the router swaps views on and off the page. Here's what you get:</p>

<figure>
  <img src="./Angular - 路由与导航_files/shell-and-outlet.png" alt="Shell" width="300" height="102">
</figure>
<a id="shell-template"></a>
<p translation-result="">该组件所对应的模板是这样的：</p><p translation-origin="off">The corresponding component template looks like this:</p>

<code-example path="router/src/app/app.component.1.ts" linenums="false" title="src/app/app.component.ts (template)" region="template" ng-version="6.0.0"><div style="display: none">
template: `
  &lt;h1&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
  &lt;nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
  &lt;/nav&gt;
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
`

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (template)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (template)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
  &lt;h1&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
  &lt;nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
  &lt;/nav&gt;
  &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
`</span></code>
    </pre></aio-code></code-example>
<a id="router-outlet"></a>
<h3 translation-result="" id="emrouteroutletem">路由出口<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emrouteroutletem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="routeroutlet"><em>RouterOutlet</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#routeroutlet"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> 是一个来自路由库的组件。
路由器会在 <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code> 标签中显示视图。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> is a directive from the router library that marks
the spot in the template where the router should display the views for that outlet.</p>

<div class="l-sub-section">
<p translation-result="">路由器会把 <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code> 元素添加到了 DOM 中，紧接着立即在这个 <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code> <em>之后</em>插入导航到的视图元素。</p><p translation-origin="off">The router adds the <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code> element to the DOM
and subsequently inserts the navigated view element
immediately <em>after</em> the <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code>.</p>

</div>
<a id="router-link"></a>
<h3 translation-result="" id="emrouterlinkem-binding"><code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> 绑定<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emrouterlinkem-binding"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="routerlink-binding"><em>RouterLink</em> binding<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#routerlink-binding"><i class="material-icons">link</i></a></h3>

<p translation-result="">在出口上方的 A 标签中，有一个绑定 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令的<a href="https://angular.cn/guide/template-syntax#property-binding">属性绑定</a>，就像这样：<code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="..."</code>。</p><p translation-origin="off">Above the outlet, within the anchor tags, you see
<a href="https://angular.cn/guide/template-syntax#attribute-binding">attribute bindings</a> to
the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive that look like <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="..."</code>.</p>

<p translation-result="">例子中的每个链接都有一个字符串型的路径，也就是你以前配置过的路由路径，但还没有指定路由参数。</p><p translation-origin="off">The links in this example each have a string path, the path of a route that
you configured earlier. There are no route parameters yet.</p>

<p translation-result="">你还可以通过提供查询字符串参数为 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 提供更多情境信息，或提供一个 URL 片段（Fragment 或 hash）来跳转到本页面中的其它区域。
查询字符串可以由 <code>[queryParams]</code> 绑定来提供，它需要一个对象型参数（如 <code>{ name: 'value' }</code>），而 URL 片段需要一个绑定到 <code>[fragment]</code> 的单一值。</p><p translation-origin="off">You can also add more contextual information to the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> by providing query string parameters
or a URL fragment for jumping to different areas on the page. Query string parameters
are provided through the <code>[queryParams]</code> binding which takes an object (e.g. <code>{ name: 'value' }</code>), while the URL fragment
takes a single value bound to the <code>[fragment]</code> input binding.</p>

<div class="l-sub-section">
<p translation-result="">还可以到<a href="https://angular.cn/guide/router#link-parameters-array">后面的附录</a>中学习如何使用<strong>链接参数数组</strong>。</p><p translation-origin="off">Learn about the how you can also use the <em>link parameters array</em> in the <a href="https://angular.cn/guide/router#link-parameters-array">appendix below</a>.</p>

</div>
<a id="router-link-active"></a>
<h3 translation-result="" id="emrouterlinkactiveem-binding"><code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a></code> 绑定<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emrouterlinkactiveem-binding"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="routerlinkactive-binding"><em>RouterLinkActive</em> binding<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#routerlinkactive-binding"><i class="material-icons">link</i></a></h3>

<p translation-result="">每个 A 标签还有一个到 <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> 指令的<a href="https://angular.cn/guide/template-syntax#property-binding">属性绑定</a>，就像 <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="..."</code>。</p><p translation-origin="off">On each anchor tag, you also see <a href="https://angular.cn/guide/template-syntax#property-binding">property bindings</a> to
the <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> directive that look like <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="..."</code>.</p>

<p translation-result="">等号（=）右侧的模板表达式包含用空格分隔的一些 CSS 类。当路由激活时路由器就会把它们添加到此链接上（反之则移除）。你还可以把 <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> 指令绑定到一个 CSS 类组成的数组，如 <code>[<a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>]="['...']"</code>。</p><p translation-origin="off">The template expression to the right of the equals (=) contains a space-delimited string of CSS classes
that the Router will add when this link is active (and remove when the link is inactive).
You can also set the <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> directive to a string of classes such as <code>[<a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>]="'active fluffy'"</code>
or bind it to a component property that returns such a string.</p>

<p translation-result=""><code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> 指令会基于当前的 <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> 对象来为激活的 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 切换 CSS 类。
这会一直沿着路由树往下进行级联处理，所以父路由链接和子路由链接可能会同时激活。
要改变这种行为，可以把 <code>[routerLinkActiveOptions]</code> 绑定到 <code>{exact: true}</code> 表达式。
如果使用了 <code>{ exact: true }</code>，那么只有在其 URL 与当前 URL 精确匹配时才会激活指定的 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> directive toggles css classes for active <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>s based on the current <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code>.
This cascades down through each level of the route tree, so parent and child router links can be active at the same time.
To override this behavior, you can bind to the <code>[routerLinkActiveOptions]</code> input binding with the <code>{ exact: true }</code> expression.
By using <code>{ exact: true }</code>, a given <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> will only be active if its URL is an exact match to the current URL.</p>

<a id="router-directives"></a>
<h3 translation-result="" id="emrouter-directivesem"><em>路由器指令集</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emrouter-directivesem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="router-directives"><em>Router directives</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#router-directives"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>、<code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> 和 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> 是由 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> 包提供的指令。
现在你可以把它用在模板中了。</p><p translation-origin="off"><code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>, <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">RouterLinkActive</a></code> and <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> are directives provided by the Angular <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> package.
They are readily available for you to use in the template.</p>

<p translation-result=""><code>app.component.ts</code> 目前是这样的：</p><p translation-origin="off">The current state of <code>app.component.ts</code> looks like this:</p>

<code-example path="router/src/app/app.component.1.ts" linenums="false" title="src/app/app.component.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  template: `
    &lt;h1&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AppComponent { }


</div><!----><header class="ng-star-inserted">src/app/app.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;h1&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
    &lt;nav&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;/nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="wildcard"></a>
<h3 translation-result="" id="wildcard-route">通配符路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#wildcard-route"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="wildcard-route">Wildcard route<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#wildcard-route"><i class="material-icons">link</i></a></h3>

<p translation-result="">你以前在应用中创建过两个路由，一个是 <code>/crisis-center</code>，另一个是 <code>/heroes</code>。
所有其它 URL 都会导致路由器抛出错误，并让应用崩溃。</p><p translation-origin="off">You've created two routes in the app so far, one to <code>/crisis-center</code> and the other to <code>/heroes</code>.
Any other URL causes the router to throw an error and crash the app.</p>

<p translation-result="">可以添加一个<strong>通配符</strong>路由来拦截所有无效的 URL，并优雅的处理它们。
<em>通配符</em>路由的 <code>path</code> 是两个星号（<code>**</code>），它会匹配<em>任何</em> URL。
当路由器匹配不上以前定义的那些路由时，它就会选择<em>这个</em>路由。
通配符路由可以导航到自定义的“404 Not Found”组件，也可以<a href="https://angular.cn/guide/router#redirect">重定向</a>到一个现有路由。</p><p translation-origin="off">Add a <strong>wildcard</strong> route to intercept invalid URLs and handle them gracefully.
A <em>wildcard</em> route has a path consisting of two asterisks. It matches <em>every</em> URL.
The router will select <em>this</em> route if it can't match a route earlier in the configuration.
A wildcard route can navigate to a custom "404 Not Found" component or <a href="https://angular.cn/guide/router#redirect">redirect</a> to an existing route.</p>

<div class="l-sub-section">
<p translation-result="">路由器使用<a href="https://angular.cn/guide/router#example-config">先匹配者优先</a>的策略来选择路由。
通配符路由是路由配置中最没有特定性的那个，因此务必确保它是配置中的<em>最后一个</em>路由。</p><p translation-origin="off">The router selects the route with a <a href="https://angular.cn/guide/router#example-config"><em>first match wins</em></a> strategy.
Wildcard routes are the least specific routes in the route configuration.
Be sure it is the <em>last</em> route in the configuration.</p>

</div>
<p translation-result="">要测试本特性，请往 <code>HeroListComponent</code> 的模板中添加一个带 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 的按钮，并且把它的链接设置为 <code>"/sidekicks"</code>。</p><p translation-origin="off">To test this feature, add a button with a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> to the <code>HeroListComponent</code> template and set the link to <code>"/sidekicks"</code>.</p>

<code-example path="router/src/app/hero-list.component.ts" linenums="false" title="src/app/hero-list.component.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;h2&gt;HEROES&lt;/h2&gt;
    &lt;p&gt;Get your heroes here&lt;/p&gt;

    &lt;button <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
  `
})
export class HeroListComponent { }


</div><!----><header class="ng-star-inserted">src/app/hero-list.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-list.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;h2&gt;HEROES&lt;/h2&gt;
    &lt;p&gt;Get your heroes here&lt;/p&gt;

    &lt;button </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当用户点击该按钮时，应用就会失败，因为你尚未定义过 <code>"/sidekicks"</code> 路由。</p><p translation-origin="off">The application will fail if the user clicks that button because you haven't defined a <code>"/sidekicks"</code> route yet.</p>

<p translation-result="">不要添加 <code>"/sidekicks"</code> 路由，而是定义一个“通配符”路由，让它直接导航到 <code>PageNotFoundComponent</code> 组件。</p><p translation-origin="off">Instead of adding the <code>"/sidekicks"</code> route, define a <code>wildcard</code> route instead and have it navigate to a simple <code>PageNotFoundComponent</code>.</p>

<code-example path="router/src/app/app.module.1.ts" linenums="false" title="src/app/app.module.ts (wildcard)" region="wildcard" ng-version="6.0.0"><div style="display: none">
{ path: '**', component: PageNotFoundComponent }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (wildcard)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (wildcard)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">创建 <code>PageNotFoundComponent</code>，以便在用户访问无效网址时显示它。</p><p translation-origin="off">Create the <code>PageNotFoundComponent</code> to display when users visit invalid URLs.</p>

<code-example path="router/src/app/not-found.component.ts" linenums="false" title="src/app/not-found.component.ts (404 component)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: '&lt;h2&gt;Page not found&lt;/h2&gt;'
})
export class PageNotFoundComponent {}


</div><!----><header class="ng-star-inserted">src/app/not-found.component.ts (404 component)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/not-found.component.ts (404 component)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">'&lt;h2&gt;Page not found&lt;/h2&gt;'</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">像其它组件一样，把 <code>PageNotFoundComponent</code> 添加到 <code>AppModule</code> 的声明中。</p><p translation-origin="off">As with the other components, add the <code>PageNotFoundComponent</code> to the <code>AppModule</code> declarations.</p>

<p translation-result="">现在，当用户访问 <code>/sidekicks</code> 或任何无效的 URL 时，浏览器就会显示“Page not found”。
浏览器的地址栏仍指向无效的 URL。</p><p translation-origin="off">Now when the user visits <code>/sidekicks</code>, or any other invalid URL, the browser displays "Page not found".
The browser address bar continues to point to the invalid URL.</p>

<a id="default-route"></a>
<h3 translation-result="" id="the-emdefaultem-route-to-heroes">把<em>默认</em>路由设置为英雄列表<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-emdefaultem-route-to-heroes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-default-route-to-heroes">The <em>default</em> route to heroes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#the-default-route-to-heroes"><i class="material-icons">link</i></a></h3>

<p translation-result="">应用启动时，浏览器地址栏中的初始 URL 是这样的：</p><p translation-origin="off">When the application launches, the initial URL in the browser bar is something like:</p>

<code-example ng-version="6.0.0"><div style="display: none">
  localhost:3000
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3000</span></code>
    </pre></aio-code></code-example>
<p translation-result="">它不能匹配上任何具体的路由，于是就会走到通配符路由中去，并且显示 <code>PageNotFoundComponent</code>。</p><p translation-origin="off">That doesn't match any of the concrete configured routes which means
the router falls through to the wildcard route and displays the <code>PageNotFoundComponent</code>.</p>

<p translation-result="">这个应用需要一个有效的<strong>默认路由</strong>，在这里应该用英雄列表作为默认页。当用户点击"Heroes"链接或把 <code>localhost:3000/heroes</code> 粘贴到地址栏时，它应该导航到列表页。</p><p translation-origin="off">The application needs a <strong>default route</strong> to a valid page.
The default page for this app is the list of heroes.
The app should navigate there as if the user clicked the "Heroes" link or pasted <code>localhost:3000/heroes</code> into the address bar.</p>

<a id="redirect"></a>
<h3 translation-result="" id="redirecting-routes">重定向路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#redirecting-routes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="redirecting-routes">Redirecting routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#redirecting-routes"><i class="material-icons">link</i></a></h3>

<p translation-result="">首选方案是添加一个 <code>redirect</code> 路由来把最初的相对路径（<code>''</code>）转换成期望的默认路径（<code>/heroes</code>）。
浏览器地址栏会显示 <code>.../heroes</code>，就像你直接导航到那里一样。</p><p translation-origin="off">The preferred solution is to add a <code>redirect</code> route that translates the initial relative URL (<code>''</code>)
to the desired default path (<code>/heroes</code>). The browser address bar shows <code>.../heroes</code> as if you'd navigated there directly.</p>

<p translation-result="">在通配符路由<em>上方</em>添加一个默认路由。
在下方的代码片段中，它出现在通配符路由的紧上方，展示了这个里程碑的完整 <code>appRoutes</code>。</p><p translation-origin="off">Add the default route somewhere <em>above</em> the wildcard route.
It's just above the wildcard route in the following excerpt showing the complete <code>appRoutes</code> for this milestone.</p>

<code-example path="router/src/app/app-routing.module.1.ts" linenums="false" title="src/app/app-routing.module.ts (appRoutes)" region="appRoutes" ng-version="6.0.0"><div style="display: none">
const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'heroes',        component: HeroListComponent },
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (appRoutes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (appRoutes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln">        component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span></code>
    </pre></aio-code></code-example>
<p translation-result="">重定向路由需要一个 <code>pathMatch</code> 属性，来告诉路由器如何用 URL 去匹配路由的路径，否则路由器就会报错。
在本应用中，路由器应该只有在<em>完整的 URL</em>等于 <code>''</code> 时才选择 <code>HeroListComponent</code> 组件，因此要把 <code>pathMatch</code> 设置为 <code>'full'</code>。</p><p translation-origin="off">A redirect route requires a <code>pathMatch</code> property to tell the router how to match a URL to the path of a route.
The router throws an error if you don't.
In this app, the router should select the route to the <code>HeroListComponent</code> only when the <em>entire URL</em> matches <code>''</code>,
so set the <code>pathMatch</code> value to <code>'full'</code>.</p>

<div class="l-sub-section">
<p translation-result="">从技术角度说，<code>pathMatch = 'full'</code> 导致 URL 中<em>剩下的</em>、未匹配的部分必须等于 <code>''</code>。
在这个例子中，跳转路由在一个顶级路由中，因此<em>剩下的</em>URL 和<em>完整的</em>URL 是一样的。</p><p translation-origin="off">Technically, <code>pathMatch = 'full'</code> results in a route hit when the <em>remaining</em>, unmatched segments of the URL match <code>''</code>.
In this example, the redirect is in a top level route so the <em>remaining</em> URL and the <em>entire</em> URL are the same thing.</p>

<p translation-result=""><code>pathMatch</code> 的另一个可能的值是 <code>'prefix'</code>，它会告诉路由器：当<em>剩下的</em>URL 以这个跳转路由中的 <code>prefix</code> 值开头时，就会匹配上这个跳转路由。</p><p translation-origin="off">The other possible <code>pathMatch</code> value is <code>'prefix'</code> which tells the router
to match the redirect route when the <em>remaining</em> URL <strong><em>begins</em></strong> with the redirect route's <em>prefix</em> path.</p>

<p translation-result="">在这里不能这么做！如果 <code>pathMatch</code> 的值是 <code>'prefix'</code>，那么<em>每个</em>URL 都会匹配上 <code>''</code>。</p><p translation-origin="off">Don't do that here.
If the <code>pathMatch</code> value were <code>'prefix'</code>, <em>every</em> URL would match <code>''</code>.</p>

<p translation-result="">尝试把它设置为 <code>'prefix'</code>，然后点击 <code>Go to sidekicks</code> 按钮。别忘了，它是一个无效 URL，本应显示“Page not found”页。
但是，你仍然在“英雄列表”页中。在地址栏中输入一个无效的 URL，你又被路由到了 <code>/heroes</code>。
<em>每一个</em> URL，无论有效与否，都会匹配上这个路由定义。</p><p translation-origin="off">Try setting it to <code>'prefix'</code> then click the <code>Go to sidekicks</code> button.
Remember that's a bad URL and you should see the "Page not found" page.
Instead, you're still on the "Heroes" page.
Enter a bad URL in the browser address bar.
You're instantly re-routed to <code>/heroes</code>.
<em>Every</em> URL, good or bad, that falls through to <em>this</em> route definition
will be a match.</p>

<p translation-result="">默认路由应该只有在<em>整个</em>URL 等于 <code>''</code> 时才重定向到 <code>HeroListComponent</code>，别忘了把重定向路由设置为 <code>pathMatch = 'full'</code>。</p><p translation-origin="off">The default route should redirect to the <code>HeroListComponent</code> <em>only</em> when the <em>entire</em> url is  <code>''</code>.
Remember to restore the redirect to <code>pathMatch = 'full'</code>.</p>

<p translation-result="">要了解更多，参见 Victor Savkin 的帖子<a href="http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes">关于重定向</a>。</p><p translation-origin="off">Learn more in Victor Savkin's
<a href="http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes">post on redirects</a>.</p>

</div>
<h3 translation-result="" id="basics-wrap-up">“起步阶段”总结<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#basics-wrap-up"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="basics-wrap-up">Basics wrap up<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#basics-wrap-up"><i class="material-icons">link</i></a></h3>

<p translation-result="">你得到了一个非常基本的、带导航的应用，当用户点击链接时，它能在两个视图之间切换。</p><p translation-origin="off">You've got a very basic navigating app, one that can switch between two views
when the user clicks a link.</p>

<p translation-result="">你学到了如何：</p><p translation-origin="off">You've learned how to do the following:</p>

<ul>
<li>
<p translation-result=""> 加载路由库</p><p translation-origin="off">Load the router library.</p>

</li>
<li>
<p translation-result=""> 往壳组件的模板中添加一个导航条，导航条中有一些 A 标签、<code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code> 指令和 <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a></code> 指令</p><p translation-origin="off">Add a nav bar to the shell template with anchor tags, <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a></code>  and <code><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a></code> directives.</p>

</li>
<li>
<p translation-result=""> 往壳组件的模板中添加一个 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a></code> 指令，视图将会被显示在那里</p><p translation-origin="off">Add a <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a></code> to the shell template where views will be displayed.</p>

</li>
<li>
<p translation-result=""> 用 <code>RouterModule.forRoot</code> 配置路由器模块</p><p translation-origin="off">Configure the router module with <code>RouterModule.forRoot</code>.</p>

</li>
<li>
<p translation-result=""> 设置路由器，使其合成 HTML5 模式的浏览器 URL。</p><p translation-origin="off">Set the router to compose HTML5 browser URLs.</p>

</li>
<li>
<p translation-result=""> 使用通配符路由来处理无效路由</p><p translation-origin="off">handle invalid routes with a <code>wildcard</code> route.</p>

</li>
<li>
<p translation-result=""> 当应用在空路径下启动时，导航到默认路由</p><p translation-origin="off">navigate to the default route when the app launches with an empty path.</p>

</li>
</ul>
<p translation-result="">这个初学者应用的其它部分有点平淡无奇，从路由器的角度来看也很平淡。
如果你还是倾向于在这个里程碑里构建它们，参见下面的构建详情。</p><p translation-origin="off">The rest of the starter app is mundane, with little interest from a router perspective.
Here are the details for readers inclined to build the sample through to this milestone.</p>

<p translation-result="">这个初学者应用的结构是这样的：</p><p translation-origin="off">The starter app's structure looks like this:</p>

<div class="filetree">
  <div class="file">
<p translation-origin="off">    router-sample</p>
  </div>
  <div class="children">
    <div class="file">
<p translation-origin="off">      src</p>
    </div>
    <div class="children">
      <div class="file">
<p translation-origin="off">        app</p>
      </div>
      <div class="children">
        <div class="file">
<p translation-origin="off">          app.component.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          app.module.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          crisis-list.component.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          hero-list.component.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          not-found.component.ts</p>
        </div>
      </div>
      <div class="file">
<p translation-origin="off">        main.ts</p>
      </div>
      <div class="file">
<p translation-origin="off">        index.html</p>
      </div>
      <div class="file">
<p translation-origin="off">        styles.css</p>
      </div>
      <div class="file">
<p translation-origin="off">        tsconfig.json</p>
      </div>
    </div>
    <div class="file">
<p translation-origin="off">      node_modules ...</p>
    </div>
    <div class="file">
<p translation-origin="off">      package.json</p>
    </div>
  </div>
</div>
<p translation-result="">下面是当前里程碑中讨论过的文件列表：</p><p translation-origin="off">Here are the files discussed in this milestone.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="app.component.ts" path="router/src/app/app.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  template: `
    &lt;h1&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AppComponent { }


</code-pane>

  <code-pane title="app.module.ts" path="router/src/app/app.module.1.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }        from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }          from '@angular/forms';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { AppComponent }          from './app.component';
import { CrisisListComponent }   from './crisis-list.component';
import { HeroListComponent }     from './hero-list.component';
import { PageNotFoundComponent } from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'heroes', component: HeroListComponent },

  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  declarations: [
    AppComponent,
    HeroListComponent,
    CrisisListComponent,
    PageNotFoundComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</code-pane>

  <code-pane title="main.ts" path="router/src/main.ts">
import { <a href="https://angular.cn/api/platform-browser-dynamic/platformBrowserDynamic" class="code-anchor">platformBrowserDynamic</a> } from '@angular/platform-browser-dynamic';

import { AppModule } from './app/app.module';

<a href="https://angular.cn/api/platform-browser-dynamic/platformBrowserDynamic" class="code-anchor">platformBrowserDynamic</a>().bootstrapModule(AppModule);


</code-pane>

  <code-pane title="hero-list.component.ts" path="router/src/app/hero-list.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;h2&gt;HEROES&lt;/h2&gt;
    &lt;p&gt;Get your heroes here&lt;/p&gt;

    &lt;button <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
  `
})
export class HeroListComponent { }


</code-pane>

  <code-pane title="crisis-list.component.ts" path="router/src/app/crisis-list.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;
    &lt;p&gt;Get your crisis here&lt;/p&gt;`
})
export class CrisisListComponent { }


</code-pane>

  <code-pane title="not-found.component.ts" path="router/src/app/not-found.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: '&lt;h2&gt;Page not found&lt;/h2&gt;'
})
export class PageNotFoundComponent {}


</code-pane>

  <code-pane title="index.html" path="router/src/index.html">
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;!-- Set the base href --&gt;
    &lt;base href="/"&gt;
    &lt;title&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/title&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt;
    &lt;link rel="stylesheet" href="assets/app.css"&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;app-root&gt;&lt;/app-root&gt;
  &lt;/body&gt;

&lt;/html&gt;

</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-0" tabindex="0" aria-controls="mat-tab-content-8-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-1" tabindex="-1" aria-controls="mat-tab-content-8-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-2" tabindex="-1" aria-controls="mat-tab-content-8-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">main.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-3" tabindex="-1" aria-controls="mat-tab-content-8-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-4" tabindex="-1" aria-controls="mat-tab-content-8-4" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-5" tabindex="-1" aria-controls="mat-tab-content-8-5" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">not-found.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-8-6" tabindex="-1" aria-controls="mat-tab-content-8-6" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">index.html</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 161px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-20 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-8-0" aria-labelledby="mat-tab-label-8-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L3"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span></li><li class="L4"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L5"><span class="str">    &lt;h1&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;</span></li><li class="L6"><span class="str">    &lt;nav&gt;</span></li><li class="L7"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L8"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L9"><span class="str">    &lt;/nav&gt;</span></li><li class="L0"><span class="str">    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;</span></li><li class="L1"><span class="str">  `</span></li><li class="L2"><span class="pun">})</span></li><li class="L3"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-21 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-1" aria-labelledby="mat-tab-label-8-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-22 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-2" aria-labelledby="mat-tab-label-8-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-23 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-3" aria-labelledby="mat-tab-label-8-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-24 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-4" aria-labelledby="mat-tab-label-8-4"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-25 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-5" aria-labelledby="mat-tab-label-8-5"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-26 ng-star-inserted" role="tabpanel" id="mat-tab-content-8-6" aria-labelledby="mat-tab-label-8-6"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="routing-module"></a>
<h2 translation-result="" id="milestone-2-emrouting-moduleem">里程碑 #2：<strong>路由模块</strong><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-2-emrouting-moduleem"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-2-routing-module">Milestone 2: <em>Routing module</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-2-routing-module"><i class="material-icons">link</i></a></h2>

<p translation-result="">在原始的路由配置中，你提供了仅有两个路由的简单配置来设置应用的路由。对于简单的路由，这没有问题。
随着应用的成长，你用到了更多<strong>路由器</strong>特性，比如守卫、解析器和子路由等，你会很自然地想要重构路由。
我们建议将路由信息移到一个单独的特殊用途的模块，叫做<strong>路由模块</strong>。</p><p translation-origin="off">In the initial route configuration, you provided a simple setup with two routes used
to configure the application for routing. This is perfectly fine for simple routing.
As the application grows and you make use of more <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> features, such as guards,
resolvers, and child routing, you'll naturally want to refactor the routing configuration into its own file.
We recommend moving the routing information into a special-purpose module called a <em>Routing Module</em>.</p>

<p translation-result=""><strong>路由模块</strong>有一系列特性：</p><p translation-origin="off">The <strong>Routing Module</strong> has several characteristics:</p>

<ul>
<li>
<p translation-result=""> 把路由这个关注点从其它应用类关注点中分离出去。</p><p translation-origin="off">Separates routing concerns from other application concerns.</p>

</li>
<li>
<p translation-result=""> 测试特性模块时，可以替换或移除路由模块。</p><p translation-origin="off">Provides a module to replace or remove when testing the application.</p>

</li>
<li>
<p translation-result=""> 为路由服务提供商（包括守卫和解析器等）提供一个共同的地方。</p><p translation-origin="off">Provides a well-known location for routing service providers including guards and resolvers.</p>

</li>
<li>
<p translation-result=""> <strong>不要</strong>声明组件。</p><p translation-origin="off">Does <strong>not</strong> declare components.</p>

</li>
</ul>
<a id="routing-refactor"></a>
<h3 translation-result="" id="refactor-the-routing-configuration-into-a-emrouting-moduleem">将路由配置重构为<em>路由模块</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#refactor-the-routing-configuration-into-a-emrouting-moduleem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="refactor-the-routing-configuration-into-a-routing-module">Refactor the routing configuration into a <em>routing module</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#refactor-the-routing-configuration-into-a-routing-module"><i class="material-icons">link</i></a></h3>

<p translation-result="">在 <code>/app</code> 目录下创建一个名叫 <code>app-routing.module.ts</code> 的文件，以包含这个路由模块。</p><p translation-origin="off">Create a file named <code>app-routing.module.ts</code> in the <code>/app</code> folder to contain the routing module.</p>

<p translation-result="">导入 <code>CrisisListComponent</code> 和 <code>HeroListComponent</code> 组件，就像 <code>app.module.ts</code> 中一样。然后把 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 的导入语句和路由配置以及 <code>RouterModule.forRoot</code> 移入这个路由模块中。</p><p translation-origin="off">Import the <code>CrisisListComponent</code> and the <code>HeroListComponent</code> components
just like you did in the <code>app.module.ts</code>. Then move the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> imports
and routing configuration, including <code>RouterModule.forRoot</code>, into this routing module.</p>

<p translation-result="">遵循规约，添加一个 <code>AppRoutingModule</code> 类并导出它，以便稍后在 <code>AppModule</code> 中导入它。</p><p translation-origin="off">Following convention, add a class name <code>AppRoutingModule</code> and export it
so you can import it later in <code>AppModule</code>.</p>

<p translation-result="">最后，可以通过把它添加到该模块的 <code>exports</code> 数组中来再次导出 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code>。
通过在 <code>AppModule</code> 中导入 <code>AppRoutingModule</code> 并再次导出 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code>，那些声明在 <code>AppModule</code> 中的组件就可以访问路由指令了，比如 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 和 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>。</p><p translation-origin="off">Finally, re-export the Angular <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> by adding it to the module <code>exports</code> array.
By re-exporting the <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> here and importing <code>AppRoutingModule</code> in <code>AppModule</code>,
the components declared in <code>AppModule</code> will have access to router directives such as <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> and <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>.</p>

<p translation-result="">做完这些之后，该文件变成了这样：</p><p translation-origin="off">After these steps, the file should look like this.</p>

<code-example path="router/src/app/app-routing.module.1.ts" title="src/app/app-routing.module.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> }  from '@angular/router';

import { CrisisListComponent }   from './crisis-list.component';
import { HeroListComponent }     from './hero-list.component';
import { PageNotFoundComponent } from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  { path: 'heroes',        component: HeroListComponent },
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AppRoutingModule {}


</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">},</span></li><li class="L9"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln">        component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">},</span></li><li class="L0"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span></li><li class="L1"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span></li><li class="L2"><span class="pun">];</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L5"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L6"><span class="pln">    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span></li><li class="L7"><span class="pln">      appRoutes</span><span class="pun">,</span></li><li class="L8"><span class="pln">      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span></li><li class="L9"><span class="pln">    </span><span class="pun">)</span></li><li class="L0"><span class="pln">  </span><span class="pun">],</span></li><li class="L1"><span class="pln">  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L2"><span class="pln">    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a></li><li class="L3"><span class="pln">  </span><span class="pun">]</span></li><li class="L4"><span class="pun">})</span></li><li class="L5"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">接下来，修改 <code>app.module.ts</code> 文件，首先从 <code>app-routing.module.ts</code> 中导入新创建的 <code>AppRoutingModule</code>，
然后把 <code>imports</code> 数组中的 <code>RouterModule.forRoot</code> 替换为 <code>AppRoutingModule</code>。</p><p translation-origin="off">Next, update the <code>app.module.ts</code> file,
first importing the newly created <code>AppRoutingModule</code>from <code>app-routing.module.ts</code>,
then replacing <code>RouterModule.forRoot</code> in the <code>imports</code> array with the <code>AppRoutingModule</code>.</p>

<code-example path="router/src/app/app.module.2.ts" title="src/app/app.module.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { AppComponent }     from './app.component';
import { AppRoutingModule } from './app-routing.module';

import { CrisisListComponent }   from './crisis-list.component';
import { HeroListComponent }     from './hero-list.component';
import { PageNotFoundComponent } from './not-found.component';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    AppRoutingModule
  ],
  declarations: [
    AppComponent,
    HeroListComponent,
    CrisisListComponent,
    PageNotFoundComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span></li><li class="L8"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span></li><li class="L9"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L2"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L3"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span></li><li class="L4"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L5"><span class="pln">    </span><span class="typ">AppRoutingModule</span></li><li class="L6"><span class="pln">  </span><span class="pun">],</span></li><li class="L7"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">    </span><span class="typ">AppComponent</span><span class="pun">,</span></li><li class="L9"><span class="pln">    </span><span class="typ">HeroListComponent</span><span class="pun">,</span></li><li class="L0"><span class="pln">    </span><span class="typ">CrisisListComponent</span><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><span class="typ">PageNotFoundComponent</span></li><li class="L2"><span class="pln">  </span><span class="pun">],</span></li><li class="L3"><span class="pln">  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span></li><li class="L4"><span class="pun">})</span></li><li class="L5"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">本章稍后的部分，你将创建一个<a href="https://angular.cn/guide/router#hero-routing-module">多路由模块</a>，并揭示你为何必须<a href="https://angular.cn/guide/router#routing-module-order">以正确的顺序导入那些路由模块</a>。</p><p translation-origin="off">Later in this guide you will create <a href="https://angular.cn/guide/router#hero-routing-module">multiple routing modules</a> and discover that
you must import those routing modules <a href="https://angular.cn/guide/router#routing-module-order">in the correct order</a>.</p>

</div>
<p translation-result="">应用继续正常运行，你可以把路由模块作为为每个特性模块维护路由配置的中心地方。</p><p translation-origin="off">The application continues to work just the same, and you can use <code>AppRoutingModule</code> as
the central place to maintain future routing configuration.</p>

<a id="why-routing-module"></a>
<h3 translation-result="" id="do-you-need-a-emrouting-moduleem">你需要<strong>路由模块</strong>吗？<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#do-you-need-a-emrouting-moduleem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="do-you-need-a-routing-module">Do you need a <em>Routing Module</em>?<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#do-you-need-a-routing-module"><i class="material-icons">link</i></a></h3>

<p translation-result=""><strong>路由模块</strong>在根模块或者特性模块替换了路由配置。在路由模块或者在模块内部配置路由，但不要同时在两处都配置。</p><p translation-origin="off">The <em>Routing Module</em> <em>replaces</em> the routing configuration in the root or feature module.
<em>Either</em> configure routes in the Routing Module <em>or</em> within the module itself but not in both.</p>

<p translation-result="">路由模块是设计选择，它的价值在配置很复杂，并包含专门守卫和解析器服务时尤其明显。
在配置很简单时，它可能看起来很多余。</p><p translation-origin="off">The Routing Module is a design choice whose value is most obvious when the configuration is complex
and includes specialized guard and resolver services.
It can seem like overkill when the actual configuration is dead simple.</p>

<p translation-result="">在配置很简单时，一些开发者跳过路由模块（例如 <code>AppRoutingModule</code>），并将路由配置直接混合在关联模块中（比如 <code>AppModule</code>&nbsp;）。</p><p translation-origin="off">Some developers skip the Routing Module (for example, <code>AppRoutingModule</code>) when the configuration is simple and
merge the routing configuration directly into the companion module (for example, <code>AppModule</code>).</p>

<p translation-result="">从中选择一种模式，并坚持模式的一致性。</p><p translation-origin="off">Choose one pattern or the other and follow that pattern consistently.</p>

<p translation-result="">大多数开发者都应该采用路由模块，以保持一致性。
它在配置复杂时，能确保代码干净。
它让测试特性模块更加容易。
它的存在让人一眼就能看出这个模块是带路由的。
开发者可以很自然的从路由模块中查找和扩展路由配置。</p><p translation-origin="off">Most developers should always implement a Routing Module for the sake of consistency.
It keeps the code clean when configuration becomes complex.
It makes testing the feature module easier.
Its existence calls attention to the fact that a module is routed.
It is where developers expect to find and expand routing configuration.</p>

<a id="heroes-feature"></a>
<h2 translation-result="" id="milestone-3-heroes-feature">里程碑 #2 英雄特征区<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-3-heroes-feature"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-3-heroes-feature">Milestone 3: Heroes feature<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-3-heroes-feature"><i class="material-icons">link</i></a></h2>

<p translation-result="">你刚刚学习了如何用 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令进行导航。接下来要：</p><p translation-origin="off">You've seen how to navigate using the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive.
Now you'll learn the following:</p>

<ul>
<li>
<p translation-result=""> 用模块把应用和路由组织为一些<em>特性区</em></p><p translation-origin="off">Organize the app and routes into <em>feature areas</em> using modules.</p>

</li>
<li>
<p translation-result=""> 命令式的从一个组件导航到另一个</p><p translation-origin="off">Navigate imperatively from one component to another.</p>

</li>
<li>
<p translation-result=""> 通过路由传递必要信息和可选信息</p><p translation-origin="off">Pass required and optional information in route parameters.</p>

</li>
</ul>
<p translation-result="">这个例子重写了<a href="https://angular.cn/tutorial/toh-pt4" title="Tour of Heroes: Services">《英雄指南》</a>的“服务”部分的英雄列表特性，你可以从<live-example name="toh-pt4" title="英雄指南：各个服务的范例代码" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt4/stackblitz.html" title="英雄指南：各个服务的范例代码">英雄指南：各个服务的范例代码</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt4/toh-pt4.zip">下载范例</a></span></span></span></live-example>中复制大部分代码过来。</p><p translation-origin="off">This example recreates the heroes feature in the "Services" episode of the
<a href="https://angular.cn/tutorial/toh-pt4" title="Tour of Heroes: Services">Tour of Heroes tutorial</a>,
and you'll be copying much of the code
from the <live-example name="toh-pt4" title="Tour of Heroes: Services example code" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt4/stackblitz.html" title="Tour of Heroes: Services example code">Tour of Heroes: Services example code</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt4/toh-pt4.zip">下载范例</a></span></span></span></live-example>.</p>

<p translation-result="">下面是用户将看到的版本：</p><p translation-origin="off">Here's how the user will experience this version of the app:</p>

<figure>
  <img src="./Angular - 路由与导航_files/router-2-anim.gif" alt="App in action" width="400" height="475">
</figure>
<p translation-result="">典型的应用具有多个<em>特性区</em>，每个特性区都专注于特定的业务用途。</p><p translation-origin="off">A typical application has multiple <em>feature areas</em>,
each dedicated to a particular business purpose.</p>

<p translation-result="">虽然你也可以把文件都放在 <code>src/app/</code> 目录下，但那样是不现实的，而且很难维护。
大部分开发人员更喜欢把每个特性区都放在它自己的目录下。</p><p translation-origin="off">While you could continue to add files to the <code>src/app/</code> folder,
that is unrealistic and ultimately not maintainable.
Most developers prefer to put each feature area in its own folder.</p>

<p translation-result="">你准备把应用拆分成多个不同的<em>特性模块</em>，每个特有模块都有自己的关注点。
然后，你就会把它们导入到主模块中，并且在它们之间导航。</p><p translation-origin="off">You are about to break up the app into different <em>feature modules</em>, each with its own concerns.
Then you'll import into the main module and navigate among them.</p>

<a id="heroes-functionality"></a>
<h3 translation-result="" id="add-heroes-functionality">添加英雄管理功能<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-heroes-functionality"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="add-heroes-functionality">Add heroes functionality<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-heroes-functionality"><i class="material-icons">link</i></a></h3>

<p translation-result="">按照下列步骤：</p><p translation-origin="off">Follow these steps:</p>

<ul>
<li>
<p translation-result=""> 创建 <code>src/app/heroes</code> 文件夹，你将会把<em>英雄管理</em>功能的实现文件放在这里。</p><p translation-origin="off">Create the <code>src/app/heroes</code> folder; you'll be adding files implementing <em>hero management</em> there.</p>

</li>
<li>
<p translation-result=""> 在 <code>app</code> 目录下删除占位用的 <code>hero-list.component.ts</code> 文件。</p><p translation-origin="off">Delete the placeholder <code>hero-list.component.ts</code> that's in the <code>app</code> folder.</p>

</li>
<li>
<p translation-result=""> 在 <code>src/app/heroes</code> 目录下创建新的 <code>hero-list.component.ts</code> 文件。</p><p translation-origin="off">Create a new <code>hero-list.component.ts</code> under <code>src/app/heroes</code>.</p>

</li>
<li>
<p translation-result=""> 把<live-example name="toh-pt4" title="《英雄指南》：各个服务的范例代码" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt4/stackblitz.html" title="《英雄指南》：各个服务的范例代码">《英雄指南》：各个服务的范例代码</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt4/toh-pt4.zip">下载范例</a></span></span></span></live-example>复制到 <code>app.component.ts</code> 中。</p><p translation-origin="off">Copy into it the contents of the <code>app.component.ts</code> from
the <live-example name="toh-pt4" title="Tour of Heroes: Services example code" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/toh-pt4/stackblitz.html" title="Tour of Heroes: Services example code">Tour of Heroes: Services example code</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/toh-pt4/toh-pt4.zip">下载范例</a></span></span></span></live-example>.</p>

</li>
<li>
<p translation-result=""> 做一些微小但必要的修改：</p><p translation-origin="off">Make a few minor but necessary changes:</p>

<ul>
<li>
<p translation-result=""> 删除 <code>selector</code>（路由组件不需要它们）。</p><p translation-origin="off">Delete the <code>selector</code> (routed components don't need them).</p>

</li>
<li>
<p translation-result=""> 删除 <code>&lt;h1&gt;</code>。</p><p translation-origin="off">Delete the <code>&lt;h1&gt;</code>.</p>

</li>
<li>
<p translation-result=""> 给 <code>&lt;h2&gt;</code> 加文字，改成 <code>&lt;h2&gt;HEROES&lt;/h2&gt;</code>。</p><p translation-origin="off">Relabel the <code>&lt;h2&gt;</code> to <code>&lt;h2&gt;HEROES&lt;/h2&gt;</code>.</p>

</li>
<li>
<p translation-result=""> 删除模板底部的 <code>&lt;hero-detail&gt;</code>。</p><p translation-origin="off">Delete the <code>&lt;hero-detail&gt;</code> at the bottom of the template.</p>

</li>
<li>
<p translation-result=""> 把 <code>AppComponent</code> 类改名为 <code>HeroListComponent</code>。</p><p translation-origin="off">Rename the <code>AppComponent</code> class to <code>HeroListComponent</code>.</p>

</li>
</ul>
</li>
<li>
<p translation-result=""> 把 <code>hero-detail.component.ts</code> 和 <code>hero.service.ts</code> 复制到 <code>heroes</code> 子目录下。</p><p translation-origin="off">Copy the <code>hero-detail.component.ts</code> and the <code>hero.service.ts</code> files into the <code>heroes</code> subfolder.</p>

</li>
<li>
<p translation-result=""> 在 <code>heroes</code> 子目录下（不带路由）的 <code>heroes.module.ts</code> 文件，内容如下：</p><p translation-origin="off">Create a (pre-routing) <code>heroes.module.ts</code> in the heroes folder that looks like this:</p>

</li>
</ul>
<code-example path="router/src/app/heroes/heroes.module.ts" region="v1" title="src/app/heroes/heroes.module.ts (pre-routing)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

import { HeroService } from './hero.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
  ],
  declarations: [
    HeroListComponent,
    HeroDetailComponent
  ],
  providers: [ HeroService ]
})
export class HeroesModule {}

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.module.ts (pre-routing)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.module.ts (pre-routing)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-detail.component'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service'</span><span class="pun">;</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L0"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L1"><span class="pln">    </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pun">,</span></li><li class="L2"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L3"><span class="pln">  </span><span class="pun">],</span></li><li class="L4"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L5"><span class="pln">    </span><span class="typ">HeroListComponent</span><span class="pun">,</span></li><li class="L6"><span class="pln">    </span><span class="typ">HeroDetailComponent</span></li><li class="L7"><span class="pln">  </span><span class="pun">],</span></li><li class="L8"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">]</span></li><li class="L9"><span class="pun">})</span></li><li class="L0"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">{}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">安排完这些，你就有了四个<em>英雄管理</em>特性区的文件：</p><p translation-origin="off">When you're done, you'll have these <em>hero management</em> files:</p>

<div class="filetree">
  <div class="file">
<p translation-origin="off">    src/app/heroes</p>
  </div>
  <div class="children">
    <div class="file">
<p translation-origin="off">      hero-detail.component.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      hero-list.component.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      hero.service.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      heroes.module.ts</p>
    </div>
  </div>
</div>
<a id="hero-routing-requirements"></a>
<h3 translation-result="" id="emheroem-feature-routing-requirements"><em>英雄</em>特性区的路由需求<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emheroem-feature-routing-requirements"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="hero-feature-routing-requirements"><em>Hero</em> feature routing requirements<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#hero-feature-routing-requirements"><i class="material-icons">link</i></a></h3>

<p translation-result="">“英雄”特性有两个相互协作的组件，列表和详情。
列表视图是自给自足的，你导航到它，它会自行获取英雄列表并显示他们。</p><p translation-origin="off">The heroes feature has two interacting components, the hero list and the hero detail.
The list view is self-sufficient; you navigate to it, it gets a list of heroes and displays them.</p>

<p translation-result="">详情视图就不同了。它要显示一个特定的英雄，但是它本身却无法知道显示哪一个，此信息必须来自外部。</p><p translation-origin="off">The detail view is different. It displays a particular hero. It can't know which hero to show on its own.
That information must come from outside.</p>

<p translation-result="">当用户从列表中选择了一个英雄时，应用就导航到详情页以显示那个英雄。
通过把所选英雄的 id 编码进路由的 URL 中，就能告诉详情视图该显示哪个英雄。</p><p translation-origin="off">When the user selects a hero from the list, the app should navigate to the detail view
and show that hero.
You tell the detail view which hero to display by including the selected hero's id in the route URL.</p>

<a id="hero-routing-module"></a>
<h3 translation-result="" id="emheroem-feature-route-configuration"><em>英雄</em>特性区的路由配置<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emheroem-feature-route-configuration"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="hero-feature-route-configuration"><em>Hero</em> feature route configuration<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#hero-feature-route-configuration"><i class="material-icons">link</i></a></h3>

<p translation-result="">在 <code>heroes</code> 目录下创建一个新的 <code>heroes-routing.module.ts</code> 文件，使用的技术和以前创建 <code>AppRoutingModule</code> 时的一样。</p><p translation-origin="off">Create a new <code>heroes-routing.module.ts</code> in the <code>heroes</code> folder
using the same techniques you learned while creating the <code>AppRoutingModule</code>.</p>

<code-example path="router/src/app/heroes/heroes-routing.module.1.ts" title="src/app/heroes/heroes-routing.module.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

const heroesRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'heroes',  component: HeroListComponent },
  { path: 'hero/:id', component: HeroDetailComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(heroesRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class HeroRoutingModule { }

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes-routing.module.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes-routing.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-detail.component'</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="kwd">const</span><span class="pln"> heroesRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span></li><li class="L7"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln">  component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">},</span></li><li class="L8"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'hero/:id'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span></li><li class="L9"><span class="pun">];</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L2"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L3"><span class="pln">    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">heroesRoutes</span><span class="pun">)</span></li><li class="L4"><span class="pln">  </span><span class="pun">],</span></li><li class="L5"><span class="pln">  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L6"><span class="pln">    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a></li><li class="L7"><span class="pln">  </span><span class="pun">]</span></li><li class="L8"><span class="pun">})</span></li><li class="L9"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">把路由模块文件和它对应的模块文件放在同一个目录下。
比如这里的 <code>heroes-routing.module.ts</code> 和 <code>heroes.module.ts</code> 都位于 <code>src/app/heroes</code> 目录下。</p><p translation-origin="off">Put the routing module file in the same folder as its companion module file.
Here both <code>heroes-routing.module.ts</code> and <code>heroes.module.ts</code> are in the same <code>src/app/heroes</code> folder.</p>

<p translation-result="">将路由模块文件放到它相关的模块文件所在目录里。
这里，<code>heroes-routing.module.ts</code> 和 <code>heroes.module.ts</code> 都在 <code>app/heroes</code> 目录中。</p><p translation-origin="off">Consider giving each feature module its own route configuration file.
It may seem like overkill early when the feature routes are simple.
But routes have a tendency to grow more complex and consistency in patterns pays off over time.</p>

</div>
<p translation-result="">从新位置 <code>src/app/heroes/</code> 目录中导入英雄相关的组件，定义两个“英雄管理”路由，并导出 <code>HeroRoutingModule</code> 类。</p><p translation-origin="off">Import the hero components from their new locations in the <code>src/app/heroes/</code> folder, define the two hero routes,
and export the <code>HeroRoutingModule</code> class.</p>

<p translation-result="">现在，你有了 <code>Heroes</code> 模块的路由，还得在 <code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> 中把它们注册给<em>路由器</em>，和 <code>AppRoutingModule</code> 中的做法几乎完全一样。</p><p translation-origin="off">Now that you have routes for the <code>Heroes</code> module, register them with the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> via the
<code><a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a></code> <em>almost</em> as you did in the <code>AppRoutingModule</code>.</p>

<p translation-result="">这里有少量但是关键的不同点。
在 <code>AppRoutingModule</code> 中，你使用了静态的 <code>RouterModule.</code><strong><code>forRoot</code></strong>方法来注册路由和全应用级服务提供商。
在特性模块中，你要改用<strong><code>forChild</code></strong>静态方法。</p><p translation-origin="off">There is a small but critical difference.
In the <code>AppRoutingModule</code>, you used the static <strong><code>RouterModule.forRoot</code></strong> method to register the routes and application level service providers.
In a feature module you use the static <strong><code>forChild</code></strong> method.</p>

<div class="l-sub-section">
<p translation-result="">只在根模块 <code>AppRoutingModule</code> 中调用 <code>RouterModule.forRoot</code>（如果在 <code>AppModule</code> 中注册应用的顶级路由，那就在 <code>AppModule</code> 中调用）。
在其它模块中，你就必须调用<strong><code>RouterModule.forChild</code></strong>方法来注册附属路由。</p><p translation-origin="off">Only call <code>RouterModule.forRoot</code> in the root <code>AppRoutingModule</code>
(or the <code>AppModule</code> if that's where you register top level application routes).
In any other module, you must call the <strong><code>RouterModule.forChild</code></strong> method to register additional routes.</p>

</div>
<a id="adding-routing-module"></a>
<h3 translation-result="" id="add-the-routing-module-to-the-emheroesmoduleem">把路由模块添加到 <code>HeroesModule</code> 中<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-the-routing-module-to-the-emheroesmoduleem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="add-the-routing-module-to-the-heroesmodule">Add the routing module to the <em>HeroesModule</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-the-routing-module-to-the-heroesmodule"><i class="material-icons">link</i></a></h3>

<p translation-result="">把 <code>HeroRoutingModule</code> 添加到 <code>HeroModule</code> 中，就像为 <code>AppModule</code> 添加 <code>AppRoutingModule</code> 一样。</p><p translation-origin="off">Add the <code>HeroRoutingModule</code> to the <code>HeroModule</code>
just as you added <code>AppRoutingModule</code> to the <code>AppModule</code>.</p>

<p translation-result="">打开 <code>heroes.module.ts</code>，从 <code>heroes-routing.module.ts</code> 中导入 <code>HeroRoutingModule</code> 并把它添加到 <code>HeroesModule</code> 的 <code>imports</code> 数组中。
写完后的 <code>HeroesModule</code> 是这样的：</p><p translation-origin="off">Open <code>heroes.module.ts</code>.
Import the <code>HeroRoutingModule</code> token from <code>heroes-routing.module.ts</code> and
add it to the <code>imports</code> array of the <code>HeroesModule</code>.
The finished <code>HeroesModule</code> looks like this:</p>

<code-example path="router/src/app/heroes/heroes.module.ts" title="src/app/heroes/heroes.module.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

import { HeroService } from './hero.service';

import { HeroRoutingModule } from './heroes-routing.module';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroRoutingModule
  ],
  declarations: [
    HeroListComponent,
    HeroDetailComponent
  ],
  providers: [ HeroService ]
})
export class HeroesModule {}

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.module.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-detail.component'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service'</span><span class="pun">;</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes-routing.module'</span><span class="pun">;</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L2"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L3"><span class="pln">    </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pun">,</span></li><li class="L4"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L5"><span class="pln">    </span><span class="typ">HeroRoutingModule</span></li><li class="L6"><span class="pln">  </span><span class="pun">],</span></li><li class="L7"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">    </span><span class="typ">HeroListComponent</span><span class="pun">,</span></li><li class="L9"><span class="pln">    </span><span class="typ">HeroDetailComponent</span></li><li class="L0"><span class="pln">  </span><span class="pun">],</span></li><li class="L1"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">]</span></li><li class="L2"><span class="pun">})</span></li><li class="L3"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">{}</span></li></ol></code>
    </pre></aio-code></code-example>
<a id="remove-duplicate-hero-routes"></a>
<h3 translation-result="" id="remove-duplicate-hero-routes">移除重复的“英雄管理”路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#remove-duplicate-hero-routes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="remove-duplicate-hero-routes">Remove duplicate hero routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#remove-duplicate-hero-routes"><i class="material-icons">link</i></a></h3>

<p translation-result="">英雄类的路由目前定义在两个地方：<code>HeroesRoutingModule</code> 中（并最终给 <code>HeroesModule</code>）和 <code>AppRoutingModule</code> 中。</p><p translation-origin="off">The hero routes are currently defined in <em>two</em> places: in the <code>HeroesRoutingModule</code>,
by way of the <code>HeroesModule</code>, and in the <code>AppRoutingModule</code>.</p>

<p translation-result="">由特性模块提供的路由会被路由器再组合上它们所导入的模块的路由。
这让你可以继续定义特性路由模块中的路由，而不用修改主路由配置。</p><p translation-origin="off">Routes provided by feature modules are combined together into their imported module's routes by the router.
This allows you to continue defining the feature module routes without modifying the main route configuration.</p>

<p translation-result="">但你显然不希望把同一个路由定义两次，那就移除 <code>HeroListComponent</code> 的导入和来自 <code>app-routing.module.ts</code> 中的 <code>/heroes</code> 路由。</p><p translation-origin="off">But you don't want to define the same routes twice.
Remove the <code>HeroListComponent</code> import and the <code>/heroes</code> route from the <code>app-routing.module.ts</code>.</p>

<p translation-result=""><strong>保留默认路由和通配符路由！</strong>
它们是应用程序顶层该自己处理的关注点。</p><p translation-origin="off"><strong>Leave the default and the wildcard routes!</strong>
These are concerns at the top level of the application itself.</p>

<code-example path="router/src/app/app-routing.module.2.ts" linenums="false" title="src/app/app-routing.module.ts (v2)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> }  from '@angular/router';

import { CrisisListComponent }   from './crisis-list.component';
// import { HeroListComponent }  from './hero-list.component';  // &lt;-- delete this line
import { PageNotFoundComponent } from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AppRoutingModule {}


</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (v2)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (v2)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="com">// import { HeroListComponent }  from './hero-list.component';  // &lt;-- delete this line</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="com">// { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
      appRoutes</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<a id="merge-hero-routes"></a>
<h3 translation-result="" id="import-hero-module-into-appmodule">把“英雄管理”模块导入到 AppModule<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#import-hero-module-into-appmodule"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="import-hero-module-into-appmodule">Import hero module into AppModule<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#import-hero-module-into-appmodule"><i class="material-icons">link</i></a></h3>

<p translation-result="">英雄这个特性模块已经就绪，但应用仍然不知道 <code>HeroesModule</code> 的存在。
打开 <code>app.module.ts</code>，并按照下述步骤修改它。</p><p translation-origin="off">The heroes feature module is ready, but the application doesn't know about the <code>HeroesModule</code> yet.
Open <code>app.module.ts</code> and revise it as follows.</p>

<p translation-result="">导入 <code>HeroesModule</code> 并且把它加到根模块 <code>AppModule</code> 的 <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> 元数据中的 <code>imports</code> 数组中。</p><p translation-origin="off">Import the <code>HeroesModule</code> and add it to the <code>imports</code> array in the <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> metadata of the <code>AppModule</code>.</p>

<p translation-result="">从 <code>AppModule</code> 的 <code>declarations</code> 中移除 <code>HeroListComponent</code>，因为它现在已经改由 <code>HeroesModule</code> 提供了。
这一步很重要！因为一个组件只能声明在<em>一个</em>属主模块中。
这个例子中，<code>Heroes</code> 模块就是 <code>Heroes</code> 组件的属主模块，而 <code>AppModule</code> 要通过导入 <code>HeroesModule</code> 才能使用这些组件。</p><p translation-origin="off">Remove the <code>HeroListComponent</code> from the <code>AppModule</code>'s <code>declarations</code> because it's now provided by the <code>HeroesModule</code>.
This is important. There can be only <em>one</em> owner for a declared component.
In this case, the <code>Heroes</code> module is the owner of the <code>Heroes</code> components and is making them available to
components in the <code>AppModule</code> via the <code>HeroesModule</code>.</p>

<p translation-result="">最终，<code>AppModule</code> 不再了解那些特定于“英雄”特性的知识，比如它的组件、路由细节等。
你可以让“英雄”特性独立演化，添加更多的组件或各种各样的路由。
这就是为每个特性区创建独立模块后获得的核心优势。</p><p translation-origin="off">As a result, the <code>AppModule</code> no longer has specific knowledge of the hero feature, its components, or its route details.
You can evolve the hero feature with more components and different routes.
That's a key benefit of creating a separate module for each feature area.</p>

<p translation-result="">经过这些步骤，<code>AppModule</code> 变成了这样：</p><p translation-origin="off">After these steps, the <code>AppModule</code> should look like this:</p>

<code-example path="router/src/app/app.module.3.ts" title="src/app/app.module.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { AppComponent }     from './app.component';
import { AppRoutingModule } from './app-routing.module';
import { HeroesModule }     from './heroes/heroes.module';

import { CrisisListComponent }   from './crisis-list.component';
import { PageNotFoundComponent } from './not-found.component';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    AppRoutingModule
  ],
  declarations: [
    AppComponent,
    CrisisListComponent,
    PageNotFoundComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</div><!----><header class="ng-star-inserted">src/app/app.module.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span></li><li class="L6"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes/heroes.module'</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span></li><li class="L9"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L2"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L3"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span></li><li class="L4"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L5"><span class="pln">    </span><span class="typ">HeroesModule</span><span class="pun">,</span></li><li class="L6"><span class="pln">    </span><span class="typ">AppRoutingModule</span></li><li class="L7"><span class="pln">  </span><span class="pun">],</span></li><li class="L8"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L9"><span class="pln">    </span><span class="typ">AppComponent</span><span class="pun">,</span></li><li class="L0"><span class="pln">    </span><span class="typ">CrisisListComponent</span><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><span class="typ">PageNotFoundComponent</span></li><li class="L2"><span class="pln">  </span><span class="pun">],</span></li><li class="L3"><span class="pln">  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span></li><li class="L4"><span class="pun">})</span></li><li class="L5"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<a id="routing-module-order"></a>
<h3 translation-result="" id="module-import-order-matters">导入模块的顺序很重要<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#module-import-order-matters"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="module-import-order-matters">Module import order matters<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#module-import-order-matters"><i class="material-icons">link</i></a></h3>

<p translation-result="">看看该模块的 <code>imports</code> 数组。注意，<code>AppRoutingModule</code> 是<em>最后一个</em>。最重要的是，它位于 <code>HeroesModule</code> 之后。</p><p translation-origin="off">Look at the module <code>imports</code> array. Notice that the <code>AppRoutingModule</code> is <em>last</em>.
Most importantly, it comes <em>after</em> the <code>HeroesModule</code>.</p>

<code-example path="router/src/app/app.module.3.ts" region="module-imports" title="src/app/app.module.ts (module-imports)" linenums="false" ng-version="6.0.0"><div style="display: none">
imports: [
  <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
  <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
  HeroesModule,
  AppRoutingModule
],

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (module-imports)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (module-imports)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span><span class="pln">
  </span><span class="typ">HeroesModule</span><span class="pun">,</span><span class="pln">
  </span><span class="typ">AppRoutingModule</span><span class="pln">
</span><span class="pun">],</span></code>
    </pre></aio-code></code-example>
<p translation-result="">路由配置的顺序很重要。
路由器会接受第一个匹配上导航所要求的路径的那个路由。</p><p translation-origin="off">The order of route configuration matters.
The router accepts the first route that matches a navigation request path.</p>

<p translation-result="">当所有路由都在同一个 <code>AppRoutingModule</code> 时，你要把默认路由和<a href="https://angular.cn/guide/router#wildcard">通配符路由</a>放在最后（这里是在 <code>/heroes</code> 路由后面），
这样路由器才有机会匹配到 <code>/heroes</code> 路由，否则它就会先遇到并匹配上该通配符路由，并导航到“页面未找到”路由。</p><p translation-origin="off">When all routes were in one <code>AppRoutingModule</code>,
you put the default and <a href="https://angular.cn/guide/router#wildcard">wildcard</a> routes last, after the <code>/heroes</code> route,
so that the router had a chance to match a URL to the <code>/heroes</code> route <em>before</em>
hitting the wildcard route and navigating to "Page not found".</p>

<p translation-result="">这些路由不再位于单一文件中。他们分布在两个不同的模块中：<code>AppRoutingModule</code> 和 <code>HeroesRoutingModule</code>。</p><p translation-origin="off">The routes are no longer in one file.
They are distributed across two modules, <code>AppRoutingModule</code> and <code>HeroesRoutingModule</code>.</p>

<p translation-result="">每个路由模块都会根据<em>导入的顺序</em>把自己的路由配置追加进去。
如果你先列出了 <code>AppRoutingModule</code>，那么通配符路由就会被注册在“英雄管理”路由<em>之前</em>。
通配符路由（它匹配<em>任意</em>URL）将会拦截住每一个到“英雄管理”路由的导航，因此事实上屏蔽了所有“英雄管理”路由。</p><p translation-origin="off">Each routing module augments the route configuration <em>in the order of import</em>.
If you list <code>AppRoutingModule</code> first, the wildcard route will be registered
<em>before</em> the hero routes.
The wildcard route—which matches <em>every</em> URL—will intercept the attempt to navigate to a hero route.</p>

<div class="l-sub-section">
<p translation-result="">反转路由模块的导入顺序，你就会看到当点击英雄相关的链接时被导向了“页面未找到”路由。
要学习如何在运行时查看路由器配置，参见<a href="https://angular.cn/guide/router#inspect-config" title="Inspect the router config">稍后的内容</a>。</p><p translation-origin="off">Reverse the routing modules and see for yourself that
a click of the heroes link results in "Page not found".
Learn about inspecting the runtime router configuration
<a href="https://angular.cn/guide/router#inspect-config" title="Inspect the router config">below</a>.</p>

</div>
<a id="route-def-with-parameter"></a>
<h3 translation-result="" id="route-definition-with-a-parameter">带参数的路由定义<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-definition-with-a-parameter"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="route-definition-with-a-parameter">Route definition with a parameter<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-definition-with-a-parameter"><i class="material-icons">link</i></a></h3>

<p translation-result="">回到 <code>HeroesRoutingModule</code> 并再次检查这些路由定义。
<code>HeroDetailComponent</code> 的路由有点特殊。</p><p translation-origin="off">Return to the <code>HeroesRoutingModule</code> and look at the route definitions again.
The route to <code>HeroDetailComponent</code> has a twist.</p>

<code-example path="router/src/app/heroes/heroes-routing.module.1.ts" linenums="false" title="src/app/heroes/heroes-routing.module.ts (excerpt)" region="hero-detail-route" ng-version="6.0.0"><div style="display: none">
{ path: 'hero/:id', component: HeroDetailComponent }

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes-routing.module.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes-routing.module.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'hero/:id'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意路径中的 <code>:id</code> 令牌。它为<em>路由参数</em>在路径中创建一个“空位”。在这里，路由器把英雄的 <code>id</code> 插入到那个“空位”中。</p><p translation-origin="off">Notice the <code>:id</code> token in the path. That creates a slot in the path for a <strong>Route Parameter</strong>.
In this case, the router will insert the <code>id</code> of a hero into that slot.</p>

<p translation-result="">如果要告诉路由器导航到详情组件，并让它显示“Magneta”，你会期望这个英雄的 <code>id</code> 像这样显示在浏览器的 URL 中：</p><p translation-origin="off">If you tell the router to navigate to the detail component and display "Magneta",
you expect a hero id to appear in the browser URL like this:</p>

<code-example format="nocode" ng-version="6.0.0"><div style="display: none">
  localhost:3000/hero/15

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3000</span><span class="pun">/</span><span class="pln">hero</span><span class="pun">/</span><span class="lit">15</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果用户把此 URL 输入到浏览器的地址栏中，路由器就会识别出这种模式，同样进入“Magneta”的详情视图。</p><p translation-origin="off">If a user enters that URL into the browser address bar, the router should recognize the
pattern and go to the same "Magneta" detail view.</p>

<div class="callout is-helpful">
<header translation-result="">路由参数：必须的还是可选的？</header><header translation-origin="off">Route parameter: Required or optional?</header>

<p translation-result="">在这个场景下，把路由参数的令牌 <code>:id</code> 嵌入到路由定义的 <code>path</code> 中是一个好主意，因为对于 <code>HeroDetailComponent</code> 来说 <code>id</code> 是<em>必须的</em>，
而且路径中的值 <code>15</code> 已经足够把到“Magneta”的路由和到其它英雄的路由明确区分开。</p><p translation-origin="off">Embedding the route parameter token, <code>:id</code>,
in the route definition path is a good choice for this scenario
because the <code>id</code> is <em>required</em> by the <code>HeroDetailComponent</code> and because
the value <code>15</code> in the path clearly distinguishes the route to "Magneta" from
a route for some other hero.</p>

</div>
<a id="route-parameters"></a>
<h3 translation-result="" id="setting-the-route-parameters-in-the-list-view">在列表视图中设置路由参数<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#setting-the-route-parameters-in-the-list-view"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="setting-the-route-parameters-in-the-list-view">Setting the route parameters in the list view<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#setting-the-route-parameters-in-the-list-view"><i class="material-icons">link</i></a></h3>

<p translation-result="">然后导航到 <code>HeroDetailComponent</code> 组件。在那里，你期望看到所选英雄的详情，这需要两部分信息：导航目标和该英雄的 <code>id</code>。</p><p translation-origin="off">After navigating to the <code>HeroDetailComponent</code>, you expect to see the details of the selected hero.
You need <em>two</em> pieces of information: the routing path to the component and the hero's <code>id</code>.</p>

<p translation-result="">因此，这个<em>链接参数数组</em>中有两个条目：目标路由的<strong><code>path</code>（路径）</strong>，和一个用来指定所选英雄 <code>id</code> 的<strong>路由参数</strong>。</p><p translation-origin="off">Accordingly, the <em>link parameters array</em> has <em>two</em> items:  the routing <em>path</em> and a <em>route parameter</em> that specifies the
<code>id</code> of the selected hero.</p>

<code-example path="router/src/app/heroes/hero-list.component.1.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (link-parameters-array)" region="link-parameters-array" ng-version="6.0.0"><div style="display: none">
['/hero', hero.id] // { 15 }

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (link-parameters-array)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (link-parameters-array)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[</span><span class="str">'/hero'</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">]</span><span class="pln"> </span><span class="com">// { 15 }</span></code>
    </pre></aio-code></code-example>
<p translation-result="">路由器从该数组中组合出了目标 URL：
<code>localhost:3000/hero/15</code>。</p><p translation-origin="off">The router composes the destination URL from the array like this:
<code>localhost:3000/hero/15</code>.</p>

<div class="l-sub-section">
<p translation-result="">目标组件 <code>HeroDetailComponent</code> 该怎么知道这个 <code>id</code> 参数呢？
当然不会是自己去分析 URL 了！那是路由器的工作。</p><p translation-origin="off">How does the target <code>HeroDetailComponent</code> learn about that <code>id</code>?
Don't analyze the URL. Let the router do it.</p>

<p translation-result="">路由器从 URL 中解析出路由参数（<code>id:15</code>），并通过 <strong>ActivatedRoute</strong> 服务来把它提供给 <code>HeroDetailComponent</code> 组件。</p><p translation-origin="off">The router extracts the route parameter (<code>id:15</code>) from the URL and supplies it to
the <code>HeroDetailComponent</code> via the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> service.</p>

</div>
<a id="activated-route"></a>
<h3 translation-result="" id="emactivated-routeem-in-action"><em>Activated Route</em> 实战<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emactivated-routeem-in-action"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="activated-route-in-action"><em>Activated Route</em> in action<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#activated-route-in-action"><i class="material-icons">link</i></a></h3>

<p translation-result="">从路由器（<code>router</code>）包中导入 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>、<code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 和 <code><a href="https://angular.cn/api/router/Params" class="code-anchor">Params</a></code> 类。</p><p translation-origin="off">Import the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>, <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>, and <code><a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a></code> tokens from the router package.</p>

<code-example path="router/src/app/heroes/hero-detail.component.1.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (activated route)" region="imports" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>, <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a> } from '@angular/router';

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (activated route)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (activated route)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/ParamMap" class="code-anchor"><span class="typ">ParamMap</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里导入 <code>switchMap</code> 操作符是因为你稍后将会处理路由参数的可观察对象 <code>Observable</code>。</p><p translation-origin="off">Import the <code>switchMap</code> operator because you need it later to process the <code>Observable</code> route parameters.</p>

<code-example path="router/src/app/heroes/hero-detail.component.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (switchMap operator import)" region="rxjs-operator-import" ng-version="6.0.0"><div style="display: none">
import { switchMap } from 'rxjs/operators';

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (switchMap operator import)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (switchMap operator import)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> switchMap </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<a id="hero-detail-ctor"></a>
<p translation-result="">通常，你会直接写一个构造函数，让 Angular 把组件所需的服务注入进来，自动定义同名的私有变量，并把它们存进去。</p><p translation-origin="off">As usual, you write a constructor that asks Angular to inject services
that the component requires and reference them as private variables.</p>

<code-example path="router/src/app/heroes/hero-detail.component.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (constructor)" region="ctor" ng-version="6.0.0"><div style="display: none">
constructor(
  private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>,
  private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
  private service: HeroService
) {}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (constructor)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (constructor)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pun">,</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> service</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln">
</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">然后，在 <code>ngOnInit</code> 方法中，你用 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 服务来接收路由的参数，从参数中取得该英雄的 <code>id</code>，并接收此英雄用于显示。</p><p translation-origin="off">Later, in the <code>ngOnInit</code> method, you use the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> service to retrieve the parameters for the route,
pull the hero <code>id</code> from the parameters and retrieve the hero to display.</p>

<code-example path="router/src/app/heroes/hero-detail.component.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (ngOnInit)" region="ngOnInit" ng-version="6.0.0"><div style="display: none">
ngOnInit() {
  this.hero$ = this.route.paramMap.pipe(
    switchMap((params: <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a>) =&gt;
      this.service.getHero(params.get('id')))
  );
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (ngOnInit)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (ngOnInit)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero$ </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route</span><span class="pun">.</span><span class="pln">paramMap</span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
    switchMap</span><span class="pun">((</span><span class="kwd">params</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ParamMap" class="code-anchor"><span class="typ">ParamMap</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">service</span><span class="pun">.</span><span class="pln">getHero</span><span class="pun">(</span><span class="kwd">params</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'id'</span><span class="pun">)))</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>paramMap</code> 的处理过程有点稍复杂。当这个 map 的值变化时，你可以从变化之后的参数中 <code>get()</code> 到其 <code>id</code> 参数。</p><p translation-origin="off">The <code>paramMap</code> processing is a bit tricky. When the map changes, you <code>get()</code>
the <code>id</code> parameter from the changed parameters.</p>

<p translation-result="">然后，让 <code>HeroService</code> 去获取一个具有此 <code>id</code> 的英雄，并返回这个 <code>HeroService</code> 请求的结果。</p><p translation-origin="off">Then you tell the <code>HeroService</code> to fetch the hero with that <code>id</code> and return the result of the <code>HeroService</code> request.</p>

<p translation-result="">你可能想使用 RxJS 的 <code>map</code> 操作符。
但 <code>HeroService</code> 返回的是一个 <code>Observable&lt;Hero&gt;</code>。
所以你要改用 <code>switchMap</code> 操作符来打平这个 <code>Observable</code>。</p><p translation-origin="off">You might think to use the RxJS <code>map</code> operator.
But the <code>HeroService</code> returns an <code>Observable&lt;Hero&gt;</code>.
So you flatten the <code>Observable</code> with the <code>switchMap</code> operator instead.</p>

<p translation-result=""><code>switchMap</code> 操作符还会取消以前未完成的在途请求。如果用户使用新的 <code>id</code> 再次导航到该路由，而 <code>HeroService</code> 仍在接受老 <code>id</code> 对应的英雄，那么 <code>switchMap</code> 就会抛弃老的请求，并返回这个新 <code>id</code> 的英雄信息。</p><p translation-origin="off">The <code>switchMap</code> operator also cancels previous in-flight requests. If the user re-navigates to this route
with a new <code>id</code> while the <code>HeroService</code> is still retrieving the old <code>id</code>, <code>switchMap</code> discards that old request and returns the hero for the new <code>id</code>.</p>

<p translation-result="">这个可观察对象的 <code>Subscription</code>（订阅）将会由 <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code> 处理，并且组件的 <code>hero</code> 属性将会设置为刚刚接收到的这个英雄。</p><p translation-origin="off">The observable <code>Subscription</code> will be handled by the <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code> and the component's <code>hero</code> property will be (re)set with the retrieved hero.</p>

<h4 translation-origin="off" id="parammap-api"><em>ParamMap</em> API<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#parammap-api"><i class="material-icons">link</i></a></h4>
<p translation-result=""><code><a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a></code> API 是参照<a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams 接口</a>来设计的。它提供了一些方法来处理对路由参数（<code>paramMap</code>）和查询参数(<code>queryParamMap</code>)中的参数访问。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a></code> API is inspired by the <a href="https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams">URLSearchParams interface</a>. It provides methods
to handle parameter access for both route parameters (<code>paramMap</code>) and query parameters (<code>queryParamMap</code>).</p>

<table>
  <tbody><tr>
    <th>
<p translation-result="">      成员</p><p translation-origin="off">      Member</p>

    </th>
    <th>
<p translation-result="">      说明</p><p translation-origin="off">      Description</p>

    </th>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>has(name)</code></p>
    </td>
    <td>
<p translation-result="">    如果参数名位于参数列表中，就返回 <code>true</code> 。</p><p translation-origin="off">    Returns <code>true</code> if the parameter name is in the map of parameters.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>get(name)</code></p>
    </td>
    <td>
<p translation-result="">    如果这个 map 中有参数名对应的参数值（字符串），就返回它，否则返回 <code>null</code>。如果参数值实际上是一个数组，就返回它的<em>第一个</em>元素。</p><p translation-origin="off">    Returns the parameter name value (a <code>string</code>) if present, or <code>null</code> if the parameter name is not in the map. Returns the <em>first</em> element if the parameter value is actually an array of values.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>getAll(name)</code></p>
    </td>
    <td>
<p translation-result="">    如果这个 map 中有参数名对应的值，就返回一个字符串数组，否则返回空数组。当一个参数名可能对应多个值的时候，请使用 <code>getAll</code>。</p><p translation-origin="off">    Returns a <code>string array</code> of the parameter name value if found, or an empty <code>array</code> if the parameter name value is not in the map. Use <code>getAll</code> when a single parameter could have multiple values.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>keys</code></p>
    </td>
    <td>
<p translation-result="">    返回这个 map 中的所有参数名组成的字符串数组。</p><p translation-origin="off">    Returns a <code>string array</code> of all parameter names in the map.</p>

    </td>
  </tr>
</tbody></table>
<a id="reuse"></a>
<h4 translation-result="" id="observable-iparammapi-and-component-reuse"><i>参数</i>的可观察对象（Observable）与组件复用<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#observable-iparammapi-and-component-reuse"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="observable-parammap-and-component-reuse">Observable <i>paramMap</i> and component reuse<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#observable-parammap-and-component-reuse"><i class="material-icons">link</i></a></h4>

<p translation-result="">在这个例子中，你接收了路由参数的 <code>Observable</code> 对象。
这种写法暗示着这些路由参数在该组件的生存期内可能会变化。</p><p translation-origin="off">In this example, you retrieve the route parameter map from an <code>Observable</code>.
That implies that the route parameter map can change during the lifetime of this component.</p>

<p translation-result="">确实如此！默认情况下，如果它没有访问过其它组件就导航到了同一个组件实例，那么路由器倾向于复用组件实例。如果复用，这些参数可以变化。</p><p translation-origin="off">They might. By default, the router re-uses a component instance when it re-navigates to the same component type
without visiting a different component first. The route parameters could change each time.</p>

<p translation-result="">假设父组件的导航栏有“前进”和“后退”按钮，用来轮流显示英雄列表中中英雄的详情。
每次点击都会强制导航到带前一个或后一个 <code>id</code> 的 <code>HeroDetailComponent</code> 组件。</p><p translation-origin="off">Suppose a parent component navigation bar had "forward" and "back" buttons
that scrolled through the list of heroes.
Each click navigated imperatively to the <code>HeroDetailComponent</code> with the next or previous <code>id</code>.</p>

<p translation-result="">你不希望路由器仅仅从 DOM 中移除当前的 <code>HeroDetailComponent</code> 实例，并且用下一个 <code>id</code> 重新创建它。
那可能导致界面抖动。
更好的方式是复用同一个组件实例，并更新这些参数。</p><p translation-origin="off">You don't want the router to remove the current <code>HeroDetailComponent</code> instance from the DOM only to re-create it for the next <code>id</code>.
That could be visibly jarring.
Better to simply re-use the same component instance and update the parameter.</p>

<p translation-result="">不幸的是，<code>ngOnInit</code> 对每个实例只调用一次。
你需要一种方式来检测<em>在同一个实例中</em>路由参数什么时候发生了变化。
而 <code>params</code> 属性这个可观察对象（Observable）干净漂亮的处理了这种情况。</p><p translation-origin="off">Unfortunately, <code>ngOnInit</code> is only called once per component instantiation.
You need a way to detect when the route parameters change from <em>within the same instance</em>.
The observable <code>paramMap</code> property handles that beautifully.</p>

<div class="l-sub-section">
<p translation-result="">当在组件中订阅一个可观察对象时，你通常总是要在组件销毁时取消这个订阅。</p><p translation-origin="off">When subscribing to an observable in a component, you almost always arrange to unsubscribe when the component is destroyed.</p>

<p translation-result="">但是也有少数例外情况不需要取消订阅。
<code>ActivateRoute</code> 中的各种可观察对象就是属于这种情况。</p><p translation-origin="off">There are a few exceptional observables where this is not necessary.
The <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> observables are among the exceptions.</p>

<p translation-result=""><code>ActivateRoute</code> 及其可观察对象都是由 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 本身负责管理的。
<code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 会在不再需要时销毁这个路由组件，而注入进去的 <code>ActivateRoute</code> 也随之销毁了。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> and its observables are insulated from the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> itself.
The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> destroys a routed component when it is no longer needed and the injected <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> dies with it.</p>

<p translation-result="">不过，你仍然可以随意取消订阅，这不会造成任何损害，而且也不是一项坏的实践。</p><p translation-origin="off">Feel free to unsubscribe anyway. It is harmless and never a bad practice.</p>

</div>
<a id="snapshot"></a>
<h4 translation-result="" id="emsnapshotem-the-emno-observableem-alternative"><em>Snapshot</em>（快照）：当不需要 Observable 时的替代品<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emsnapshotem-the-emno-observableem-alternative"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="snapshot-the-no-observable-alternative"><em>Snapshot</em>: the <em>no-observable</em> alternative<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#snapshot-the-no-observable-alternative"><i class="material-icons">link</i></a></h4>

<p translation-result="">本应用不需要复用 <code>HeroDetailComponent</code>。
用户总是会先返回英雄列表，再选择另一位英雄。
所以，不存在从一个英雄详情导航到另一个而不用经过英雄列表的情况。
这意味着路由器每次都会创建一个全新的 <code>HeroDetailComponent</code> 实例。</p><p translation-origin="off"><em>This</em> application won't re-use the <code>HeroDetailComponent</code>.
The user always returns to the hero list to select another hero to view.
There's no way to navigate from one hero detail to another hero detail
without visiting the list component in between.
Therefore, the router creates a new <code>HeroDetailComponent</code> instance every time.</p>

<p translation-result="">假如你很确定这个 <code>HeroDetailComponent</code> 组件的实例<em>永远、永远</em>不会被复用，那就可以使用<em>快照</em>来简化这段代码。</p><p translation-origin="off">When you know for certain that a <code>HeroDetailComponent</code> instance will <em>never, never, ever</em>
be re-used, you can simplify the code with the <em>snapshot</em>.</p>

<p translation-result=""><code>route.snapshot</code> 提供了路由参数的初始值。
你可以通过它来直接访问参数，而不用订阅或者添加 Observable 的操作符。
这样在读写时就会更简单：</p><p translation-origin="off">The <code>route.snapshot</code> provides the initial value of the route parameter map.
You can access the parameters directly without subscribing or adding observable operators.
It's much simpler to write and read:</p>

<code-example path="router/src/app/heroes/hero-detail.component.2.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (ngOnInit snapshot)" region="snapshot" ng-version="6.0.0"><div style="display: none">
ngOnInit() {
  let id = this.route.snapshot.paramMap.get('id');

  this.hero$ = this.service.getHero(id);
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (ngOnInit snapshot)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (ngOnInit snapshot)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">let</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route</span><span class="pun">.</span><span class="pln">snapshot</span><span class="pun">.</span><span class="pln">paramMap</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'id'</span><span class="pun">);</span><span class="pln">

  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero$ </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">service</span><span class="pun">.</span><span class="pln">getHero</span><span class="pun">(</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result=""><strong>记住：</strong>，用这种技巧，你只得到了这些参数的<em>初始</em>值。
如果有可能连续多次导航到此组件，那么就该用 <code>paramMap</code> 可观察对象的方式。
这个例子中仍然使用了 <code>paramMap</code> 的可观察对象策略。</p><p translation-origin="off"><strong>Remember:</strong> you only get the <em>initial</em> value of the parameter map with this technique.
Stick with the observable <code>paramMap</code> approach if there's even a chance that the router
could re-use the component.
This sample stays with the observable <code>paramMap</code> strategy just in case.</p>

</div>
<a id="nav-to-list"></a>
<h3 translation-result="" id="navigating-back-to-the-list-component">导航回列表组件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#navigating-back-to-the-list-component"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="navigating-back-to-the-list-component">Navigating back to the list component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#navigating-back-to-the-list-component"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>HeroDetailComponent</code> 组件有一个“Back”按钮，关联到它的 <code>gotoHeroes</code> 方法，该方法会导航回 <code>HeroListComponent</code> 组件。</p><p translation-origin="off">The <code>HeroDetailComponent</code> has a "Back" button wired to its <code>gotoHeroes</code> method that navigates imperatively
back to the <code>HeroListComponent</code>.</p>

<p translation-result="">路由的 <code>navigate</code> 方法同样接受一个单条目的<em>链接参数数组</em>，你也可以把它绑定到 <code>[<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]</code> 指令上。
它保存着<strong>到 <code>HeroListComponent</code> 组件的路径</strong>：</p><p translation-origin="off">The router <code>navigate</code> method takes the same one-item <em>link parameters array</em>
that you can bind to a <code>[<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]</code> directive.
It holds the <em>path to the <code>HeroListComponent</code></em>:</p>

<code-example path="router/src/app/heroes/hero-detail.component.1.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (excerpt)" region="gotoHeroes" ng-version="6.0.0"><div style="display: none">
gotoHeroes() {
  this.router.navigate(['/heroes']);
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">gotoHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/heroes'</span><span class="pun">]);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="optional-route-parameters"></a>
<h3 translation-result="" id="route-parameters-required-or-optional">路由参数：必须还是可选？<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-parameters-required-or-optional"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="route-parameters-required-or-optional">Route Parameters: Required or optional?<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-parameters-required-or-optional"><i class="material-icons">link</i></a></h3>

<p translation-result="">如果想导航到 <code>HeroDetailComponent</code> 以对 id 为 15 的英雄进行查看并编辑，就要在路由的 URL 中使用<a href="https://angular.cn/guide/router#route-parameters"><em>路由参数</em></a>来指定<em>必要</em>参数值。</p><p translation-origin="off">Use <a href="https://angular.cn/guide/router#route-parameters"><em>route parameters</em></a> to specify a <em>required</em> parameter value <em>within</em> the route URL
as you do when navigating to the <code>HeroDetailComponent</code> in order to view the hero with <em>id</em> 15:</p>

<code-example format="nocode" ng-version="6.0.0"><div style="display: none">
  localhost:3000/hero/15

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3000</span><span class="pun">/</span><span class="pln">hero</span><span class="pun">/</span><span class="lit">15</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你也能在路由请求中添加<em>可选</em>信息。
比如，当从 <code>HeroDetailComponent</code> 返回英雄列表时，如果能自动选中刚刚查看过的英雄就好了。</p><p translation-origin="off">You can also add <em>optional</em> information to a route request.
For example, when returning to the heroes list from the hero detail view,
it would be nice if the viewed hero was preselected in the list.</p>

<figure>
  <img src="./Angular - 路由与导航_files/selected-hero.png" alt="Selected hero" width="336" height="110">
</figure>
<p translation-result="">当从 <code>HeroDetailComponent</code> 返回时，你很快就会通过把正在查看的英雄的 <code>id</code> 作为可选参数包含在 URL 中来实现这个特性。</p><p translation-origin="off">You'll implement this feature in a moment by including the viewed hero's <code>id</code>
in the URL as an optional parameter when returning from the <code>HeroDetailComponent</code>.</p>

<p translation-result="">可选信息有很多种形式。搜索条件通常就不是严格结构化的，比如 <code>name='wind*'</code>；有多个值也很常见，如 <code>after='12/31/2015'&amp;before='1/1/2017'</code>；
而且顺序无关，如 <code>before='1/1/2017'&amp;after='12/31/2015'</code>，还可能有很多种变体格式，如 <code>during='currentYear'</code>。</p><p translation-origin="off">Optional information takes other forms. Search criteria are often loosely structured, e.g., <code>name='wind*'</code>.
Multiple values are common—<code>after='12/31/2015' &amp; before='1/1/2017'</code>—in no
particular order—<code>before='1/1/2017' &amp; after='12/31/2015'</code>— in a
variety of formats—<code>during='currentYear'</code>.</p>

<p translation-result="">这么多种参数要放在 URL 的<em>路径</em>中可不容易。即使你能制定出一个合适的 URL 方案，实现起来也太复杂了，得通过模式匹配才能把 URL 翻译成命名路由。</p><p translation-origin="off">These kinds of parameters don't fit easily in a URL <em>path</em>. Even if you could define a suitable URL token scheme,
doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</p>

<p translation-result="">可选参数是在导航期间传送任意复杂信息的理想载体。
可选参数不涉及到模式匹配并在表达上提供了巨大的灵活性。</p><p translation-origin="off">Optional parameters are the ideal vehicle for conveying arbitrarily complex information during navigation.
Optional parameters aren't involved in pattern matching and afford flexibility of expression.</p>

<p translation-result="">和必要参数一样，路由器也支持通过可选参数导航。
在你定义完必要参数之后，再通过一个<em>独立的对象</em>来定义<em>可选参数</em>。</p><p translation-origin="off">The router supports navigation with optional parameters as well as required route parameters.
Define <em>optional</em> parameters in a separate object <em>after</em> you define the required route parameters.</p>

<p translation-result="">通常，对于强制性的值（比如用于区分两个路由路径的）使用<em>必备参数</em>；当这个值是可选的、复杂的或多值的时，使用可选参数。</p><p translation-origin="off">In general, prefer a <em>required route parameter</em> when
the value is mandatory (for example, if necessary to distinguish one route path from another);
prefer an <em>optional parameter</em> when the value is optional, complex, and/or multivariate.</p>

<a id="optionally-selecting"></a>
<h3 translation-result="" id="heroes-list-optionally-selecting-a-hero">英雄列表：选定一个英雄（也可不选）<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#heroes-list-optionally-selecting-a-hero"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="heroes-list-optionally-selecting-a-hero">Heroes list: optionally selecting a hero<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#heroes-list-optionally-selecting-a-hero"><i class="material-icons">link</i></a></h3>

<p translation-result="">当导航到 <code>HeroDetailComponent</code> 时，你可以在<em>路由参数</em>中指定一个所要编辑的英雄 <code>id</code>，只要把它作为<a href="https://angular.cn/guide/router#link-parameters-array">链接参数数组</a>中的第二个条目就可以了。</p><p translation-origin="off">When navigating to the <code>HeroDetailComponent</code> you specified the <em>required</em> <code>id</code> of the hero-to-edit in the
<em>route parameter</em> and made it the second item of the <a href="https://angular.cn/guide/router#link-parameters-array"><em>link parameters array</em></a>.</p>

<code-example path="router/src/app/heroes/hero-list.component.1.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (link-parameters-array)" region="link-parameters-array" ng-version="6.0.0"><div style="display: none">
['/hero', hero.id] // { 15 }

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (link-parameters-array)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (link-parameters-array)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[</span><span class="str">'/hero'</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">]</span><span class="pln"> </span><span class="com">// { 15 }</span></code>
    </pre></aio-code></code-example>
<p translation-result="">路由器在导航 URL 中内嵌了 <code>id</code> 的值，这是因为你把它用一个 <code>:id</code> 占位符当做路由参数定义在了路由的 <code>path</code> 中：</p><p translation-origin="off">The router embedded the <code>id</code> value in the navigation URL because you had defined it
as a route parameter with an <code>:id</code> placeholder token in the route <code>path</code>:</p>

<code-example path="router/src/app/heroes/heroes-routing.module.1.ts" linenums="false" title="src/app/heroes/heroes-routing.module.ts (hero-detail-route)" region="hero-detail-route" ng-version="6.0.0"><div style="display: none">
{ path: 'hero/:id', component: HeroDetailComponent }

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes-routing.module.ts (hero-detail-route)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes-routing.module.ts (hero-detail-route)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'hero/:id'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当用户点击后退按钮时，<code>HeroDetailComponent</code> 构造了另一个<em>链接参数数组</em>，可以用它导航回 <code>HeroListComponent</code>。</p><p translation-origin="off">When the user clicks the back button, the <code>HeroDetailComponent</code> constructs another <em>link parameters array</em>
which it uses to navigate back to the <code>HeroListComponent</code>.</p>

<code-example path="router/src/app/heroes/hero-detail.component.1.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (gotoHeroes)" region="gotoHeroes" ng-version="6.0.0"><div style="display: none">
gotoHeroes() {
  this.router.navigate(['/heroes']);
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (gotoHeroes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (gotoHeroes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">gotoHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/heroes'</span><span class="pun">]);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">该数组缺少一个路由参数，这是因为你那时没有理由往 <code>HeroListComponent</code> 发送信息。</p><p translation-origin="off">This array lacks a route parameter because you had no reason to send information to the <code>HeroListComponent</code>.</p>

<p translation-result="">但现在有了。你要在导航请求中同时发送当前英雄的 id，以便 <code>HeroListComponent</code> 可以在列表中高亮这个英雄。
这是一个<em>有更好，没有也无所谓</em>的特性，就算没有它，列表照样能显示得很完美。</p><p translation-origin="off">Now you have a reason. You'd like to send the id of the current hero with the navigation request so that the
<code>HeroListComponent</code> can highlight that hero in its list.
This is a <em>nice-to-have</em> feature; the list will display perfectly well without it.</p>

<p translation-result="">传送一个包含<em>可选</em><code>id</code> 参数的对象。
为了演示，这里还在对象中定义了一个没用的额外参数（<code>foo</code>），<code>HeroListComponent</code> 应该忽略它。
下面是修改过的导航语句：</p><p translation-origin="off">Send the <code>id</code> with an object that contains an <em>optional</em> <code>id</code> parameter.
For demonstration purposes, there's an extra junk parameter (<code>foo</code>) in the object that the <code>HeroListComponent</code> should ignore.
Here's the revised navigation statement:</p>

<code-example path="router/src/app/heroes/hero-detail.component.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (go to heroes)" region="gotoHeroes" ng-version="6.0.0"><div style="display: none">
gotoHeroes(hero: Hero) {
  let heroId = hero ? hero.id : null;
  // Pass along the hero id if available
  // so that the HeroList component can select that hero.
  // Include <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> junk 'foo' property for fun.
  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (go to heroes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (go to heroes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">gotoHeroes</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">let</span><span class="pln"> heroId </span><span class="pun">=</span><span class="pln"> hero </span><span class="pun">?</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span><span class="pln">
  </span><span class="com">// Pass along the hero id if available</span><span class="pln">
  </span><span class="com">// so that the HeroList component can select that hero.</span><span class="pln">
  </span><span class="com">// Include </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> junk 'foo' property for fun.</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> heroId</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'foo'</span><span class="pln"> </span><span class="pun">}]);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">该应用仍然能工作。点击“back”按钮返回英雄列表视图。</p><p translation-origin="off">The application still works. Clicking "back" returns to the hero list view.</p>

<p translation-result="">注意浏览器的地址栏。</p><p translation-origin="off">Look at the browser address bar.</p>

<p translation-result="">它应该是这样的，不过也取决于你在哪里运行它：</p><p translation-origin="off">It should look something like this, depending on where you run it:</p>

<code-example language="bash" ng-version="6.0.0"><div style="display: none">
  localhost:3000/heroes;id=15;foo=foo

</div><!----><aio-code><pre class="prettyprint lang-bash">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3000</span><span class="pun">/</span><span class="pln">heroes</span><span class="pun">;</span><span class="pln">id</span><span class="pun">=</span><span class="lit">15</span><span class="pun">;</span><span class="pln">foo</span><span class="pun">=</span><span class="pln">foo</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>id</code> 的值像这样出现在 URL 中（<code>;id=15;foo=foo</code>），但不在 URL 的路径部分。
“Heroes”路由的路径部分并没有定义 <code>:id</code>。</p><p translation-origin="off">The <code>id</code> value appears in the URL as (<code>;id=15;foo=foo</code>), not in the URL path.
The path for the "Heroes" route doesn't have an <code>:id</code> token.</p>

<p translation-result="">可选的路由参数没有使用“？”和“&amp;”符号分隔，因为它们将用在 URL 查询字符串中。
它们是<strong>用“;”分隔的</strong>。
这是<em>矩阵 URL</em>标记法 —— 你以前可能从未见过。</p><p translation-origin="off">The optional route parameters are not separated by "?" and "&amp;" as they would be in the URL query string.
They are <strong>separated by semicolons ";"</strong>
This is <em>matrix URL</em> notation—something you may not have seen before.</p>

<div class="l-sub-section">
<p translation-result=""><em>Matrix URL</em>写法首次提出是在<a href="http://www.w3.org/DesignIssues/MatrixURIs.html">1996 提案</a>中，提出者是 Web 的奠基人：Tim Berners-Lee。</p><p translation-origin="off"><em>Matrix URL</em> notation is an idea first introduced
in a <a href="http://www.w3.org/DesignIssues/MatrixURIs.html">1996 proposal</a> by the founder of the web, Tim Berners-Lee.</p>

<p translation-result="">虽然 Matrix 写法未曾进入过 HTML 标准，但它是合法的。而且在浏览器的路由系统中，它作为从父路由和子路由中单独隔离出参数的方式而广受欢迎。Angular 的路由器正是这样一个路由系统，并支持跨浏览器的 Matrix 写法。</p><p translation-origin="off">Although matrix notation never made it into the HTML standard, it is legal and
it became popular among browser routing systems as a way to isolate parameters
belonging to parent and child routes. The Router is such a system and provides
support for the matrix notation across browsers.</p>

<p translation-result="">这种语法对你来说可能有点奇怪，不过用户不会在意这一点，因为该 URL 可以正常的通过邮件发出去或粘贴到浏览器的地址栏中。</p><p translation-origin="off">The syntax may seem strange to you but users are unlikely to notice or care
as long as the URL can be emailed and pasted into a browser address bar
as this one can.</p>

</div>
<a id="route-parameters-activated-route"></a>
<h3 translation-result="" id="route-parameters-in-the-emactivatedrouteem-service"><em>ActivatedRoute</em> 服务中的路由参数<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-parameters-in-the-emactivatedrouteem-service"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="route-parameters-in-the-activatedroute-service">Route parameters in the <em>ActivatedRoute</em> service<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#route-parameters-in-the-activatedroute-service"><i class="material-icons">link</i></a></h3>

<p translation-result="">英雄列表仍没有改变，没有哪个英雄列被加亮显示。</p><p translation-origin="off">The list of heroes is unchanged. No hero row is highlighted.</p>

<div class="l-sub-section">
<p translation-result=""><live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example><em>高亮了</em>选中的行，因为它演示的是应用的最终状态，因此包含了你<em>即将</em>接触到的步骤。
此刻，本文描述的仍是那些步骤<em>之前</em>的状态。</p><p translation-origin="off">The <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example> <em>does</em> highlight the selected
row because it demonstrates the final state of the application which includes the steps you're <em>about</em> to cover.
At the moment this guide is describing the state of affairs <em>prior</em> to those steps.</p>

</div>
<p translation-result=""><code>HeroListComponent</code> 还完全不需要任何参数，也不知道该怎么处理它们。你可以改变这一点。</p><p translation-origin="off">The <code>HeroListComponent</code> isn't expecting any parameters at all and wouldn't know what to do with them.
You can change that.</p>

<p translation-result="">以前，当从 <code>HeroListComponent</code> 导航到 <code>HeroDetailComponent</code> 时，你通过 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 服务订阅了路由参数这个 <code>Observable</code>，并让它能用在 <code>HeroDetailComponent</code> 中。
你把该服务注入到了 <code>HeroDetailComponent</code> 的构造函数中。</p><p translation-origin="off">Previously, when navigating from the <code>HeroListComponent</code> to the <code>HeroDetailComponent</code>,
you subscribed to the route parameter map <code>Observable</code> and made it available to the <code>HeroDetailComponent</code>
in the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> service.
You injected that service in the constructor of the <code>HeroDetailComponent</code>.</p>

<p translation-result="">这次，你要进行反向导航，从 <code>HeroDetailComponent</code> 到 <code>HeroListComponent</code>。</p><p translation-origin="off">This time you'll be navigating in the opposite direction, from the <code>HeroDetailComponent</code> to the <code>HeroListComponent</code>.</p>

<p translation-result="">首先，你扩展该路由的导入语句，以包含进 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 服务的类；</p><p translation-origin="off">First you extend the router import statement to include the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> service symbol:</p>

<code-example path="router/src/app/heroes/hero-list.component.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (import)" region="import-router" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a> } from '@angular/router';

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (import)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (import)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/ParamMap" class="code-anchor"><span class="typ">ParamMap</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">导入 <code>switchMap</code> 操作符，在路由参数的 <code>Observable</code> 对象上执行操作。</p><p translation-origin="off">Import the <code>switchMap</code> operator to perform an operation on the <code>Observable</code> of route parameter map.</p>

<code-example path="router/src/app/heroes/hero-list.component.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (rxjs imports)" region="rxjs-imports" ng-version="6.0.0"><div style="display: none">
import { Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (rxjs imports)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (rxjs imports)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> switchMap </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接着，你注入 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 到 <code>HeroListComponent</code> 的构造函数中。</p><p translation-origin="off">Then you inject the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> in the <code>HeroListComponent</code> constructor.</p>

<code-example path="router/src/app/heroes/hero-list.component.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (constructor and ngOnInit)" region="ctor" ng-version="6.0.0"><div style="display: none">
export class HeroListComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes$: Observable&lt;Hero[]&gt;;

  private selectedId: number;

  constructor(
    private service: HeroService,
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>
  ) {}

  ngOnInit() {
    this.heroes$ = this.route.paramMap.pipe(
      switchMap((params: <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a>) =&gt; {
        // (+) before `params.get()` turns the string into <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> number
        this.selectedId = +params.get('id');
        return this.service.getHeroes();
      })
    );
  }
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (constructor and ngOnInit)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (constructor and ngOnInit)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroes$</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;;</span><span class="pln">

  </span><span class="kwd">private</span><span class="pln"> selectedId</span><span class="pun">:</span><span class="pln"> number</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> service</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">,</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pln">
  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

  ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes$ </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route</span><span class="pun">.</span><span class="pln">paramMap</span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
      switchMap</span><span class="pun">((</span><span class="kwd">params</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ParamMap" class="code-anchor"><span class="typ">ParamMap</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
        </span><span class="com">// (+) before `params.get()` turns the string into </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> number</span><span class="pln">
        </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">selectedId </span><span class="pun">=</span><span class="pln"> </span><span class="pun">+</span><span class="kwd">params</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'id'</span><span class="pun">);</span><span class="pln">
        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">service</span><span class="pun">.</span><span class="pln">getHeroes</span><span class="pun">();</span><span class="pln">
      </span><span class="pun">})</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">ActivatedRoute.paramMap 属性是一个路由参数的可观察对象。当用户导航到这个组件时，paramMap 会发射一个新值，其中包含 <code>id</code>。
在 ngOnInit 中，你订阅了这些值，设置到 selectedId，并获取英雄数据。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/ActivatedRoute#paramMap" class="code-anchor">ActivatedRoute.paramMap</a></code> property is an <code>Observable</code> map of route parameters. The <code>paramMap</code> emits a new map of values that includes <code>id</code>
when the user navigates to the component. In <code>ngOnInit</code> you subscribe to those values, set the <code>selectedId</code>, and get the heroes.</p>

<p translation-result="">用 <a href="https://angular.cn/guide/template-syntax#class-binding">CSS 类绑定</a>更新模板，把它绑定到 <code>isSelected</code> 方法上。
如果该方法返回 <code>true</code>，此绑定就会添加 CSS 类 <code>selected</code>，否则就移除它。
在 <code>&lt;li&gt;</code> 标记中找到它，就像这样：</p><p translation-origin="off">Update the template with a <a href="https://angular.cn/guide/template-syntax#class-binding">class binding</a>.
The binding adds the <code>selected</code> CSS class when the comparison returns <code>true</code> and removes it when <code>false</code>.
Look for it within the repeated <code>&lt;li&gt;</code> tag as shown here:</p>

<code-example path="router/src/app/heroes/hero-list.component.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (template)" region="template" ng-version="6.0.0"><div style="display: none">
template: `
  &lt;h2&gt;HEROES&lt;/h2&gt;
  &lt;ul class="items"&gt;
    &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>"
      [class.selected]="hero.id === selectedId"&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/hero', hero.id]"&gt;
        &lt;span class="badge"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}
      &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;button <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
`

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (template)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (template)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
  &lt;h2&gt;HEROES&lt;/h2&gt;
  &lt;ul class="items"&gt;
    &lt;li *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="str">ngFor</span></a><span class="str">="let hero of heroes$ | </span><a href="https://angular.cn/api/core/testing/async" class="code-anchor"><span class="str">async</span></a><span class="str">"
      [class.selected]="hero.id === selectedId"&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="['/hero', hero.id]"&gt;
        &lt;span class="badge"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}
      &lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;button </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
`</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当用户从英雄列表导航到英雄“Magneta”并返回时，“Magneta”看起来是选中的：</p><p translation-origin="off">When the user navigates from the heroes list to the "Magneta" hero and back, "Magneta" appears selected:</p>

<figure>
  <img src="./Angular - 路由与导航_files/selected-hero.png" alt="Selected List" width="336" height="110">
</figure>
<p translation-result="">这儿可选的 <code>foo</code> 路由参数人畜无害，并继续被忽略。</p><p translation-origin="off">The optional <code>foo</code> route parameter is harmless and continues to be ignored.</p>

<a id="route-animation"></a>
<h3 translation-result="" id="adding-animations-to-the-routed-component">为路由组件添加动画<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#adding-animations-to-the-routed-component"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="adding-animations-to-the-routed-component">Adding animations to the routed component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#adding-animations-to-the-routed-component"><i class="material-icons">link</i></a></h3>

<p translation-result="">这个“英雄”特性模块就要完成了，但这个特性还没有平滑的转场效果。</p><p translation-origin="off">The heroes feature module is almost complete, but what is a feature without some smooth transitions?</p>

<p translation-result="">在这一节，你将为<em>英雄详情</em>组件添加一些<a href="https://angular.cn/guide/animations">动画</a>。</p><p translation-origin="off">This section shows you how to add some <a href="https://angular.cn/guide/animations">animations</a>
to the <code>HeroDetailComponent</code>.</p>

<p translation-result="">首先导入 <code><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a></code>：</p><p translation-origin="off">First import <code><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a></code>:</p>

<code-example path="router/src/app/app.module.ts" linenums="false" title="src/app/app.module.ts (animations-module)" region="animations-module" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a>

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (animations-module)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (animations-module)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser/animations'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a></code>
    </pre></aio-code></code-example>
<p translation-result="">在根目录 <code>src/app/</code> 下创建一个 <code>animations.ts</code>。内容如下：</p><p translation-origin="off">Create an <code>animations.ts</code> file in the root <code>src/app/</code> folder. The contents look like this:</p>

<code-example path="router/src/app/animations.ts" linenums="false" title="src/app/animations.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/animations/animate" class="code-anchor">animate</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>, <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>, <a href="https://angular.cn/api/animations/transition" class="code-anchor">transition</a>, <a href="https://angular.cn/api/animations/trigger" class="code-anchor">trigger</a> } from '@angular/animations';

// <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> <a href="https://angular.cn/api/animations/transition" class="code-anchor">transition</a> animations
export const slideInDownAnimation =
  <a href="https://angular.cn/api/animations/trigger" class="code-anchor">trigger</a>('routeAnimation', [
    <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>('*',
      <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>({
        opacity: 1,
        transform: 'translateX(0)'
      })
    ),
    <a href="https://angular.cn/api/animations/transition" class="code-anchor">transition</a>(':enter', [
      <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>({
        opacity: 0,
        transform: 'translateX(-100%)'
      }),
      <a href="https://angular.cn/api/animations/animate" class="code-anchor">animate</a>('0.2s ease-in')
    ]),
    <a href="https://angular.cn/api/animations/transition" class="code-anchor">transition</a>(':leave', [
      <a href="https://angular.cn/api/animations/animate" class="code-anchor">animate</a>('0.5s ease-out', <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>({
        opacity: 0,
        transform: 'translateY(100%)'
      }))
    ])
  ]);


</div><!----><header class="ng-star-inserted">src/app/animations.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/animations.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/animations/animate" class="code-anchor"><span class="pln">animate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="pln">style</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/transition" class="code-anchor"><span class="pln">transition</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/trigger" class="code-anchor"><span class="pln">trigger</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/animations'</span><span class="pun">;</span><span class="pln">

</span><span class="com">// </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="com">Component</span></a><span class="com"> </span><a href="https://angular.cn/api/animations/transition" class="code-anchor"><span class="com">transition</span></a><span class="com"> animations</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> slideInDownAnimation </span><span class="pun">=</span><span class="pln">
  </span><a href="https://angular.cn/api/animations/trigger" class="code-anchor"><span class="pln">trigger</span></a><span class="pun">(</span><span class="str">'routeAnimation'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">(</span><span class="str">'*'</span><span class="pun">,</span><span class="pln">
      </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="pln">style</span></a><span class="pun">({</span><span class="pln">
        opacity</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
        transform</span><span class="pun">:</span><span class="pln"> </span><span class="str">'translateX(0)'</span><span class="pln">
      </span><span class="pun">})</span><span class="pln">
    </span><span class="pun">),</span><span class="pln">
    </span><a href="https://angular.cn/api/animations/transition" class="code-anchor"><span class="pln">transition</span></a><span class="pun">(</span><span class="str">':enter'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="pln">style</span></a><span class="pun">({</span><span class="pln">
        opacity</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
        transform</span><span class="pun">:</span><span class="pln"> </span><span class="str">'translateX(-100%)'</span><span class="pln">
      </span><span class="pun">}),</span><span class="pln">
      </span><a href="https://angular.cn/api/animations/animate" class="code-anchor"><span class="pln">animate</span></a><span class="pun">(</span><span class="str">'0.2s ease-in'</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">]),</span><span class="pln">
    </span><a href="https://angular.cn/api/animations/transition" class="code-anchor"><span class="pln">transition</span></a><span class="pun">(</span><span class="str">':leave'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><a href="https://angular.cn/api/animations/animate" class="code-anchor"><span class="pln">animate</span></a><span class="pun">(</span><span class="str">'0.5s ease-out'</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="pln">style</span></a><span class="pun">({</span><span class="pln">
        opacity</span><span class="pun">:</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln">
        transform</span><span class="pun">:</span><span class="pln"> </span><span class="str">'translateY(100%)'</span><span class="pln">
      </span><span class="pun">}))</span><span class="pln">
    </span><span class="pun">])</span><span class="pln">
  </span><span class="pun">]);</span></code>
    </pre></aio-code></code-example>
<p translation-result="">该文件做了如下工作：</p><p translation-origin="off">This file does the following:</p>

<ul>
<li>
<p translation-result=""> 导入动画符号以构建动画触发器、控制状态并管理状态之间的过渡。</p><p translation-origin="off">Imports the animation symbols that build the animation triggers, control state, and manage transitions between states.</p>

</li>
<li>
<p translation-result="">   导出了一个名叫 <code>slideInDownAnimation</code> 的常量，并把它设置为一个名叫*<code>routeAnimation</code> 的动画触发器。带动画的组件将会引用这个名字。</p><p translation-origin="off">Exports a constant named <code>slideInDownAnimation</code> set to an animation trigger named <em><code>routeAnimation</code></em>;
animated components will refer to this name.</p>

</li>
<li>
<p translation-result=""> 指定了一个<em>通配符状态</em> —— <code>*</code>，它匹配该路由组件存在时的任何动画状态。</p><p translation-origin="off">Specifies the <em>wildcard state</em> , <code>*</code>, that matches any animation state that the route component is in.</p>

</li>
<li>
<p translation-result="">   定义两个<em>过渡效果</em>，其中一个（<code>:enter</code>）在组件进入应用视图时让它从屏幕左侧缓动进入（ease-in），另一个（<code>:leave</code>）在组件离开应用视图时让它向下飞出。</p><p translation-origin="off">Defines two <em>transitions</em>, one to ease the component in from the left of the screen as it enters the application view (<code>:enter</code>),
the other to animate the component down as it leaves the application view (<code>:leave</code>).</p>

</li>
</ul>
<p translation-result="">你可以为其它路由组件用不同的转场效果创建更多触发器。现在这个触发器已经足够当前的里程碑用了。</p><p translation-origin="off">You could create more triggers with different transitions for other route components. This trigger is sufficient for the current milestone.</p>

<p translation-result="">返回 <code>HeroDetailComponent</code>，从 <code>'./animations.ts</code> 中导入 <code>slideInDownAnimation</code>。
从 <code>@angular/core</code> 中导入 <code><a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> 装饰器，你很快就会用到它。</p><p translation-origin="off">Back in the <code>HeroDetailComponent</code>, import the <code>slideInDownAnimation</code> from <code>'./animations.ts</code>.
Add the <code><a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> decorator  to the imports from <code>@angular/core</code>; you'll need it in a moment.</p>

<p translation-result="">把一个包含 <code>slideInDownAnimation</code> 的 <code>animations</code> 数组添加到 <code>@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a></code> 的元数据中。</p><p translation-origin="off">Add an <code>animations</code> array to the <code>@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a></code> metadata's that contains the <code>slideInDownAnimation</code>.</p>

<p translation-result="">然后把三个 <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> 属性添加到类中以设置这个路由组件元素的动画和样式。</p><p translation-origin="off">Then add three <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> properties to the class to set the animation and styles for the route component's element.</p>

<code-example path="router/src/app/heroes/hero-detail.component.ts" linenums="false" title="src/app/heroes/hero-detail.component.ts (host bindings)" region="host-bindings" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('@routeAnimation') routeAnimation = true;
@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.display')   display = 'block';
@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.position')  position = 'absolute';

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-detail.component.ts (host bindings)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-detail.component.ts (host bindings)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'@routeAnimation'</span><span class="pun">)</span><span class="pln"> routeAnimation </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'style.display'</span><span class="pun">)</span><span class="pln">   display </span><span class="pun">=</span><span class="pln"> </span><span class="str">'block'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'style.position'</span><span class="pun">)</span><span class="pln">  position </span><span class="pun">=</span><span class="pln"> </span><span class="str">'absolute'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">传给了第一个 <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> 的 <code>'@routeAnimation'</code> 匹配了 <code>slideInDownAnimation</code><em>触发器</em>的名字 <code>routeAnimation</code>。
把 <code>routeAnimation</code> 属性设置为 <code>true</code>，因为你只关心 <code>:enter</code> 和 <code>:leave</code> 这两个状态。</p><p translation-origin="off">The <code>'@routeAnimation'</code> passed to the first <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> matches
the name of the <code>slideInDownAnimation</code> <em>trigger</em>, <code>routeAnimation</code>.
Set the <code>routeAnimation</code> property to <code>true</code> because you only care about the <code>:enter</code> and <code>:leave</code> states.</p>

<p translation-result="">另外两个 <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> 属性指定组件的外观和位置。</p><p translation-origin="off">The other two <code>@<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a></code> properties style the display and position of the component.</p>

<p translation-result="">当进入该路由时，<code>HeroDetailComponent</code> 将会从左侧缓动进入屏幕，而离开路由时，将会向下划出。</p><p translation-origin="off">The <code>HeroDetailComponent</code> will ease in from the left when routed to and will slide down when navigating away.</p>

<div class="l-sub-section">
<p translation-result="">在这样简单的演示程序中，可以把路由动画应用到独立的组件中，但是在真实的应用中，最好能基于<em>路由路径</em>应用路由动画。</p><p translation-origin="off">Applying route animations to individual components works for a simple demo, but in a real life app,
it is better to animate routes based on <em>route paths</em>.</p>

</div>
<a id="milestone-3-wrap-up"></a>
<h3 translation-result="" id="milestone-3-wrap-up">里程碑#3 的总结<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-3-wrap-up"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="milestone-3-wrap-up">Milestone 3 wrap up<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-3-wrap-up"><i class="material-icons">link</i></a></h3>

<p translation-result="">你学到了如何：</p><p translation-origin="off">You've learned how to do the following:</p>

<ul>
<li>
<p translation-result=""> 把应用组织成<em>特性区</em></p><p translation-origin="off">Organize the app into <em>feature areas</em>.</p>

</li>
<li>
<p translation-result=""> 命令式的从一个组件导航到另一个</p><p translation-origin="off">Navigate imperatively from one component to another.</p>

</li>
<li>
<p translation-result=""> 通过路由参数传递信息，并在组件中订阅它们</p><p translation-origin="off">Pass information along in route parameters and subscribe to them in the component.</p>

</li>
<li>
<p translation-result=""> 把这个特性分区模块导入根模块 <code>AppModule</code></p><p translation-origin="off">Import the feature area NgModule into the <code>AppModule</code>.</p>

</li>
<li>
<p translation-result=""> 把动画应用到路由组件上</p><p translation-origin="off">Apply animations to the route component.</p>

</li>
</ul>
<p translation-result="">做完这些修改之后，目录结构是这样的：</p><p translation-origin="off">After these changes, the folder structure looks like this:</p>

<div class="filetree">
  <div class="file">
<p translation-origin="off">    router-sample</p>
  </div>
  <div class="children">
    <div class="file">
<p translation-origin="off">      src</p>
    </div>
    <div class="children">
      <div class="file">
<p translation-origin="off">        app</p>
      </div>
      <div class="children">
        <div class="file">
<p translation-origin="off">          heroes</p>
        </div>
        <div class="children">
          <div class="file">
<p translation-origin="off">            hero-detail.component.ts</p>
          </div>
          <div class="file">
<p translation-origin="off">            hero-list.component.ts</p>
          </div>
          <div class="file">
<p translation-origin="off">            hero.service.ts</p>
          </div>
          <div class="file">
<p translation-origin="off">            heroes.module.ts</p>
          </div>
          <div class="file">
<p translation-origin="off">            heroes-routing.module.ts</p>
          </div>
        </div>
        <div class="file">
<p translation-origin="off">          app.component.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          app.module.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          app-routing.module.ts</p>
        </div>
        <div class="file">
<p translation-origin="off">          crisis-list.component.ts</p>
        </div>
      </div>
      <div class="file">
<p translation-origin="off">        main.ts</p>
      </div>
      <div class="file">
<p translation-origin="off">        index.html</p>
      </div>
      <div class="file">
<p translation-origin="off">        styles.css</p>
      </div>
      <div class="file">
<p translation-origin="off">        tsconfig.json</p>
      </div>
    </div>
    <div class="file">
<p translation-origin="off">      node_modules ...</p>
    </div>
    <div class="file">
<p translation-origin="off">      package.json</p>
    </div>
  </div>
</div>
<p translation-result="">这里是当前版本的范例程序相关文件。</p><p translation-origin="off">Here are the relevant files for this version of the sample application.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="app.component.ts" path="router/src/app/app.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  template: `
    &lt;h1&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AppComponent { }


</code-pane>

  <code-pane title="app.module.ts" path="router/src/app/app.module.3.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { AppComponent }     from './app.component';
import { AppRoutingModule } from './app-routing.module';
import { HeroesModule }     from './heroes/heroes.module';

import { CrisisListComponent }   from './crisis-list.component';
import { PageNotFoundComponent } from './not-found.component';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    AppRoutingModule
  ],
  declarations: [
    AppComponent,
    CrisisListComponent,
    PageNotFoundComponent
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</code-pane>

  <code-pane title="app-routing.module.ts" path="router/src/app/app-routing.module.2.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> }  from '@angular/router';

import { CrisisListComponent }   from './crisis-list.component';
// import { HeroListComponent }  from './hero-list.component';  // &lt;-- delete this line
import { PageNotFoundComponent } from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'crisis-center', component: CrisisListComponent },
  // { path: 'heroes',     component: HeroListComponent }, // &lt;-- delete this line
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AppRoutingModule {}


</code-pane>

  <code-pane title="hero-list.component.ts" path="router/src/app/heroes/hero-list.component.ts">
// TODO: Feature Componetized like CrisisCenter
import { Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a> } from '@angular/router';

import { Hero, HeroService }  from './hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;h2&gt;HEROES&lt;/h2&gt;
    &lt;ul class="items"&gt;
      &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>"
        [class.selected]="hero.id === selectedId"&gt;
        &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/hero', hero.id]"&gt;
          &lt;span class="badge"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}
        &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;button <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/sidekicks"&gt;Go to sidekicks&lt;/button&gt;
  `
})
export class HeroListComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes$: Observable&lt;Hero[]&gt;;

  private selectedId: number;

  constructor(
    private service: HeroService,
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>
  ) {}

  ngOnInit() {
    this.heroes$ = this.route.paramMap.pipe(
      switchMap((params: <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a>) =&gt; {
        // (+) before `params.get()` turns the string into <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> number
        this.selectedId = +params.get('id');
        return this.service.getHeroes();
      })
    );
  }
}


</code-pane>

  <code-pane title="hero-detail.component.ts" path="router/src/app/heroes/hero-detail.component.ts">
import { switchMap } from 'rxjs/operators';
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a>, <a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>, <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a> } from '@angular/router';
import { Observable } from 'rxjs';

import { slideInDownAnimation } from '../animations';

import { Hero, HeroService }  from './hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
  &lt;h2&gt;HEROES&lt;/h2&gt;
  &lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="hero$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a> as hero"&gt;
    &lt;h3&gt;"{{ hero.name }}"&lt;/h3&gt;
    &lt;div&gt;
      &lt;label&gt;Id: &lt;/label&gt;{{ hero.id }}&lt;/div&gt;
    &lt;div&gt;
      &lt;label&gt;Name: &lt;/label&gt;
      &lt;input [(<a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a>)]="hero.name" placeholder="name"/&gt;
    &lt;/div&gt;
    &lt;p&gt;
      &lt;button (click)="gotoHeroes(hero)"&gt;Back&lt;/button&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  `,
  animations: [ slideInDownAnimation ]
})
export class HeroDetailComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('@routeAnimation') routeAnimation = true;
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.display')   display = 'block';
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.position')  position = 'absolute';

  hero$: Observable&lt;Hero&gt;;

  constructor(
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>,
    private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
    private service: HeroService
  ) {}

  ngOnInit() {
    this.hero$ = this.route.paramMap.pipe(
      switchMap((params: <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a>) =&gt;
        this.service.getHero(params.get('id')))
    );
  }

  gotoHeroes(hero: Hero) {
    let heroId = hero ? hero.id : null;
    // Pass along the hero id if available
    // so that the HeroList component can select that hero.
    // Include <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> junk 'foo' property for fun.
    this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);
  }
}


</code-pane>

  <code-pane title="hero.service.ts" path="router/src/app/heroes/hero.service.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';

export class Hero {
  constructor(public id: number, public name: string) { }
}

const HEROES = [
  new Hero(11, 'Mr. Nice'),
  new Hero(12, 'Narco'),
  new Hero(13, 'Bombasto'),
  new Hero(14, 'Celeritas'),
  new Hero(15, 'Magneta'),
  new Hero(16, 'RubberMan')
];

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class HeroService {
  getHeroes() { return of(HEROES); }

  getHero(id: number | string) {
    return this.getHeroes().pipe(
      // (+) before `id` turns the string into <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> number
      map(heroes =&gt; heroes.find(hero =&gt; hero.id === +id))
    );
  }
}


</code-pane>

  <code-pane title="heroes.module.ts" path="router/src/app/heroes/heroes.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

import { HeroService } from './hero.service';

import { HeroRoutingModule } from './heroes-routing.module';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroRoutingModule
  ],
  declarations: [
    HeroListComponent,
    HeroDetailComponent
  ],
  providers: [ HeroService ]
})
export class HeroesModule {}

</code-pane>

  <code-pane title="heroes-routing.module.ts" path="router/src/app/heroes/heroes-routing.module.1.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

const heroesRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'heroes',  component: HeroListComponent },
  { path: 'hero/:id', component: HeroDetailComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(heroesRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class HeroRoutingModule { }

</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-0" tabindex="0" aria-controls="mat-tab-content-9-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-1" tabindex="-1" aria-controls="mat-tab-content-9-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-2" tabindex="-1" aria-controls="mat-tab-content-9-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app-routing.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-3" tabindex="-1" aria-controls="mat-tab-content-9-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-4" tabindex="-1" aria-controls="mat-tab-content-9-4" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-detail.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-5" tabindex="-1" aria-controls="mat-tab-content-9-5" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero.service.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-6" tabindex="-1" aria-controls="mat-tab-content-9-6" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">heroes.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-9-7" tabindex="-1" aria-controls="mat-tab-content-9-7" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">heroes-routing.module.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 161px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-27 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-9-0" aria-labelledby="mat-tab-label-9-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L3"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span></li><li class="L4"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L5"><span class="str">    &lt;h1&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;</span></li><li class="L6"><span class="str">    &lt;nav&gt;</span></li><li class="L7"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L8"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L9"><span class="str">    &lt;/nav&gt;</span></li><li class="L0"><span class="str">    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;</span></li><li class="L1"><span class="str">  `</span></li><li class="L2"><span class="pun">})</span></li><li class="L3"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-28 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-1" aria-labelledby="mat-tab-label-9-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-29 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-2" aria-labelledby="mat-tab-label-9-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-30 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-3" aria-labelledby="mat-tab-label-9-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-31 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-4" aria-labelledby="mat-tab-label-9-4"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-32 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-5" aria-labelledby="mat-tab-label-9-5"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-33 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-6" aria-labelledby="mat-tab-label-9-6"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-34 ng-star-inserted" role="tabpanel" id="mat-tab-content-9-7" aria-labelledby="mat-tab-label-9-7"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="milestone-4"></a>
<h2 translation-result="" id="milestone-4-crisis-center-feature">里程碑#4：危机中心<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-4-crisis-center-feature"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-4-crisis-center-feature">Milestone 4: Crisis center feature<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-4-crisis-center-feature"><i class="material-icons">link</i></a></h2>

<p translation-result="">是时候往该应用的危机中心（现在是占位符）中添加一些真实的特性了。</p><p translation-origin="off">It's time to add real features to the app's current placeholder crisis center.</p>

<p translation-result="">先从模仿“英雄管理”中的特性开始：</p><p translation-origin="off">Begin by imitating the heroes feature:</p>

<ul>
<li>
<p translation-result=""> 删除危机中心的占位文件。</p><p translation-origin="off">Delete the placeholder crisis center file.</p>

</li>
<li>
<p translation-result=""> 创建 <code>app/crisis-center</code> 文件夹。</p><p translation-origin="off">Create an <code>app/crisis-center</code> folder.</p>

</li>
<li>
<p translation-result=""> 把 <code>app/heroes</code> 中的文件复制到新的危机中心文件夹。</p><p translation-origin="off">Copy the files from <code>app/heroes</code> into the new crisis center folder.</p>

</li>
<li>
<p translation-result=""> 在这些新文件中，把每一个对“hero”替换为“crisis”，并把“heroes”替换为“crises”。</p><p translation-origin="off">In the new files, change every mention of "hero" to "crisis", and "heroes" to "crises".</p>

</li>
</ul>
<p translation-result="">你将会把 <code>CrisisService</code> 转换成模拟的危机列表，而不再是模拟的英雄列表：</p><p translation-origin="off">You'll turn the <code>CrisisService</code> into a purveyor of mock crises instead of mock heroes:</p>

<code-example path="router/src/app/crisis-center/crisis.service.ts" linenums="false" title="src/app/crisis-center/crisis.service.ts (mock-crises)" region="mock-crises" ng-version="6.0.0"><div style="display: none">
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

export class Crisis {
  constructor(public id: number, public name: string) { }
}

const CRISES = [
  new Crisis(1, 'Dragon Burning Cities'),
  new Crisis(2, 'Sky Rains Great White Sharks'),
  new Crisis(3, 'Giant Asteroid Heading For Earth'),
  new Crisis(4, 'Procrastinators Meeting Delayed Again'),
];

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis.service.ts (mock-crises)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis.service.ts (mock-crises)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">BehaviorSubject</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> map </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">public</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> number</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">public</span><span class="pln"> name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> CRISES </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="str">'Dragon Burning Cities'</span><span class="pun">),</span><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pun">(</span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="str">'Sky Rains Great White Sharks'</span><span class="pun">),</span><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pun">(</span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="str">'Giant Asteroid Heading For Earth'</span><span class="pun">),</span><span class="pln">
  </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pun">(</span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="str">'Procrastinators Meeting Delayed Again'</span><span class="pun">),</span><span class="pln">
</span><span class="pun">];</span></code>
    </pre></aio-code></code-example>
<p translation-result="">最终的危机中心可以作为引入<strong>子路由</strong>这个新概念的基础。
你可以把<em>英雄管理</em>保持在当前状态，以便和<em>危机中心</em>进行对比，以后再根据这些差异是否有价值来决定后续行动。</p><p translation-origin="off">The resulting crisis center is a foundation for introducing a new concept—<strong>child routing</strong>.
You can leave <em>Heroes</em> in its current state as a contrast with the <em>Crisis Center</em>
and decide later if the differences are worthwhile.</p>

<div class="alert is-helpful">
<p translation-result="">遵循<a href="https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html" target="_blank" title="Separation of Concerns"><em>关注点分离（Separation of Concerns）</em>原则</a>，
对<em>危机中心</em>的修改不会影响 <code>AppModule</code> 或其它特性模块中的组件。</p><p translation-origin="off">In keeping with the
<a href="https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html" title="Separation of Concerns"><em>Separation of Concerns</em> principle</a>,
changes to the <em>Crisis Center</em> won't affect the <code>AppModule</code> or
any other feature's component.</p>

</div>
<a id="crisis-child-routes"></a>
<h3 translation-result="" id="a-crisis-center-with-child-routes">带有子路由的危机中心<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#a-crisis-center-with-child-routes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="a-crisis-center-with-child-routes">A crisis center with child routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#a-crisis-center-with-child-routes"><i class="material-icons">link</i></a></h3>

<p translation-result="">本节会展示如何组织危机中心，来满足 Angular 应用所推荐的模式：</p><p translation-origin="off">This section shows you how to organize the crisis center
to conform to the following recommended pattern for Angular applications:</p>

<ul>
<li>
<p translation-result=""> 把每个特性放在自己的目录中。</p><p translation-origin="off">Each feature area resides in its own folder.</p>

</li>
<li>
<p translation-result=""> 每个特性都有自己的 Angular 特性模块。</p><p translation-origin="off">Each feature has its own Angular feature module.</p>

</li>
<li>
<p translation-result=""> 每个特性区都有自己的根组件。</p><p translation-origin="off">Each area has its own area root component.</p>

</li>
<li>
<p translation-result=""> 每个特性区的根组件中都有自己的路由出口及其子路由。</p><p translation-origin="off">Each area root component has its own router outlet and child routes.</p>

</li>
<li>
<p translation-result=""> 特性区的路由很少（或完全不）与其它特性区的路由交叉。</p><p translation-origin="off">Feature area routes rarely (if ever) cross with routes of other features.</p>

</li>
</ul>
<p translation-result="">如果你还有更多特性区，它们的组件树是这样的：</p><p translation-origin="off">If your app had many feature areas, the app component trees might look like this:</p>

<figure>
  <img src="./Angular - 路由与导航_files/component-tree.png" alt="Component Tree" width="473" height="258">
</figure>
<a id="child-routing-component"></a>
<h3 translation-result="" id="child-routing-component">子路由组件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#child-routing-component"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="child-routing-component">Child routing component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#child-routing-component"><i class="material-icons">link</i></a></h3>

<p translation-result="">往 <code>crisis-center</code> 目录下添加下列 <code>crisis-center.component.ts</code> 文件：</p><p translation-origin="off">Add the following <code>crisis-center.component.ts</code> to the <code>crisis-center</code> folder:</p>

<code-example path="router/src/app/crisis-center/crisis-center.component.ts" linenums="false" title="src/app/crisis-center/crisis-center.component.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class CrisisCenterComponent { }


</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln">  </span><span class="str">`
    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>CrisisCenterComponent</code> 和 <code>AppComponent</code> 有下列共同点：</p><p translation-origin="off">The <code>CrisisCenterComponent</code> has the following in common with the <code>AppComponent</code>:</p>

<ul>
<li>
<p translation-result="">   它是危机中心特性区的<em>根</em>，正如 <code>AppComponent</code> 是整个应用的根。</p><p translation-origin="off">It is the <em>root</em> of the crisis center area,
just as <code>AppComponent</code> is the root of the entire application.</p>

</li>
<li>
<p translation-result="">   它是危机管理特性区的<em>壳</em>，正如 <code>AppComponent</code> 是管理高层工作流的壳。</p><p translation-origin="off">It is a <em>shell</em> for the crisis management feature area,
just as the <code>AppComponent</code> is a shell to manage the high-level workflow.</p>

</li>
</ul>
<p translation-result="">就像大多数的壳一样，<code>CrisisCenterComponent</code> 类也非常简单，甚至比 <code>AppComponent</code> 更简单：
它没有业务逻辑，它的模板中没有链接，只有一个标题和用于放置危机中心的子视图的 <code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code>。</p><p translation-origin="off">Like most shells, the <code>CrisisCenterComponent</code> class is very simple, simpler even than <code>AppComponent</code>:
it has no business logic, and its template has no links, just a title and
<code>&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;</code> for the crisis center child views.</p>

<p translation-result="">与 <code>AppComponent</code> 和大多数其它组件不同的是，它甚至都<em>没有指定选择器 <code>selector</code></em>。
它不<em>需要</em>选择器，因为你不会把这个组件嵌入到某个父模板中，而是使用路由器<em>导航</em>到它。</p><p translation-origin="off">Unlike <code>AppComponent</code>, and most other components, it <em>lacks a selector</em>.
It doesn't <em>need</em> one since you don't <em>embed</em> this component in a parent template,
instead you use the router to <em>navigate</em> to it.</p>

<a id="child-route-config"></a>
<h3 translation-result="" id="child-route-configuration">子路由配置<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#child-route-configuration"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="child-route-configuration">Child route configuration<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#child-route-configuration"><i class="material-icons">link</i></a></h3>

<p translation-result="">把下面这个 <code>crisis-center-home.component.ts</code> 添加到 <code>crisis-center</code> 目录下，作为 "危机中心" 特性区的宿主页面。</p><p translation-origin="off">As a host page for the "Crisis Center" feature, add the following <code>crisis-center-home.component.ts</code> to the <code>crisis-center</code> folder.</p>

<code-example path="router/src/app/crisis-center/crisis-center-home.component.ts" linenums="false" title="src/app/crisis-center/crisis-center-home.component.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;p&gt;Welcome to the Crisis Center&lt;/p&gt;
  `
})
export class CrisisCenterHomeComponent { }


</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center-home.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center-home.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;p&gt;Welcome to the Crisis Center&lt;/p&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">像 <code>heroes-routing.module.ts</code> 文件一样，你也创建一个 <code>crisis-center-routing.module.ts</code>。
但这次，你要把<strong>子路由</strong>定义在父路由 <code>crisis-center</code> 中。</p><p translation-origin="off">Create a <code>crisis-center-routing.module.ts</code> file as you did the <code>heroes-routing.module.ts</code> file.
This time, you define <strong>child routes</strong> <em>within</em> the parent <code>crisis-center</code> route.</p>

<code-example path="router/src/app/crisis-center/crisis-center-routing.module.1.ts" linenums="false" title="src/app/crisis-center/crisis-center-routing.module.ts (Routes)" region="routes" ng-version="6.0.0"><div style="display: none">
const crisisCenterRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'crisis-center',
    component: CrisisCenterComponent,
    children: [
      {
        path: '',
        component: CrisisListComponent,
        children: [
          {
            path: ':id',
            component: CrisisDetailComponent
          },
          {
            path: '',
            component: CrisisCenterHomeComponent
          }
        ]
      }
    ]
  }
];

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center-routing.module.ts (Routes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center-routing.module.ts (Routes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> crisisCenterRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pun">,</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">':id'</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pln">
          </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">]</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，父路由 <code>crisis-center</code> 有一个 <code>children</code> 属性，它有一个包含 <code>CrisisListComponent</code> 的路由。
<code>CrisisListModule</code> 路由还有一个带两个路由的 <code>children</code> 数组。</p><p translation-origin="off">Notice that the parent <code>crisis-center</code> route has a <code>children</code> property
with a single route containing the <code>CrisisListComponent</code>. The <code>CrisisListComponent</code> route
also has a <code>children</code> array with two routes.</p>

<p translation-result="">这两个路由导航到了<em>危机中心</em>的两个子组件：<code>CrisisCenterHomeComponent</code> 和 <code>CrisisDetailComponent</code>。</p><p translation-origin="off">These two routes navigate to the crisis center child components,
<code>CrisisCenterHomeComponent</code> and <code>CrisisDetailComponent</code>, respectively.</p>

<p translation-result="">对这些路由的处理中有一些<em>重要的不同</em>。</p><p translation-origin="off">There are <em>important differences</em> in the way the router treats these <em>child routes</em>.</p>

<p translation-result="">路由器会把这些路由对应的组件放在 <code>CrisisCenterComponent</code> 的 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> 中，而不是 <code>AppComponent</code> 壳组件中的。</p><p translation-origin="off">The router displays the components of these routes in the <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>
of the <code>CrisisCenterComponent</code>, not in the <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> of the <code>AppComponent</code> shell.</p>

<p translation-result=""><code>CrisisListComponent</code> 包含危机列表和一个 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code>，用以显示 <code>Crisis Center Home</code> 和 <code>Crisis Detail</code> 这两个路由组件。</p><p translation-origin="off">The <code>CrisisListComponent</code> contains the crisis list and a <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> to
display the <code>Crisis Center Home</code> and <code>Crisis Detail</code> route components.</p>

<p translation-result=""><code>Crisis Detail</code> 路由是 <code>Crisis List</code> 的子路由。由于路由器默认会<a href="https://angular.cn/guide/router#reuse">复用组件</a>，因此当你选择了另一个危机时，<code>CrisisDetailComponent</code> 会被复用。<br>
作为对比，回到 <code>Hero Detail</code> 路由时，每当你选择了不同的英雄时，该组件都会被重新创建。</p><p translation-origin="off">The <code>Crisis Detail</code> route is a child of the <code>Crisis List</code>. Since the router <a href="https://angular.cn/guide/router#reuse">reuses components</a>
by default, the <code>Crisis Detail</code> component will be re-used as you select different crises.
In contrast, back in the <code>Hero Detail</code> route, the component was recreated each time you selected a different hero.</p>

<p translation-result="">在顶级，以 <code>/</code> 开头的路径指向的总是应用的根。
但这里是子路由。
它们是在父路由路径的基础上做出的扩展。
在路由树中每深入一步，你就会在该路由的路径上添加一个斜线 <code>/</code>（除非该路由的路径是<em>空的</em>）。</p><p translation-origin="off">At the top level, paths that begin with <code>/</code> refer to the root of the application.
But child routes <em>extend</em> the path of the parent route.
With each step down the route tree,
you add a slash followed by the route path, unless the path is <em>empty</em>.</p>

<p translation-result="">如果把该逻辑应用到危机中心中的导航，那么父路径就是 <code>/crisis-center</code>。</p><p translation-origin="off">Apply that logic to navigation within the crisis center for which the parent path is <code>/crisis-center</code>.</p>

<ul>
<li>
<p translation-result=""> 要导航到 <code>CrisisCenterHomeComponent</code>，完整的 URL 是 <code>/crisis-center</code> (<code>/crisis-center</code> + <code>''</code> + <code>''</code>)。</p><p translation-origin="off">To navigate to the <code>CrisisCenterHomeComponent</code>, the full URL is <code>/crisis-center</code> (<code>/crisis-center</code> + <code>''</code> + <code>''</code>).</p>

</li>
<li>
<p translation-result="">   要导航到 <code>CrisisDetailComponent</code> 以展示 <code>id=2</code> 的危机，完整的 URL 是 <code>/crisis-center/2</code> (<code>/crisis-center</code> + <code>''</code> + <code>'/2'</code>)。</p><p translation-origin="off">To navigate to the <code>CrisisDetailComponent</code> for a crisis with <code>id=2</code>, the full URL is
<code>/crisis-center/2</code> (<code>/crisis-center</code> + <code>''</code> +  <code>'/2'</code>).</p>

</li>
</ul>
<p translation-result="">本例子中包含站点部分的绝对 URL，就是：</p><p translation-origin="off">The absolute URL for the latter example, including the <code>localhost</code> origin, is</p>

<code-example ng-version="6.0.0"><div style="display: none">
  localhost:3000/crisis-center/2

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3000</span><span class="pun">/</span><span class="pln">crisis</span><span class="pun">-</span><span class="pln">center</span><span class="pun">/</span><span class="lit">2</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里是完整的 <code>crisis-center.routing.ts</code> 及其导入语句。</p><p translation-origin="off">Here's the complete <code>crisis-center-routing.module.ts</code> file with its imports.</p>

<code-example path="router/src/app/crisis-center/crisis-center-routing.module.1.ts" linenums="false" title="src/app/crisis-center/crisis-center-routing.module.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { CrisisCenterHomeComponent } from './crisis-center-home.component';
import { CrisisListComponent }       from './crisis-list.component';
import { CrisisCenterComponent }     from './crisis-center.component';
import { CrisisDetailComponent }     from './crisis-detail.component';

const crisisCenterRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'crisis-center',
    component: CrisisCenterComponent,
    children: [
      {
        path: '',
        component: CrisisListComponent,
        children: [
          {
            path: ':id',
            component: CrisisDetailComponent
          },
          {
            path: '',
            component: CrisisCenterHomeComponent
          }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(crisisCenterRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class CrisisCenterRoutingModule { }

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center-routing.module.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center-routing.module.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center-home.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-detail.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> crisisCenterRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pun">,</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">':id'</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pln">
          </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">]</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">crisisCenterRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisCenterRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="import-crisis-module"></a>
<h3 translation-result="" id="import-crisis-center-module-into-the-emappmoduleem-routes">把危机中心模块导入到 <code>AppModule</code> 的路由中<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#import-crisis-center-module-into-the-emappmoduleem-routes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="import-crisis-center-module-into-the-appmodule-routes">Import crisis center module into the <em>AppModule</em> routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#import-crisis-center-module-into-the-appmodule-routes"><i class="material-icons">link</i></a></h3>

<p translation-result="">就像 <code>HeroesModule</code> 模块中一样，你必须把 <code>CrisisCenterModule</code> 添加到 <code>AppModule</code> 的 <code>imports</code> 数组中，就在 <code>AppRoutingModule</code> 前面：</p><p translation-origin="off">As with the <code>HeroesModule</code>, you must add the <code>CrisisCenterModule</code> to the <code>imports</code> array of the <code>AppModule</code>
<em>before</em> the <code>AppRoutingModule</code>:</p>

<code-example path="router/src/app/app.module.4.ts" linenums="false" title="src/app/app.module.ts (import CrisisCenterModule)" region="crisis-center-module" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { AppComponent }            from './app.component';
import { PageNotFoundComponent }   from './not-found.component';

import { AppRoutingModule }        from './app-routing.module';
import { HeroesModule }            from './heroes/heroes.module';
import { CrisisCenterModule }      from './crisis-center/crisis-center.module';

import { DialogService }           from './dialog.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    CrisisCenterModule,
    AppRoutingModule
  ],
  declarations: [
    AppComponent,
    PageNotFoundComponent
  ],
  providers: [
    DialogService
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (import CrisisCenterModule)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (import CrisisCenterModule)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes/heroes.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center/crisis-center.module'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DialogService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./dialog.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroesModule</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">CrisisCenterModule</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">AppRoutingModule</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">PageNotFoundComponent</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">DialogService</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">从 <code>app.routing.ts</code> 中移除危机中心的初始路由。
这些特性路由现在是由 <code>HeroesModule</code> 和 <code>CrisisCenter</code> 特性模块提供的。</p><p translation-origin="off">Remove the initial crisis center route from the <code>app-routing.module.ts</code>.
The feature routes are now provided by the <code>HeroesModule</code> and the <code>CrisisCenter</code> modules.</p>

<p translation-result=""><code>app-routing.module.ts</code> 文件中只有应用的顶级路由，比如默认路由和通配符路由。</p><p translation-origin="off">The <code>app-routing.module.ts</code> file retains the top-level application routes such as the default and wildcard routes.</p>

<code-example path="router/src/app/app-routing.module.3.ts" linenums="false" title="src/app/app-routing.module.ts (v3)" region="v3" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }                from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> }    from '@angular/router';

import { ComposeMessageComponent } from './compose-message.component';
import { PageNotFoundComponent }   from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AppRoutingModule {}


</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (v3)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (v3)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">                </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./compose-message.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
      appRoutes</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<a id="relative-navigation"></a>
<h3 translation-result="" id="relative-navigation">相对导航<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#relative-navigation"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="relative-navigation">Relative navigation<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#relative-navigation"><i class="material-icons">link</i></a></h3>

<p translation-result="">虽然构建出了危机中心特性区，你却仍在使用以斜杠开头的<strong>绝对路径</strong>来导航到危机详情的路由。</p><p translation-origin="off">While building out the crisis center feature, you navigated to the
crisis detail route using an <strong>absolute path</strong> that begins with a <em>slash</em>.</p>

<p translation-result="">路由器会从路由配置的顶层来匹配像这样的<em>绝对路径</em>。</p><p translation-origin="off">The router matches such <em>absolute</em> paths to routes starting from the top of the route configuration.</p>

<p translation-result="">你固然可以继续像<em>危机中心</em>特性区一样使用绝对路径，但是那样会把链接钉死在特定的父路由结构上。
如果你修改了父路径 <code>/crisis-center</code>，那就不得不修改每一个链接参数数组。</p><p translation-origin="off">You could continue to use absolute paths like this to navigate inside the <em>Crisis Center</em>
feature, but that pins the links to the parent routing structure.
If you changed the parent <code>/crisis-center</code> path, you would have to change the link parameters array.</p>

<p translation-result="">通过改成定义<em>相对于</em>当前 URL 的路径，你可以把链接从这种依赖中解放出来。
当你修改了该特性区的父路由路径时，该特性区<em>内部</em>的导航仍然完好无损。</p><p translation-origin="off">You can free the links from this dependency by defining paths that are <strong>relative</strong> to the current URL segment.
Navigation <em>within</em> the feature area remains intact even if you change the parent route path to the feature.</p>

<p translation-result="">例子如下：</p><p translation-origin="off">Here's an example:</p>

<div class="l-sub-section">
<p translation-result="">路由器支持在<em>链接参数数组</em>中使用“目录式”语法来为查询路由名提供帮助：</p><p translation-origin="off">The router supports directory-like syntax in a <em>link parameters list</em> to help guide route name lookup:</p>

<p translation-result=""><code>./</code> 或 <code>无前导斜线</code> 形式是相对于当前级别的。</p><p translation-origin="off"><code>./</code> or <code>no leading slash</code> is relative to the current level.</p>

<p translation-result=""><code>../</code> 会回到当前路由路径的上一级。</p><p translation-origin="off"><code>../</code> to go up one level in the route path.</p>

<p translation-result="">你可以把相对导航语法和一个祖先路径组合起来用。
如果不得不导航到一个兄弟路由，你可以用 <code>../&lt;sibling&gt;</code> 来回到上一级，然后进入兄弟路由路径中。</p><p translation-origin="off">You can combine relative navigation syntax with an ancestor path.
If you must navigate to a sibling route, you could use the <code>../&lt;sibling&gt;</code> convention to go up
one level, then over and down the sibling route path.</p>

</div>
<p translation-result="">用 <code>Router.navigate</code> 方法导航到相对路径时，你必须提供当前的 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>，来让路由器知道你现在位于路由树中的什么位置。</p><p translation-origin="off">To navigate a relative path with the <code>Router.navigate</code> method, you must supply the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>
to give the router knowledge of where you are in the current route tree.</p>

<p translation-result="">在<em>链接参数数组</em>中，添加一个带有 <code>relativeTo</code> 属性的对象，并把它设置为当前的 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>。
这样路由器就会基于当前激活路由的位置来计算出目标 URL。</p><p translation-origin="off">After the <em>link parameters array</em>, add an object with a <code>relativeTo</code> property set to the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>.
The router then calculates the target URL based on the active route's location.</p>

<div class="l-sub-section">
<p translation-result="">当调用路由器的 <code>navigateByUrl</code> 时，<strong>总是</strong>要指定完整的<em>绝对路径</em>。</p><p translation-origin="off"><strong>Always</strong> specify the complete <em>absolute</em> path when calling router's <code>navigateByUrl</code> method.</p>

</div>
<a id="nav-to-crisis"></a>
<h3 translation-result="" id="navigate-to-crisis-list-with-a-relative-url">使用相对 URL 导航到危机列表<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#navigate-to-crisis-list-with-a-relative-url"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="navigate-to-crisis-list-with-a-relative-url">Navigate to crisis list with a relative URL<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#navigate-to-crisis-list-with-a-relative-url"><i class="material-icons">link</i></a></h3>

<p translation-result="">你已经注入过了 <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>，你需要把它来和相对导航路径组合在一起。</p><p translation-origin="off">You've already injected the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> that you need to compose the relative navigation path.</p>

<p translation-result="">如果用 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 来代替 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 服务进行导航，就要使用<em>相同</em>的链接参数数组，不过不再需要提供 <code>relativeTo</code> 属性。
<code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 已经隐含在了 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令中。</p><p translation-origin="off">When using a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> to navigate instead of the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> service, you'd use the <em>same</em>
link parameters array, but you wouldn't provide the object with the <code>relativeTo</code> property.
The <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> is implicit in a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive.</p>

<p translation-result="">修改 <code>CrisisDetailComponent</code> 的 <code>gotoCrises</code> 方法，来使用相对路径返回<em>危机中心</em>列表。</p><p translation-origin="off">Update the <code>gotoCrises</code> method of the <code>CrisisDetailComponent</code> to navigate back to the <em>Crisis Center</em> list using relative path navigation.</p>

<code-example path="router/src/app/crisis-center/crisis-detail.component.ts" linenums="false" title="src/app/crisis-center/crisis-detail.component.ts (relative navigation)" region="gotoCrises-navigate" ng-version="6.0.0"><div style="display: none">
// Relative navigation back to the crises
this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-detail.component.ts (relative navigation)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-detail.component.ts (relative navigation)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// Relative navigation back to the crises</span><span class="pln">
</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'../'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> id</span><span class="pun">:</span><span class="pln"> crisisId</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'foo'</span><span class="pln"> </span><span class="pun">}],</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> relativeTo</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route </span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意这个路径使用了 <code>../</code> 语法返回上一级。
如果当前危机的 <code>id</code> 是 <code>3</code>，那么最终返回到的路径就是 <code>/crisis-center/;id=3;foo=foo</code>。</p><p translation-origin="off">Notice that the path goes up a level using the <code>../</code> syntax.
If the current crisis <code>id</code> is <code>3</code>, the resulting path back to the crisis list is  <code>/crisis-center/;id=3;foo=foo</code>.</p>

<a id="named-outlets"></a>
<h3 translation-result="" id="displaying-multiple-routes-in-named-outlets">用命名出口（outlet）显示多重路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#displaying-multiple-routes-in-named-outlets"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="displaying-multiple-routes-in-named-outlets">Displaying multiple routes in named outlets<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#displaying-multiple-routes-in-named-outlets"><i class="material-icons">link</i></a></h3>

<p translation-result="">你决定给用户提供一种方式来联系危机中心。
当用户点击“Contact”按钮时，你要在一个弹出框中显示一条消息。</p><p translation-origin="off">You decide to give users a way to contact the crisis center.
When a user clicks a "Contact" button, you want to display a message in a popup view.</p>

<p translation-result="">即使在应用中的不同页面之间切换，这个弹出框也应该始终保持打开状态，直到用户发送了消息或者手动取消。
显然，你不能把这个弹出框跟其它放到页面放到同一个路由出口中。</p><p translation-origin="off">The popup should stay open, even when switching between pages in the application, until the user closes it
by sending the message or canceling.
Clearly you can't put the popup in the same outlet as the other pages.</p>

<p translation-result="">迄今为止，你只定义过单路由出口，并且在其中嵌套了子路由以便对路由分组。
在每个模板中，路由器只能支持一个<em>无名</em>主路由出口。</p><p translation-origin="off">Until now, you've defined a single outlet and you've nested child routes
under that outlet to group routes together.
The router only supports one primary <em>unnamed</em> outlet per template.</p>

<p translation-result="">模板还可以有多个<em>命名的</em>路由出口。
每个命名出口都自己有一组带组件的路由。
多重出口可以在同一时间根据不同的路由来显示不同的内容。</p><p translation-origin="off">A template can also have any number of <em>named</em> outlets.
Each named outlet has its own set of routes with their own components.
Multiple outlets can be displaying different content, determined by different routes, all at the same time.</p>

<p translation-result="">在 <code>AppComponent</code> 中添加一个名叫“popup”的出口，就在无名出口的下方。</p><p translation-origin="off">Add an outlet named "popup" in the <code>AppComponent</code>, directly below the unnamed outlet.</p>

<code-example path="router/src/app/app.component.4.ts" linenums="false" title="src/app/app.component.ts (outlets)" region="outlets" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
&lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a> name="popup"&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (outlets)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (outlets)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="tag">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="pln"> </span><span class="atn">name</span><span class="pun">=</span><span class="atv">"popup"</span><span class="tag">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="tag">router-outlet</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">一旦你学会了如何把一个弹出框组件路由到该出口，那里就是将会出现弹出框的地方。</p><p translation-origin="off">That's where a popup will go, once you learn how to route a popup component to it.</p>

<a id="secondary-routes"></a>
<h4 translation-result="" id="secondary-routes">第二路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#secondary-routes"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="secondary-routes">Secondary routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#secondary-routes"><i class="material-icons">link</i></a></h4>

<p translation-result="">命名出口是<em>第二路由</em>的目标。</p><p translation-origin="off">Named outlets are the targets of  <em>secondary routes</em>.</p>

<p translation-result="">第二路由很像主路由，配置方式也一样。它们只有一些关键的不同点：</p><p translation-origin="off">Secondary routes look like primary routes and you configure them the same way.
They differ in a few key respects.</p>

<ul>
<li>
<p translation-result=""> 它们彼此互不依赖。</p><p translation-origin="off">They are independent of each other.</p>

</li>
<li>
<p translation-result=""> 它们与其它路由组合使用。</p><p translation-origin="off">They work in combination with other routes.</p>

</li>
<li>
<p translation-result=""> 它们显示在命名出口中。</p><p translation-origin="off">They are displayed in named outlets.</p>

</li>
</ul>
<p translation-result="">在 <code>src/app/compose-message.component.ts</code> 中创建一个名叫 <code>ComposeMessageComponent</code> 的新组件。
它显示一个简单的表单，包括一个头、一个消息输入框和两个按钮：“Send”和“Cancel”。</p><p translation-origin="off">Create a new component named <code>ComposeMessageComponent</code> in <code>src/app/compose-message.component.ts</code>.
It displays a simple form with a header, an input box for the message,
and two buttons, "Send" and "Cancel".</p>

<figure>
  <img src="./Angular - 路由与导航_files/contact-popup.png" alt="Contact popup" width="250" height="262">
</figure>
<p translation-result="">下面是该组件及其模板：</p><p translation-origin="off">Here's the component and its template:</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/compose-message.component.ts" path="router/src/app/compose-message.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> }                 from '@angular/router';

import { slideInDownAnimation }   from './animations';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  templateUrl: './compose-message.component.html',
  styles: [ ':host { position: relative; bottom: 10%; }' ],
  animations: [ slideInDownAnimation ]
})
export class ComposeMessageComponent {
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('@routeAnimation') routeAnimation = true;
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.display')   display = 'block';
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.position')  position = 'absolute';

  details: string;
  sending = false;

  constructor(private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  send() {
    this.sending = true;
    this.details = 'Sending Message...';

    setTimeout(() =&gt; {
      this.sending = false;
      this.closePopup();
    }, 1000);
  }

  cancel() {
    this.closePopup();
  }

  closePopup() {
    // Providing <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> `null` value to the named outlet
    // clears the contents of the named outlet
    this.router.navigate([{ outlets: { popup: null }}]);
  }
}


</code-pane>

  <code-pane title="src/app/compose-message.component.html" path="router/src/app/compose-message.component.html">
&lt;h3&gt;Contact Crisis Center&lt;/h3&gt;
&lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="details"&gt;
  {{ details }}
&lt;/div&gt;
&lt;div&gt;
  &lt;div&gt;
    &lt;label&gt;Message: &lt;/label&gt;
  &lt;/div&gt;
  &lt;div&gt;
    &lt;<a href="https://angular.cn/api/forms/DefaultValueAccessor" class="code-anchor">textarea</a> [(<a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a>)]="message" rows="10" cols="35" [disabled]="sending"&gt;&lt;/<a href="https://angular.cn/api/forms/DefaultValueAccessor" class="code-anchor">textarea</a>&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="!sending"&gt;
  &lt;button (click)="send()"&gt;Send&lt;/button&gt;
  &lt;button (click)="cancel()"&gt;Cancel&lt;/button&gt;
&lt;/p&gt;


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-10-0" tabindex="0" aria-controls="mat-tab-content-10-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/compose-message.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-10-1" tabindex="-1" aria-controls="mat-tab-content-10-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/compose-message.component.html</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 311px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-35 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-10-0" aria-labelledby="mat-tab-label-10-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/compose-message.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="typ">HostBinding</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">                 </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> slideInDownAnimation </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./animations'</span><span class="pun">;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L6"><span class="pln">  templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./compose-message.component.html'</span><span class="pun">,</span></li><li class="L7"><span class="pln">  styles</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="str">':host { position: relative; bottom: 10%; }'</span><span class="pln"> </span><span class="pun">],</span></li><li class="L8"><span class="pln">  animations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> slideInDownAnimation </span><span class="pun">]</span></li><li class="L9"><span class="pun">})</span></li><li class="L0"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  </span><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'@routeAnimation'</span><span class="pun">)</span><span class="pln"> routeAnimation </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></li><li class="L2"><span class="pln">  </span><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'style.display'</span><span class="pun">)</span><span class="pln">   display </span><span class="pun">=</span><span class="pln"> </span><span class="str">'block'</span><span class="pun">;</span></li><li class="L3"><span class="pln">  </span><span class="lit">@</span><a href="https://angular.cn/api/core/HostBinding" class="code-anchor"><span class="lit">HostBinding</span></a><span class="pun">(</span><span class="str">'style.position'</span><span class="pun">)</span><span class="pln">  position </span><span class="pun">=</span><span class="pln"> </span><span class="str">'absolute'</span><span class="pun">;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  details</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">;</span></li><li class="L6"><span class="pln">  sending </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="pln">  send</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sending </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></li><li class="L2"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">details </span><span class="pun">=</span><span class="pln"> </span><span class="str">'Sending Message...'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">    setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sending </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></li><li class="L6"><span class="pln">      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">closePopup</span><span class="pun">();</span></li><li class="L7"><span class="pln">    </span><span class="pun">},</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">);</span></li><li class="L8"><span class="pln">  </span><span class="pun">}</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="pln">  cancel</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">closePopup</span><span class="pun">();</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">  closePopup</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">    </span><span class="com">// Providing </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> `null` value to the named outlet</span></li><li class="L6"><span class="pln">    </span><span class="com">// clears the contents of the named outlet</span></li><li class="L7"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([{</span><span class="pln"> outlets</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> popup</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">}}]);</span></li><li class="L8"><span class="pln">  </span><span class="pun">}</span></li><li class="L9"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-36 ng-star-inserted" role="tabpanel" id="mat-tab-content-10-1" aria-labelledby="mat-tab-label-10-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result="">它看起来几乎和你以前见过其它组件一样，但有两个值得注意的区别。</p><p translation-origin="off">It looks about the same as any other component you've seen in this guide.
There are two noteworthy differences.</p>

<p translation-result="">主要 <code>send()</code> 方法在发送消息和关闭弹出框之前通过等待模拟了一秒钟的延迟。</p><p translation-origin="off">Note that the <code>send()</code> method simulates latency by waiting a second before "sending" the message and closing the popup.</p>

<p translation-result=""><code>closePopup()</code> 方法用把 <code>popup</code> 出口导航到 <code>null</code> 的方式关闭了弹出框。
这个奇怪的用法在<a href="https://angular.cn/guide/router#clear-secondary-routes">稍后的部分</a>有讲解。</p><p translation-origin="off">The <code>closePopup()</code> method closes the popup view by navigating to the popup outlet with a <code>null</code>.
That's a peculiarity covered <a href="https://angular.cn/guide/router#clear-secondary-routes">below</a>.</p>

<p translation-result="">像其它组件一样，你还要把 <code>ComposeMessageComponent</code> 添加到 <code>AppModule</code> 的 <code>declarations</code> 中。</p><p translation-origin="off">As with other application components, you add the <code>ComposeMessageComponent</code> to the <code>declarations</code> of an <code><a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code>.
Do so in the <code>AppModule</code>.</p>

<a id="add-secondary-route"></a>
<h4 translation-result="" id="add-a-secondary-route">添加第二路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-a-secondary-route"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-a-secondary-route">Add a secondary route<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-a-secondary-route"><i class="material-icons">link</i></a></h4>

<p translation-result="">打开 <code>AppRoutingModule</code>，并把一个新的 <code>compose</code> 路由添加到 <code>appRoutes</code> 中。</p><p translation-origin="off">Open the <code>AppRoutingModule</code> and add a new <code>compose</code> route to the <code>appRoutes</code>.</p>

<code-example path="router/src/app/app-routing.module.3.ts" linenums="false" title="src/app/app-routing.module.ts (compose route)" region="compose" ng-version="6.0.0"><div style="display: none">
{
  path: 'compose',
  component: ComposeMessageComponent,
  outlet: 'popup'
},

</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (compose route)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (compose route)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln">
  path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'compose'</span><span class="pun">,</span><span class="pln">
  component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pun">,</span><span class="pln">
  outlet</span><span class="pun">:</span><span class="pln"> </span><span class="str">'popup'</span><span class="pln">
</span><span class="pun">},</span></code>
    </pre></aio-code></code-example>
<p translation-result="">对 <code>path</code> 和 <code>component</code> 属性应该很熟悉了吧。
注意这个新的属性 <code>outlet</code> 被设置成了 <code>'popup'</code>。
这个路由现在指向了 <code>popup</code> 出口，而 <code>ComposeMessageComponent</code> 也将显示在那里。</p><p translation-origin="off">The <code>path</code> and <code>component</code> properties should be familiar.
There's a new property, <code>outlet</code>, set to <code>'popup'</code>.
This route now targets the popup outlet and the <code>ComposeMessageComponent</code> will display there.</p>

<p translation-result="">用户需要某种途径来打开这个弹出框。
打开 <code>AppComponent</code>，并添加一个“Contact”链接。</p><p translation-origin="off">The user needs a way to open the popup.
Open the <code>AppComponent</code> and add a "Contact" link.</p>

<code-example path="router/src/app/app.component.4.ts" linenums="false" title="src/app/app.component.ts (contact-link)" region="contact-link" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (contact-link)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (contact-link)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"[{ outlets: { popup: ['compose'] } }]"</span><span class="tag">&gt;</span><span class="pln">Contact</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">虽然 <code>compose</code> 路由被钉死在了 <code>popup</code> 出口上，但这仍然不足以向 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令表明要加载该路由。
你还要在<em>链接参数数组</em>中指定这个命名出口，并通过属性绑定的形式把它绑定到 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 上。</p><p translation-origin="off">Although the <code>compose</code> route is pinned to the "popup" outlet, that's not sufficient for wiring the route to a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive.
You have to specify the named outlet in a <em>link parameters array</em> and bind it to the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> with a property binding.</p>

<p translation-result=""><em>链接参数数组</em>包含一个只有一个 <code>outlets</code> 属性的对象，它的值是另一个对象，这个对象以一个或多个路由的出口名作为属性名。
在这里，它只有一个出口名“popup”，它的值则是另一个<em>链接参数数组</em>，用于指定 <code>compose</code> 路由。</p><p translation-origin="off">The <em>link parameters array</em> contains an object with a single <code>outlets</code> property whose value
is another object keyed by one (or more) outlet names.
In this case there is only the "popup" outlet property and its value is another <em>link parameters array</em> that specifies the <code>compose</code> route.</p>

<p translation-result="">意思是，当用户点击此链接时，在路由出口 <code>popup</code> 中显示与 <code>compose</code> 路由相关联的组件。</p><p translation-origin="off">You are in effect saying, <em>when the user clicks this link, display the component associated with the <code>compose</code> route in the <code>popup</code> outlet</em>.</p>

<div class="l-sub-section">
<p translation-result="">当有且只有一个<em>无名</em>出口时，外部对象中的这个 <code>outlets</code> 对象并不是必须的。</p><p translation-origin="off">This <code>outlets</code> object within an outer object was completely unnecessary
when there was only one route and one <em>unnamed</em> outlet to think about.</p>

<p translation-result="">路由器假设这个路由指向了<em>无名</em>的主出口，并为你创建这些对象。</p><p translation-origin="off">The router assumed that your route specification targeted the <em>unnamed</em> primary outlet
and created these objects for you.</p>

<p translation-result="">路由到一个命名出口就会揭示一个以前被隐藏的真相：
你可以在同一个 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令中为多个路由出口指定多个路由。</p><p translation-origin="off">Routing to a named outlet has revealed a previously hidden router truth:
you can target multiple outlets with multiple routes in the same <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive.</p>

<p translation-result="">这里你实际上没能这样做。要想指向命名出口，你就得使用一种更强大也更啰嗦的语法。</p><p translation-origin="off">You're not actually doing that here.
But to target a named outlet, you must use the richer, more verbose syntax.</p>

</div>
<a id="secondary-route-navigation"></a>
<h4 translation-result="" id="secondary-route-navigation-merging-routes-during-navigation">第二路由导航：在导航期间合并路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#secondary-route-navigation-merging-routes-during-navigation"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="secondary-route-navigation-merging-routes-during-navigation">Secondary route navigation: merging routes during navigation<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#secondary-route-navigation-merging-routes-during-navigation"><i class="material-icons">link</i></a></h4>

<p translation-result="">导航到<em>危机中心</em>并点击“Contact”，你将会在浏览器的地址栏看到如下 URL：</p><p translation-origin="off">Navigate to the <em>Crisis Center</em> and click "Contact".
you should see something like the following URL in the browser address bar.</p>

<code-example ng-version="6.0.0"><div style="display: none">
  http://.../crisis-center(popup:compose)

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">http</span><span class="pun">:</span><span class="com">//.../crisis-center(popup:compose)</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这个 URL 中有意思的部分是 <code>...</code> 后面的这些：</p><p translation-origin="off">The interesting part of the URL follows the <code>...</code>:</p>

<ul>
<li>
<p translation-result=""> <code>crisis-center</code> 是主导航。</p><p translation-origin="off">The <code>crisis-center</code> is the primary navigation.</p>

</li>
<li>
<p translation-result=""> 圆括号包裹的部分是第二路由。</p><p translation-origin="off">Parentheses surround the secondary route.</p>

</li>
<li>
<p translation-result=""> 第二路由包括一个出口名称（<code>popup</code>）、一个冒号分隔符和第二路由的路径（<code>compose</code>）。</p><p translation-origin="off">The secondary route consists of an outlet name (<code>popup</code>), a <code>colon</code> separator, and the secondary route path (<code>compose</code>).</p>

</li>
</ul>
<p translation-result="">点击 <em>Heroes</em> 链接，并再次查看 URL：</p><p translation-origin="off">Click the <em>Heroes</em> link and look at the URL again.</p>

<code-example ng-version="6.0.0"><div style="display: none">
  http://.../heroes(popup:compose)
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">http</span><span class="pun">:</span><span class="com">//.../heroes(popup:compose)</span></code>
    </pre></aio-code></code-example>
<p translation-result="">主导航的部分变化了，而第二路由没有变。</p><p translation-origin="off">The primary navigation part has changed; the secondary route is the same.</p>

<p translation-result="">路由器在导航树中对两个独立的分支保持追踪，并在 URL 中对这棵树进行表达。</p><p translation-origin="off">The router is keeping track of two separate branches in a navigation tree and generating a representation of that tree in the URL.</p>

<p translation-result="">你还可以添加更多出口和更多路由（无论是在顶层还是在嵌套的子层）来创建一个带有多个分支的导航树。
路由器将会生成相应的 URL。</p><p translation-origin="off">You can add many more outlets and routes, at the top level and in nested levels, creating a navigation tree with many branches.
The router will generate the URL to go with it.</p>

<p translation-result="">通过像前面那样填充 <code>outlets</code> 对象，你可以告诉路由器立即导航到一棵完整的树。
然后把这个对象通过一个<em>链接参数数组</em>传给 <code>router.navigate</code> 方法。</p><p translation-origin="off">You can tell the router to navigate an entire tree at once by filling out the <code>outlets</code> object mentioned above.
Then pass that object inside a <em>link parameters array</em>  to the <code>router.navigate</code> method.</p>

<p translation-result="">有空的时候你可以自行试验这些可能性。</p><p translation-origin="off">Experiment with these possibilities at your leisure.</p>

<a id="clear-secondary-routes"></a>
<h4 translation-result="" id="clearing-secondary-routes">清除第二路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#clearing-secondary-routes"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="clearing-secondary-routes">Clearing secondary routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#clearing-secondary-routes"><i class="material-icons">link</i></a></h4>

<p translation-result="">正如你刚刚学到的，除非导航到新的组件，否则路由出口中的组件会始终存在。
这里涉及到的第二出口也同样如此。</p><p translation-origin="off">As you've learned, a component in an outlet persists until you navigate away to a new component.
Secondary outlets are no different in this regard.</p>

<p translation-result="">每个第二出口都有自己独立的导航，跟主出口的导航彼此独立。
修改主出口中的当前路由并不会影响到 <code>popup</code> 出口中的。
这就是为什么在危机中心和英雄管理之间导航时，弹出框始终都是可见的。</p><p translation-origin="off">Each secondary outlet has its own navigation, independent of the navigation driving the primary outlet.
Changing a current route that displays in the primary outlet has no effect on the popup outlet.
That's why the popup stays visible as you navigate among the crises and heroes.</p>

<p translation-result="">点击“send”或“cancel”按钮，则<em>会</em>清除弹出框视图。
为何如此？再看看 <code>closePopup()</code> 方法：</p><p translation-origin="off">Clicking the "send" or "cancel" buttons <em>does</em> clear the popup view.
To see how, look at the <code>closePopup()</code> method again:</p>

<code-example path="router/src/app/compose-message.component.ts" linenums="false" title="src/app/compose-message.component.ts (closePopup)" region="closePopup" ng-version="6.0.0"><div style="display: none">
closePopup() {
  // Providing <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> `null` value to the named outlet
  // clears the contents of the named outlet
  this.router.navigate([{ outlets: { popup: null }}]);
}

</div><!----><header class="ng-star-inserted">src/app/compose-message.component.ts (closePopup)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/compose-message.component.ts (closePopup)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">closePopup</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// Providing </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> `null` value to the named outlet</span><span class="pln">
  </span><span class="com">// clears the contents of the named outlet</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([{</span><span class="pln"> outlets</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> popup</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">null</span><span class="pln"> </span><span class="pun">}}]);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">它使用 <code><a href="https://angular.cn/api/router/Router#navigate" class="code-anchor">Router.navigate()</a></code> 方法进行强制导航，并传入了一个<a href="https://angular.cn/guide/router#link-parameters-array">链接参数数组</a>。</p><p translation-origin="off">It navigates imperatively with the <code><a href="https://angular.cn/api/router/Router#navigate" class="code-anchor">Router.navigate()</a></code> method, passing in a <a href="https://angular.cn/guide/router#link-parameters-array">link parameters array</a>.</p>

<p translation-result="">就像在 <code>AppComponent</code> 中绑定到的 <em>Contact</em> <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 一样，它也包含了一个带 <code>outlets</code> 属性的对象。
<code>outlets</code> 属性的值是另一个对象，该对象用一些出口名称作为属性名。
唯一的命名出口是 <code>'popup'</code>。</p><p translation-origin="off">Like the array bound to the <em>Contact</em> <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> in the <code>AppComponent</code>,
this one includes an object with an <code>outlets</code> property.
The <code>outlets</code> property value is another object with outlet names for keys.
The only named outlet is <code>'popup'</code>.</p>

<p translation-result="">但这次，<code>'popup'</code> 的值是 <code>null</code>。<code>null</code> 不是一个路由，但却是一个合法的值。
把 <code>popup</code> 这个 <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> 设置为 <code>null</code> 会清除该出口，并且从当前 URL 中移除第二路由 <code>popup</code>。</p><p translation-origin="off">This time, the value of <code>'popup'</code> is <code>null</code>. That's not a route, but it is a legitimate value.
Setting the popup <code><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">RouterOutlet</a></code> to <code>null</code> clears the outlet and removes
the secondary popup route from the current URL.</p>

<a id="guards"></a>
<h2 translation-result="" id="milestone-5-route-guards">里程碑 5：路由守卫<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-5-route-guards"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-5-route-guards">Milestone 5: Route guards<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-5-route-guards"><i class="material-icons">link</i></a></h2>

<p translation-result="">现在，<em>任何用户</em>都能在<em>任何时候</em>导航到<em>任何地方</em>。
但有时候这样是不对的。</p><p translation-origin="off">At the moment, <em>any</em> user can navigate <em>anywhere</em> in the application <em>anytime</em>.
That's not always the right thing to do.</p>

<ul>
<li>
<p translation-result=""> 该用户可能无权导航到目标组件。</p><p translation-origin="off">Perhaps the user is not authorized to navigate to the target component.</p>

</li>
<li>
<p translation-result=""> 可能用户得先登录（认证）。</p><p translation-origin="off">Maybe the user must login (<em>authenticate</em>) first.</p>

</li>
<li>
<p translation-result=""> 在显示目标组件前，你可能得先获取某些数据。</p><p translation-origin="off">Maybe you should fetch some data before you display the target component.</p>

</li>
<li>
<p translation-result=""> 在离开组件前，你可能要先保存修改。</p><p translation-origin="off">You might want to save pending changes before leaving a component.</p>

</li>
<li>
<p translation-result=""> 你可能要询问用户：你是否要放弃本次更改，而不用保存它们？</p><p translation-origin="off">You might ask the user if it's OK to discard pending changes rather than save them.</p>

</li>
</ul>
<p translation-result="">你可以往路由配置中添加<strong><em>守卫</em></strong>，来处理这些场景。</p><p translation-origin="off">You can add <em>guards</em> to the route configuration to handle these scenarios.</p>

<p translation-result="">守卫返回一个值，以控制路由器的行为：</p><p translation-origin="off">A guard's return value controls the router's behavior:</p>

<ul>
<li>
<p translation-result=""> 如果它返回 <code>true</code>，导航过程会继续</p><p translation-origin="off">If it returns <code>true</code>, the navigation process continues.</p>

</li>
<li>
<p translation-result=""> 如果它返回 <code>false</code>，导航过程会终止，且用户会留在原地。</p><p translation-origin="off">If it returns <code>false</code>, the navigation process stops and the user stays put.</p>

</li>
</ul>
<div class="l-sub-section">
<p translation-result="">守卫还可以告诉路由器导航到别处，这样也取消当前的导航。</p><p translation-origin="off">The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.</p>

</div>
<p translation-result="">守卫<em>可以</em>用同步的方式返回一个布尔值。但在很多情况下，守卫无法用同步的方式给出答案。
守卫可能会向用户问一个问题、把更改保存到服务器，或者获取新数据，而这些都是异步操作。</p><p translation-origin="off">The guard <em>might</em> return its boolean answer synchronously.
But in many cases, the guard can't produce an answer synchronously.
The guard could ask the user a question, save changes to the server, or fetch fresh data.
These are all asynchronous operations.</p>

<p translation-result="">因此，路由的守卫可以返回一个 <code>Observable&lt;boolean&gt;</code> 或 <code>Promise&lt;boolean&gt;</code>，并且路由器会等待这个可观察对象被解析为 <code>true</code> 或 <code>false</code>。</p><p translation-origin="off">Accordingly, a routing guard can return an <code>Observable&lt;boolean&gt;</code> or a <code>Promise&lt;boolean&gt;</code> and the
router will wait for the observable to resolve to <code>true</code> or <code>false</code>.</p>

<p translation-result="">路由器可以支持多种守卫接口：</p><p translation-origin="off">The router supports multiple guard interfaces:</p>

<ul>
<li>
<p translation-result=""> 用<a href="https://angular.cn/api/router/CanActivate"><code>CanActivate</code></a>来处理导航<em>到</em>某路由的情况。</p><p translation-origin="off"><a href="https://angular.cn/api/router/CanActivate"><code>CanActivate</code></a> to mediate navigation <em>to</em> a route.</p>

</li>
<li>
<p translation-result=""> 用<a href="https://angular.cn/api/router/CanActivateChild"><code>CanActivateChild</code></a>来处理导航<em>到</em>某子路由的情况。</p><p translation-origin="off"><a href="https://angular.cn/api/router/CanActivateChild"><code>CanActivateChild</code></a> to mediate navigation <em>to</em> a child route.</p>

</li>
<li>
<p translation-result=""> 用<a href="https://angular.cn/api/router/CanDeactivate"><code>CanDeactivate</code></a>来处理从当前路由<em>离开</em>的情况.</p><p translation-origin="off"><a href="https://angular.cn/api/router/CanDeactivate"><code>CanDeactivate</code></a> to mediate navigation <em>away</em> from the current route.</p>

</li>
<li>
<p translation-result=""> 用<a href="https://angular.cn/api/router/Resolve"><code>Resolve</code></a>在路由激活<em>之前</em>获取路由数据。</p><p translation-origin="off"><a href="https://angular.cn/api/router/Resolve"><code>Resolve</code></a> to perform route data retrieval <em>before</em> route activation.</p>

</li>
<li>
<p translation-result=""> 用<a href="https://angular.cn/api/router/CanLoad"><code>CanLoad</code></a>来处理<em>异步</em>导航到某特性模块的情况。</p><p translation-origin="off"><a href="https://angular.cn/api/router/CanLoad"><code>CanLoad</code></a> to mediate navigation <em>to</em> a feature module loaded <em>asynchronously</em>.</p>

</li>
</ul>
<p translation-result="">在分层路由的每个级别上，你都可以设置多个守卫。
路由器会先按照从最深的子路由由下往上检查的顺序来检查 <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a>()</code> 和 <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a>()</code> 守卫。
然后它会按照从上到下的顺序检查 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>()</code> 守卫。
如果特性模块是异步加载的，在加载它之前还会检查 <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a>()</code> 守卫。
如果<em>任何</em>一个守卫返回 <code>false</code>，其它尚未完成的守卫会被取消，这样整个导航就被取消了。</p><p translation-origin="off">You can have multiple guards at every level of a routing hierarchy.
The router checks the <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> and <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> guards first, from the deepest child route to the top.
Then it checks the <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> guards from the top down to the deepest child route. If the feature module
is loaded asynchronously, the <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> guard is checked before the module is loaded.
If <em>any</em> guard returns false, pending guards that have not completed will be canceled,
and the entire navigation is canceled.</p>

<p translation-result="">接下来的小节中有一些例子。</p><p translation-origin="off">There are several examples over the next few sections.</p>

<a id="can-activate-guard"></a>
<h3 translation-result="" id="emcanactivateem-requiring-authentication"><em>CanActivate</em>: 要求认证<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emcanactivateem-requiring-authentication"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="canactivate-requiring-authentication"><em>CanActivate</em>: requiring authentication<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#canactivate-requiring-authentication"><i class="material-icons">link</i></a></h3>

<p translation-result="">应用程序通常会根据访问者来决定是否授予某个特性区的访问权。
你可以只对已认证过的用户或具有特定角色的用户授予访问权，还可以阻止或限制用户访问权，直到用户账户激活为止。</p><p translation-origin="off">Applications often restrict access to a feature area based on who the user is.
You could permit access only to authenticated users or to users with a specific role.
You might block or limit access until the user's account is activated.</p>

<p translation-result=""><code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> 守卫是一个管理这些导航类业务规则的工具。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> guard is the tool to manage these navigation business rules.</p>

<h4 translation-result="" id="add-an-admin-feature-module">添加一个“管理”特性模块<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-an-admin-feature-module"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-an-admin-feature-module">Add an admin feature module<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-an-admin-feature-module"><i class="material-icons">link</i></a></h4>

<p translation-result="">在下一节，你将会使用一些新的<em>管理</em>特性来扩展危机中心。
那些特性尚未定义，但是你可以先从添加一个名叫 <code>AdminModule</code> 的特性模块开始。</p><p translation-origin="off">In this next section, you'll extend the crisis center with some new <em>administrative</em> features.
Those features aren't defined yet.
But you can start by adding a new feature module named <code>AdminModule</code>.</p>

<p translation-result="">创建一个 <code>admin</code> 目录，它带有一个特性模块文件、一个路由配置文件和一些支持性组件。</p><p translation-origin="off">Create an <code>admin</code> folder with a feature module file, a routing configuration file, and supporting components.</p>

<p translation-result="">管理特性区的文件是这样的：</p><p translation-origin="off">The admin feature file structure looks like this:</p>

<div class="filetree">
  <div class="file">
<p translation-origin="off">    src/app/admin</p>
  </div>
  <div class="children">
    <div class="file">
<p translation-origin="off">      admin-dashboard.component.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      admin.component.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      admin.module.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      admin-routing.module.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      manage-crises.component.ts</p>
    </div>
    <div class="file">
<p translation-origin="off">      manage-heroes.component.ts</p>
    </div>
  </div>
</div>
<p translation-result="">管理特性模块包含 <code>AdminComponent</code>，它用于在特性模块内的仪表盘路由以及两个尚未完成的用于管理危机和英雄的组件之间进行路由。</p><p translation-origin="off">The admin feature module contains the <code>AdminComponent</code> used for routing within the
feature module, a dashboard route and two unfinished components to manage crises and heroes.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/admin/admin-dashboard.component.ts" path="router/src/app/admin/admin-dashboard.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;p&gt;Dashboard&lt;/p&gt;
  `
})
export class AdminDashboardComponent { }


</code-pane>

  <code-pane title="src/app/admin/admin.component.ts" path="router/src/app/admin/admin.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;h3&gt;ADMIN&lt;/h3&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="./" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"
        [routerLinkActiveOptions]="{ exact: true }"&gt;Dashboard&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="./crises" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Manage Crises&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="./heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Manage Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AdminComponent {
}


</code-pane>

  <code-pane title="src/app/admin/admin.module.ts" path="router/src/app/admin/admin.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';

import { AdminComponent }           from './admin.component';
import { AdminDashboardComponent }  from './admin-dashboard.component';
import { ManageCrisesComponent }    from './manage-crises.component';
import { ManageHeroesComponent }    from './manage-heroes.component';

import { AdminRoutingModule }       from './admin-routing.module';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    AdminRoutingModule
  ],
  declarations: [
    AdminComponent,
    AdminDashboardComponent,
    ManageCrisesComponent,
    ManageHeroesComponent
  ]
})
export class AdminModule {}


</code-pane>

  <code-pane title="src/app/admin/manage-crises.component.ts" path="router/src/app/admin/manage-crises.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;p&gt;Manage your crises here&lt;/p&gt;
  `
})
export class ManageCrisesComponent { }


</code-pane>

  <code-pane title="src/app/admin/manage-heroes.component.ts" path="router/src/app/admin/manage-heroes.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;p&gt;Manage your heroes here&lt;/p&gt;
  `
})
export class ManageHeroesComponent { }


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-11-0" tabindex="0" aria-controls="mat-tab-content-11-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/admin/admin-dashboard.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-11-1" tabindex="-1" aria-controls="mat-tab-content-11-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/admin/admin.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-11-2" tabindex="-1" aria-controls="mat-tab-content-11-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/admin/admin.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-11-3" tabindex="-1" aria-controls="mat-tab-content-11-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/admin/manage-crises.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-11-4" tabindex="-1" aria-controls="mat-tab-content-11-4" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/admin/manage-heroes.component.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 346px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-37 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-11-0" aria-labelledby="mat-tab-label-11-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-dashboard.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln">  </span><span class="str">`
    &lt;p&gt;Dashboard&lt;/p&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-38 ng-star-inserted" role="tabpanel" id="mat-tab-content-11-1" aria-labelledby="mat-tab-label-11-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-39 ng-star-inserted" role="tabpanel" id="mat-tab-content-11-2" aria-labelledby="mat-tab-label-11-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-40 ng-star-inserted" role="tabpanel" id="mat-tab-content-11-3" aria-labelledby="mat-tab-label-11-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-41 ng-star-inserted" role="tabpanel" id="mat-tab-content-11-4" aria-labelledby="mat-tab-label-11-4"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<div class="l-sub-section">
<p translation-result="">由于 <code>AdminModule</code> 中 <code>AdminComponent</code> 中的 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 是一个空路径的路由，所以它会匹配到管理特性区的任何路由。
但你只有在访问 <code>Dashboard</code> 路由时才希望该链接被激活。
往 <code>Dashboard</code> 这个 routerLink 上添加另一个绑定 <code>[routerLinkActiveOptions]="{ exact: true }"</code>，
这样就只有当用户导航到 <code>/admin</code> 这个 URL 时才会激活它，而不会在导航到它的某个子路由时。</p><p translation-origin="off">Since the admin dashboard <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> is an empty path route in the <code>AdminComponent</code>, it
is considered a match to any route within the admin feature area.
You only want the <code>Dashboard</code> link to be active when the user visits that route.
Adding an additional binding to the <code>Dashboard</code> routerLink,
<code>[routerLinkActiveOptions]="{ exact: true }"</code>, marks the <code>./</code> link as active when
the user navigates to the <code>/admin</code> URL and not when navigating to any of the child routes.</p>

</div>
<p translation-result="">最初的管理路由配置如下：</p><p translation-origin="off">The initial admin routing configuration:</p>

<code-example path="router/src/app/admin/admin-routing.module.1.ts" linenums="false" title="src/app/admin/admin-routing.module.ts (admin routing)" region="admin-routes" ng-version="6.0.0"><div style="display: none">
const adminRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'admin',
    component: AdminComponent,
    children: [
      {
        path: '',
        children: [
          { path: 'crises', component: ManageCrisesComponent },
          { path: 'heroes', component: ManageHeroesComponent },
          { path: '', component: AdminDashboardComponent }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(adminRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AdminRoutingModule {}

</div><!----><header class="ng-star-inserted">src/app/admin/admin-routing.module.ts (admin routing)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-routing.module.ts (admin routing)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> adminRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminComponent</span><span class="pun">,</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crises'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageCrisesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageHeroesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">]</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">adminRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<a id="component-less-route"></a>
<h3 translation-result="" id="component-less-route-grouping-routes-without-a-component">无组件路由: 不借助组件对路由进行分组<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#component-less-route-grouping-routes-without-a-component"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="component-less-route-grouping-routes-without-a-component">Component-less route: grouping routes without a component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#component-less-route-grouping-routes-without-a-component"><i class="material-icons">link</i></a></h3>

<p translation-result="">来看 <code>AdminComponent</code> 下的子路由，这里有一个带 <strong>path</strong> 和 <strong>children</strong> 的子路由，
但它没有使用 <strong>component</strong>。这并不是配置中的失误，而是在使用<strong>无组件</strong>路由。</p><p translation-origin="off">Looking at the child route under the <code>AdminComponent</code>, there is a <code>path</code> and a <code>children</code>
property but it's not using a <code>component</code>.
You haven't made a mistake in the configuration.
You've defined a <em>component-less</em> route.</p>

<p translation-result="">这里的目标是对 <code>admin</code> 路径下的 <code>危机中心</code> 管理类路由进行分组，但并不需要另一个仅用来分组路由的组件。
一个<em>无组件</em>的路由能让<a href="https://angular.cn/guide/router#can-activate-child-guard">守卫子路由</a>变得更容易。</p><p translation-origin="off">The goal is to group the <code>Crisis Center</code> management routes under the <code>admin</code> path.
You don't need a component to do it.
A <em>component-less</em> route makes it easier to <a href="https://angular.cn/guide/router#can-activate-child-guard">guard child routes</a>.</p>

<p translation-result="">接下来，把 <code>AdminModule</code> 导入到 <code>app.module.ts</code> 中，并把它加入 <code>imports</code> 数组中来注册这些管理类路由。</p><p translation-origin="off">Next, import the <code>AdminModule</code> into <code>app.module.ts</code> and add it to the <code>imports</code> array
to register the admin routes.</p>

<code-example path="router/src/app/app.module.4.ts" linenums="false" title="src/app/app.module.ts (admin module)" region="admin-module" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a> }   from '@angular/common';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';

import { AppComponent }            from './app.component';
import { PageNotFoundComponent }   from './not-found.component';

import { AppRoutingModule }        from './app-routing.module';
import { HeroesModule }            from './heroes/heroes.module';
import { CrisisCenterModule }      from './crisis-center/crisis-center.module';
import { AdminModule }             from './admin/admin.module';

import { DialogService }           from './dialog.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/common/CommonModule" class="code-anchor">CommonModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    CrisisCenterModule,
    AdminModule,
    AppRoutingModule
  ],
  declarations: [
    AppComponent,
    PageNotFoundComponent
  ],
  providers: [
    DialogService
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</div><!----><header class="ng-star-inserted">src/app/app.module.ts (admin module)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (admin module)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/common'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes/heroes.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center/crisis-center.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AdminModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./admin/admin.module'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DialogService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./dialog.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/common/CommonModule" class="code-anchor"><span class="typ">CommonModule</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroesModule</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">CrisisCenterModule</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">AdminModule</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">AppRoutingModule</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">PageNotFoundComponent</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">DialogService</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">然后往壳组件 <code>AppComponent</code> 中添加一个链接，让用户能点击它，以访问该特性。</p><p translation-origin="off">Add an "Admin" link to the <code>AppComponent</code> shell so that users can get to this feature.</p>

<code-example path="router/src/app/app.component.5.ts" linenums="false" title="src/app/app.component.ts (template)" region="template" ng-version="6.0.0"><div style="display: none">
template: `
  &lt;h1 class="title"&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
  &lt;nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/admin" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Admin&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
  &lt;/nav&gt;
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a> name="popup"&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (template)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (template)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
  &lt;h1 class="title"&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
  &lt;nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/admin" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Admin&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
  &lt;/nav&gt;
  &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
  &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str"> name="popup"&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
  `</span></code>
    </pre></aio-code></code-example>
<a id="guard-admin-feature"></a>
<h4 translation-result="" id="guard-the-admin-feature">守护“管理特性”区<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#guard-the-admin-feature"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="guard-the-admin-feature">Guard the admin feature<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#guard-the-admin-feature"><i class="material-icons">link</i></a></h4>

<p translation-result="">现在“危机中心”的每个路由都是对所有人开放的。这些新的<em>管理特性</em>应该只能被已登录用户访问。</p><p translation-origin="off">Currently every route within the <em>Crisis Center</em> is open to everyone.
The new <em>admin</em> feature should be accessible only to authenticated users.</p>

<p translation-result="">你可以在用户登录之前隐藏这些链接，但这样会有点复杂并难以维护。</p><p translation-origin="off">You could hide the link until the user logs in. But that's tricky and difficult to maintain.</p>

<p translation-result="">你可以换种方式：写一个 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>()</code> 守卫，将正在尝试访问管理组件匿名用户重定向到登录页。</p><p translation-origin="off">Instead you'll write a <code>canActivate()</code> guard method to redirect anonymous users to the
login page when they try to enter the admin area.</p>

<p translation-result="">这是一种具有通用性的守护目标（通常会有其它特性需要登录用户才能访问），所以你要在应用的根目录下创建一个 <code>auth-guard.ts</code> 文件。</p><p translation-origin="off">This is a general purpose guard—you can imagine other features
that require authenticated users—so you create an
<code>auth-guard.service.ts</code> in the application root folder.</p>

<p translation-result="">此刻，你的兴趣在于看看守卫是如何工作的，所以第一个版本没做什么有用的事情。它只是往控制台写日志，并且立即返回 <code>true</code>，让导航继续：</p><p translation-origin="off">At the moment you're interested in seeing how guards work so the first version does nothing useful.
It simply logs to console and <code>returns</code> true immediately, allowing navigation to proceed:</p>

<code-example path="router/src/app/auth-guard.service.1.ts" linenums="false" title="src/app/auth-guard.service.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }     from '@angular/core';
import { <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a> }    from '@angular/router';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthGuard implements <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a> {
  canActivate() {
    console.log('AuthGuard#canActivate called');
    return true;
  }
}


</div><!----><header class="ng-star-inserted">src/app/auth-guard.service.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth-guard.service.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  canActivate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'AuthGuard#canActivate called'</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接下来，打开 <code>crisis-center.routes.ts</code>，导入 <code>AuthGuard</code> 类，修改管理路由并通过 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>()</code> 守卫来引用 <code>AuthGuard</code>：</p><p translation-origin="off">Next, open <code>admin-routing.module.ts</code>, import the <code>AuthGuard</code> class, and
update the admin route with a <code>canActivate</code> guard property that references it:</p>

<code-example path="router/src/app/admin/admin-routing.module.2.ts" linenums="false" title="src/app/admin/admin-routing.module.ts (guarded admin route)" region="admin-route" ng-version="6.0.0"><div style="display: none">
import { AuthGuard }                from '../auth-guard.service';

const adminRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'admin',
    component: AdminComponent,
    canActivate: [AuthGuard],
    children: [
      {
        path: '',
        children: [
          { path: 'crises', component: ManageCrisesComponent },
          { path: 'heroes', component: ManageHeroesComponent },
          { path: '', component: AdminDashboardComponent }
        ],
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(adminRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AdminRoutingModule {}

</div><!----><header class="ng-star-inserted">src/app/admin/admin-routing.module.ts (guarded admin route)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-routing.module.ts (guarded admin route)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="pun">}</span><span class="pln">                </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../auth-guard.service'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> adminRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminComponent</span><span class="pun">,</span><span class="pln">
    canActivate</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">AuthGuard</span><span class="pun">],</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crises'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageCrisesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageHeroesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">],</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">adminRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">管理特性区现在受此守卫保护了，不过这样的保护还不够。</p><p translation-origin="off">The admin feature is now protected by the guard, albeit protected poorly.</p>

<a id="teach-auth"></a>
<h4 translation-result="" id="teach-emauthguardem-to-authenticate">教 <em>AuthGuard</em> 进行认证<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#teach-emauthguardem-to-authenticate"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="teach-authguard-to-authenticate">Teach <em>AuthGuard</em> to authenticate<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#teach-authguard-to-authenticate"><i class="material-icons">link</i></a></h4>

<p translation-result="">先让 <code>AuthGuard</code> 至少能“假装”进行认证。</p><p translation-origin="off">Make the <code>AuthGuard</code> at least pretend to authenticate.</p>

<p translation-result=""><code>AuthGuard</code> 可以调用应用中的一项服务，该服务能让用户登录，并且保存当前用户的信息。下面是一个 <code>AuthService</code> 的示范：</p><p translation-origin="off">The <code>AuthGuard</code> should call an application service that can login a user and retain information about the current user.
Here's a demo <code>AuthService</code>:</p>

<code-example path="router/src/app/auth.service.ts" linenums="false" title="src/app/auth.service.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

import { Observable, of } from 'rxjs';
import { tap, delay } from 'rxjs/operators';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthService {
  isLoggedIn = false;

  // store the URL so we can redirect after logging in
  redirectUrl: string;

  login(): Observable&lt;boolean&gt; {
    return of(true).pipe(
      delay(1000),
      tap(val =&gt; this.isLoggedIn = true)
    );
  }

  logout(): void {
    this.isLoggedIn = false;
  }
}


</div><!----><header class="ng-star-inserted">src/app/auth.service.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth.service.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">,</span><span class="pln"> of </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> tap</span><span class="pun">,</span><span class="pln"> delay </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  isLoggedIn </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// store the URL so we can redirect after logging in</span><span class="pln">
  redirectUrl</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">;</span><span class="pln">

  login</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;boolean&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">
      delay</span><span class="pun">(</span><span class="lit">1000</span><span class="pun">),</span><span class="pln">
      tap</span><span class="pun">(</span><span class="pln">val </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isLoggedIn </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">)</span><span class="pln">
    </span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  logout</span><span class="pun">():</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isLoggedIn </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">虽然它不会真的进行登录，但足够让你进行这个讨论了。
它有一个 <code>isLoggedIn</code> 标志，用来标识是否用户已经登录过了。
它的 <code>login</code> 方法会仿真一个对外部服务的 API 调用，返回一个可观察对象（observable）。在短暂的停顿之后，这个可观察对象就会解析成功。
<code>redirectUrl</code> 属性将会保存在 URL 中，以便认证完之后导航到它。</p><p translation-origin="off">Although it doesn't actually log in, it has what you need for this discussion.
It has an <code>isLoggedIn</code> flag to tell you whether the user is authenticated.
Its <code>login</code> method simulates an API call to an external service by returning an
observable that resolves successfully after a short pause.
The <code>redirectUrl</code> property will store the attempted URL so you can navigate to it after authenticating.</p>

<p translation-result="">这就修改 <code>AuthGuard</code> 来调用它。</p><p translation-origin="off">Revise the <code>AuthGuard</code> to call it.</p>

<code-example path="router/src/app/auth-guard.service.2.ts" linenums="false" title="src/app/auth-guard.service.ts (v2)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }       from '@angular/core';
import {
  <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
  <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
  <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>
}                           from '@angular/router';
import { AuthService }      from './auth.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthGuard implements <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a> {
  constructor(private authService: AuthService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  canActivate(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    let url: string = state.url;

    return this.checkLogin(url);
  }

  checkLogin(url: string): boolean {
    if (this.authService.isLoggedIn) { return true; }

    // Store the attempted URL for redirecting
    this.authService.redirectUrl = url;

    // Navigate to the login page with extras
    this.router.navigate(['/login']);
    return false;
  }
}

</div><!----><header class="ng-star-inserted">src/app/auth-guard.service.ts (v2)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth-guard.service.ts (v2)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pln">
</span><span class="pun">}</span><span class="pln">                           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./auth.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> authService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

  canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> state</span><span class="pun">.</span><span class="pln">url</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">isLoggedIn</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// Store the attempted URL for redirecting</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">redirectUrl </span><span class="pun">=</span><span class="pln"> url</span><span class="pun">;</span><span class="pln">

    </span><span class="com">// Navigate to the login page with extras</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/login'</span><span class="pun">]);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，你把 <code>AuthService</code> 和 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 服务<em>注入到</em>构造函数中。
你还没有提供 <code>AuthService</code>，这里要说明的是：可以往路由守卫中注入有用的服务。</p><p translation-origin="off">Notice that you <em>inject</em> the <code>AuthService</code> and the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> in the constructor.
You haven't provided the <code>AuthService</code> yet but it's good to know that you can inject helpful services into routing guards.</p>

<p translation-result="">该守卫返回一个同步的布尔值。如果用户已经登录，它就返回 <code>true</code>，导航会继续。</p><p translation-origin="off">This guard returns a synchronous boolean result.
If the user is logged in, it returns true and the navigation continues.</p>

<p translation-result="">这个 <code><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a></code> 包含了<em>即将</em>被激活的路由，而 <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code> 包含了该应用<em>即将</em>到达的状态。
你应该通过守卫进行检查。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a></code> contains the <em>future</em> route that will be activated and the <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code>
contains the <em>future</em> <code><a href="https://angular.cn/api/router/RouterState" class="code-anchor">RouterState</a></code> of the application, should you pass through the guard check.</p>

<p translation-result="">如果用户还没有登录，你就会用 <code><a href="https://angular.cn/api/router/RouterStateSnapshot#url" class="code-anchor">RouterStateSnapshot.url</a></code> 保存用户来自的 URL 并让路由器导航到登录页（你尚未创建该页）。
这间接导致路由器自动中止了这次导航，<code>checkLogin()</code> 返回 <code>false</code> 并不是必须的，但这样可以更清楚的表达意图。</p><p translation-origin="off">If the user is not logged in, you store the attempted URL the user came from using the <code><a href="https://angular.cn/api/router/RouterStateSnapshot#url" class="code-anchor">RouterStateSnapshot.url</a></code> and
tell the router to navigate to a login page—a page you haven't created yet.
This secondary navigation automatically cancels the current navigation; <code>checkLogin()</code> returns
<code>false</code> just to be clear about that.</p>

<a id="add-login-component"></a>
<h4 translation-result="" id="add-the-emlogincomponentem">添加 <em>LoginComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-the-emlogincomponentem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="add-the-logincomponent">Add the <em>LoginComponent</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#add-the-logincomponent"><i class="material-icons">link</i></a></h4>

<p translation-result="">你需要一个 <code>LoginComponent</code> 来让用户登录进这个应用。在登录之后，你就会跳转到前面保存的 URL，如果没有，就跳转到默认 URL。
该组件没有什么新内容，你把它放进路由配置的方式也没什么新意。</p><p translation-origin="off">You need a <code>LoginComponent</code> for the user to log in to the app. After logging in, you'll redirect
to the stored URL if available, or use the default URL.
There is nothing new about this component or the way you wire it into the router configuration.</p>

<p translation-result="">在 <code>login-routing.module.ts</code> 中注册一个 <code>/login</code> 路由，并把必要的提供商添加 <code>providers</code> 数组中。
在 <code>app.module.ts</code> 中，导入 <code>LoginComponent</code> 并把它加入根模块的 <code>declarations</code> 中。
同时在 <code>AppModule</code> 中导入并添加 <code>LoginRoutingModule</code>。</p><p translation-origin="off">Register a <code>/login</code> route in the <code>login-routing.module.ts</code> and add the necessary providers to the <code>providers</code>
array. In <code>app.module.ts</code>, import the <code>LoginComponent</code> and add it to the <code>AppModule</code> <code>declarations</code>.
Import and add the <code>LoginRoutingModule</code> to the <code>AppModule</code> imports as well.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/app.module.ts" path="router/src/app/app.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';
import { <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';

import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> } from '@angular/router';

import { AppComponent }            from './app.component';
import { AppRoutingModule }        from './app-routing.module';

import { HeroesModule }            from './heroes/heroes.module';
import { ComposeMessageComponent } from './compose-message.component';
import { LoginRoutingModule }      from './login-routing.module';
import { LoginComponent }          from './login.component';
import { PageNotFoundComponent }   from './not-found.component';

import { DialogService }           from './dialog.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    LoginRoutingModule,
    AppRoutingModule,
    <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a>
  ],
  declarations: [
    AppComponent,
    ComposeMessageComponent,
    LoginComponent,
    PageNotFoundComponent
  ],
  providers: [
    DialogService
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule {
  // Diagnostic only: inspect router configuration
  constructor(router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {
    console.log('<a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a>: ', JSON.stringify(router.config, undefined, 2));
  }
}


</code-pane>

  <code-pane title="src/app/login.component.ts" path="router/src/app/login.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }   from '@angular/core';
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> }      from '@angular/router';
import { AuthService } from './auth.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;h2&gt;LOGIN&lt;/h2&gt;
    &lt;p&gt;{{message}}&lt;/p&gt;
    &lt;p&gt;
      &lt;button (click)="login()"  *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="!authService.isLoggedIn"&gt;Login&lt;/button&gt;
      &lt;button (click)="logout()" *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="authService.isLoggedIn"&gt;Logout&lt;/button&gt;
    &lt;/p&gt;`
})
export class LoginComponent {
  message: string;

  constructor(public authService: AuthService, public router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {
    this.setMessage();
  }

  setMessage() {
    this.message = 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');
  }

  login() {
    this.message = 'Trying to log in ...';

    this.authService.login().subscribe(() =&gt; {
      this.setMessage();
      if (this.authService.isLoggedIn) {
        // Get the redirect URL from our auth service
        // If no redirect has been set, use the default
        let redirect = this.authService.redirectUrl ? this.authService.redirectUrl : '/crisis-center/admin';

        // Redirect the user
        this.router.navigate([redirect]);
      }
    });
  }

  logout() {
    this.authService.logout();
    this.setMessage();
  }
}


</code-pane>

  <code-pane title="src/app/login-routing.module.ts" path="router/src/app/login-routing.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';
import { AuthGuard }            from './auth-guard.service';
import { AuthService }          from './auth.service';
import { LoginComponent }       from './login.component';

const loginRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'login', component: LoginComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(loginRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    AuthGuard,
    AuthService
  ]
})
export class LoginRoutingModule {}


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-0" tabindex="0" aria-controls="mat-tab-content-12-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/app.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-1" tabindex="-1" aria-controls="mat-tab-content-12-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/login.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-12-2" tabindex="-1" aria-controls="mat-tab-content-12-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/login-routing.module.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 191px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-42 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-12-0" aria-labelledby="mat-tab-label-12-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser/animations'</span><span class="pun">;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span></li><li class="L8"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes/heroes.module'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./compose-message.component'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">LoginRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./login-routing.module'</span><span class="pun">;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">LoginComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./login.component'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DialogService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./dialog.service'</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L9"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L0"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L2"><span class="pln">    </span><span class="typ">HeroesModule</span><span class="pun">,</span></li><li class="L3"><span class="pln">    </span><span class="typ">LoginRoutingModule</span><span class="pun">,</span></li><li class="L4"><span class="pln">    </span><span class="typ">AppRoutingModule</span><span class="pun">,</span></li><li class="L5"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a></li><li class="L6"><span class="pln">  </span><span class="pun">],</span></li><li class="L7"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">    </span><span class="typ">AppComponent</span><span class="pun">,</span></li><li class="L9"><span class="pln">    </span><span class="typ">ComposeMessageComponent</span><span class="pun">,</span></li><li class="L0"><span class="pln">    </span><span class="typ">LoginComponent</span><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><span class="typ">PageNotFoundComponent</span></li><li class="L2"><span class="pln">  </span><span class="pun">],</span></li><li class="L3"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L4"><span class="pln">    </span><span class="typ">DialogService</span></li><li class="L5"><span class="pln">  </span><span class="pun">],</span></li><li class="L6"><span class="pln">  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span></li><li class="L7"><span class="pun">})</span></li><li class="L8"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span></li><li class="L9"><span class="pln">  </span><span class="com">// Diagnostic only: inspect router configuration</span></li><li class="L0"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'</span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="str">Routes</span></a><span class="str">: '</span><span class="pun">,</span><span class="pln"> JSON</span><span class="pun">.</span><span class="pln">stringify</span><span class="pun">(</span><span class="pln">router</span><span class="pun">.</span><span class="pln">config</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-43 ng-star-inserted" role="tabpanel" id="mat-tab-content-12-1" aria-labelledby="mat-tab-label-12-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-44 ng-star-inserted" role="tabpanel" id="mat-tab-content-12-2" aria-labelledby="mat-tab-label-12-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<div class="l-sub-section">
<p translation-result="">它们所需的守卫和服务提供商<strong>必须</strong>在模块一级提供。这让路由器在导航过程中可以通过 <code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> 来取得这些服务。
同样的规则也适用于<a href="https://angular.cn/guide/router#asynchronous-routing">异步加载</a>的特性模块。</p><p translation-origin="off">Guards and the service providers they require <em>must</em> be provided at the module-level. This allows
the Router access to retrieve these services from the <code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> during the navigation process.
The same rule applies for feature modules loaded <a href="https://angular.cn/guide/router#asynchronous-routing">asynchronously</a>.</p>

</div>
<a id="can-activate-child-guard"></a>
<h3 translation-result="" id="emcanactivatechildem-guarding-child-routes"><code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code>：保护子路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emcanactivatechildem-guarding-child-routes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="canactivatechild-guarding-child-routes"><em>CanActivateChild</em>: guarding child routes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#canactivatechild-guarding-child-routes"><i class="material-icons">link</i></a></h3>

<p translation-result="">你还可以使用 <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 守卫来保护子路由。
<code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 守卫和 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> 守卫很像。
它们的区别在于，<code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 会在<em>任何子路由</em>被激活之前运行。</p><p translation-origin="off">You can also protect child routes with the <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> guard.
The <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> guard is similar to the <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> guard.
The key difference is that it runs <em>before</em>  any child route is activated.</p>

<p translation-result="">你要保护管理特性模块，防止它被非授权访问，还要保护这个特性模块<em>内部</em>的那些子路由。</p><p translation-origin="off">You protected the admin feature module from unauthorized access.
You should also protect child routes <em>within</em> the feature module.</p>

<p translation-result="">扩展 <code>AuthGuard</code> 以便在 <code>admin</code> 路由之间导航时提供保护。
打开 <code>auth-guard.service.ts</code> 并从路由库中导入 <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 接口。</p><p translation-origin="off">Extend the <code>AuthGuard</code> to protect when navigating between the <code>admin</code> routes.
Open <code>auth-guard.service.ts</code> and add the <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> interface to the imported tokens from the router package.</p>

<p translation-result="">接下来，实现 <code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 方法，它所接收的参数与 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> 方法一样：一个 <code><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a></code> 和一个 <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code>。
<code><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a></code> 方法可以返回 <code>Observable&lt;boolean&gt;</code> 或 <code>Promise&lt;boolean&gt;</code> 来支持异步检查，或 <code>boolean</code> 来支持同步检查。
这里返回的是 <code>boolean</code>：</p><p translation-origin="off">Next, implement the <code>canActivateChild()</code> method which takes the same arguments as the <code>canActivate()</code> method:
an <code><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a></code> and <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code>.
The <code>canActivateChild()</code> method can return an <code>Observable&lt;boolean&gt;</code> or <code>Promise&lt;boolean&gt;</code> for
async checks and a <code>boolean</code> for sync checks.
This one returns a <code>boolean</code>:</p>

<code-example path="router/src/app/auth-guard.service.3.ts" linenums="false" title="src/app/auth-guard.service.ts (excerpt)" region="can-activate-child" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }       from '@angular/core';
import {
  <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
  <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
  <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>,
  <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a>
}                           from '@angular/router';
import { AuthService }      from './auth.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthGuard implements <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a> {
  constructor(private authService: AuthService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  canActivate(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    let url: string = state.url;

    return this.checkLogin(url);
  }

  canActivateChild(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    return this.canActivate(route, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>);
  }

/* . . . */
}

</div><!----><header class="ng-star-inserted">src/app/auth-guard.service.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth-guard.service.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a><span class="pln">
</span><span class="pun">}</span><span class="pln">                           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./auth.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> authService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

  canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> state</span><span class="pun">.</span><span class="pln">url</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  canActivateChild</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

</span><span class="com">/* . . . */</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">同样把这个 <code>AuthGuard</code> 添加到“无组件的”管理路由，来同时保护它的所有子路由，而不是为每个路由单独添加这个 <code>AuthGuard</code>。</p><p translation-origin="off">Add the same <code>AuthGuard</code> to the <code>component-less</code> admin route to protect all other child routes at one time
instead of adding the <code>AuthGuard</code> to each route individually.</p>

<code-example path="router/src/app/admin/admin-routing.module.3.ts" linenums="false" title="src/app/admin/admin-routing.module.ts (excerpt)" region="can-activate-child" ng-version="6.0.0"><div style="display: none">
const adminRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'admin',
    component: AdminComponent,
    canActivate: [AuthGuard],
    children: [
      {
        path: '',
        canActivateChild: [AuthGuard],
        children: [
          { path: 'crises', component: ManageCrisesComponent },
          { path: 'heroes', component: ManageHeroesComponent },
          { path: '', component: AdminDashboardComponent }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(adminRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class AdminRoutingModule {}

</div><!----><header class="ng-star-inserted">src/app/admin/admin-routing.module.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-routing.module.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> adminRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminComponent</span><span class="pun">,</span><span class="pln">
    canActivate</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">AuthGuard</span><span class="pun">],</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        canActivateChild</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">AuthGuard</span><span class="pun">],</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crises'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageCrisesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ManageHeroesComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">]</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">adminRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></code>
    </pre></aio-code></code-example>
<a id="can-deactivate-guard"></a>
<h3 translation-result="" id="emcandeactivateem-handling-unsaved-changes"><em>CanDeactivate</em>：处理未保存的更改<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emcandeactivateem-handling-unsaved-changes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="candeactivate-handling-unsaved-changes"><em>CanDeactivate</em>: handling unsaved changes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#candeactivate-handling-unsaved-changes"><i class="material-icons">link</i></a></h3>

<p translation-result="">回到“Heroes”工作流，该应用毫不犹豫的接受对英雄的任何修改，不作任何校验。</p><p translation-origin="off">Back in the "Heroes" workflow, the app accepts every change to a hero immediately without hesitation or validation.</p>

<p translation-result="">在现实世界中，你得先把用户的改动积累起来。
你可能不得不进行跨字段的校验，可能要找服务器进行校验，可能得把这些改动保存成一种待定状态，直到用户或者把这些改动<em>作为一组</em>进行确认或撤销所有改动。</p><p translation-origin="off">In the real world, you might have to accumulate the users changes.
You might have to validate across fields.
You might have to validate on the server.
You might have to hold changes in a pending state until the user confirms them <em>as a group</em> or
cancels and reverts all changes.</p>

<p translation-result="">当用户要导航到外面时，该怎么处理这些既没有审核通过又没有保存过的改动呢？
你不能马上离开，不在乎丢失这些改动的风险，那显然是一种糟糕的用户体验。</p><p translation-origin="off">What do you do about unapproved, unsaved changes when the user navigates away?
You can't just leave and risk losing the user's changes; that would be a terrible experience.</p>

<p translation-result="">最好能暂停，并让用户决定该怎么做。
如果用户选择了取消，你就留下来，并允许更多改动。
如果用户选择了确认，那就进行保存。</p><p translation-origin="off">It's better to pause and let the user decide what to do.
If the user cancels, you'll stay put and allow more changes.
If the user approves, the app can save.</p>

<p translation-result="">在保存成功之前，你还可以继续推迟导航。如果你让用户立即移到下一个界面，而保存却失败了（可能因为数据不符合有效性规则），你就会丢失该错误的上下文环境。</p><p translation-origin="off">You still might delay navigation until the save succeeds.
If you let the user move to the next screen immediately and
the save were to fail (perhaps the data are ruled invalid), you would lose the context of the error.</p>

<p translation-result="">在等待服务器的答复时，你没法阻塞它 —— 这在浏览器中是不可能的。
你只能用异步的方式在等待服务器答复之前先停止导航。</p><p translation-origin="off">You can't block while waiting for the server—that's not possible in a browser.
You need to stop the navigation while you wait, asynchronously, for the server
to return with its answer.</p>

<p translation-result="">你需要 <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> 守卫。</p><p translation-origin="off">You need the <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> guard.</p>

<a id="cancel-save"></a>
<h3 translation-result="" id="cancel-and-save">取消与保存<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#cancel-and-save"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="cancel-and-save">Cancel and save<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#cancel-and-save"><i class="material-icons">link</i></a></h3>

<p translation-result="">这个范例应用不会与服务器通讯。
幸运的是，你有另一种方式来演示异步的路由器钩子。</p><p translation-origin="off">The sample application doesn't talk to a server.
Fortunately, you have another way to demonstrate an asynchronous router hook.</p>

<p translation-result="">用户在 <code>CrisisDetailComponent</code> 中更新危机信息。
与 <code>HeroDetailComponent</code> 不同，用户的改动不会立即更新危机的实体对象。当用户按下了 <em>Save</em> 按钮时，应用就更新这个实体对象；如果按了 <em>Cancel</em> 按钮，那就放弃这些更改。</p><p translation-origin="off">Users update crisis information in the <code>CrisisDetailComponent</code>.
Unlike the <code>HeroDetailComponent</code>, the user changes do not update the crisis entity immediately.
Instead, the app updates the entity when the user presses the <em>Save</em> button and
discards the changes when the user presses the <em>Cancel</em> button.</p>

<p translation-result="">这两个按钮都会在保存或取消之后导航回危机列表。</p><p translation-origin="off">Both buttons navigate back to the crisis list after save or cancel.</p>

<code-example path="router/src/app/crisis-center/crisis-detail.component.ts" linenums="false" title="src/app/crisis-center/crisis-detail.component.ts (cancel and save methods)" region="cancel-save" ng-version="6.0.0"><div style="display: none">
cancel() {
  this.gotoCrises();
}

save() {
  this.crisis.name = this.editName;
  this.gotoCrises();
}

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-detail.component.ts (cancel and save methods)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-detail.component.ts (cancel and save methods)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">cancel</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">gotoCrises</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

save</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">crisis</span><span class="pun">.</span><span class="pln">name </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">editName</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">gotoCrises</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果用户尝试不保存或撤销就导航到外面该怎么办？
用户可以按浏览器的后退按钮，或点击英雄的链接。
这些操作都会触发导航。本应用应该自动保存或取消吗？</p><p translation-origin="off">What if the user tries to navigate away without saving or canceling?
The user could push the browser back button or click the heroes link.
Both actions trigger a navigation.
Should the app save or cancel automatically?</p>

<p translation-result="">都不行。应用应该弹出一个确认对话框来要求用户明确做出选择，该对话框会<em>用异步的方式等用户做出选择</em>。</p><p translation-origin="off">This demo does neither. Instead, it asks the user to make that choice explicitly
in a confirmation dialog box that <em>waits asynchronously for the user's
answer</em>.</p>

<div class="l-sub-section">
<p translation-result="">你也能用同步的方式等用户的答复，阻塞代码。但如果能用异步的方式等待用户的答复，应用就会响应性更好，也能同时做别的事。异步等待用户的答复和等待服务器的答复是类似的。</p><p translation-origin="off">You could wait for the user's answer with synchronous, blocking code.
The app will be more responsive—and can do other work—by
waiting for the user's answer asynchronously. Waiting for the user asynchronously
is like waiting for the server asynchronously.</p>

</div>
<p translation-result=""><code>DialogService</code>（为了在应用级使用，已经注入到了 <code>AppModule</code>）就可以做到这些。</p><p translation-origin="off">The <code>DialogService</code>, provided in the <code>AppModule</code> for app-wide use, does the asking.</p>

<p translation-result="">它返回<a href="http://exploringjs.com/es6/ch_promises.html">promise</a>，当用户最终决定了如何去做时，它就会被<em>解析</em> —— 或者决定放弃更改直接导航离开（<code>true</code>），或者保留未完成的修改，留在危机编辑器中（<code>false</code>）。</p><p translation-origin="off">It returns an <code>Observable</code> that <em>resolves</em> when the user eventually decides what to do: either
to discard changes and navigate away (<code>true</code>) or to preserve the pending changes and stay in the crisis editor (<code>false</code>).</p>

<a id="CanDeactivate"></a>
<p translation-result="">创建了一个 <code>Guard</code>，它将检查这个（任意）组件中是否有 <code>canDeactivate()</code> 函数。
<code>CrisisDetailComponent</code> 就会有这个方法。
但是该守卫并不需要知道 <code>CrisisDetailComponent</code> 确认退出激活状态的详情。
它只需要检查该组件是否有一个 <code>canDeactivate()</code> 方法，并调用它。
这就让该守卫可以复用。</p><p translation-origin="off">Create a <em>guard</em> that checks for the presence of a <code>canDeactivate()</code> method in a component—any component.
The <code>CrisisDetailComponent</code> will have this method.
But the guard doesn't have to know that.
The guard shouldn't know the details of any component's deactivation method.
It need only detect that the component has a <code>canDeactivate()</code> method and call it.
This approach makes the guard reusable.</p>

<code-example path="router/src/app/can-deactivate-guard.service.ts" title="src/app/can-deactivate-guard.service.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }    from '@angular/core';
import { <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a> } from '@angular/router';
import { Observable }    from 'rxjs';

export interface CanComponentDeactivate {
 canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;
}

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CanDeactivateGuard implements <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a>&lt;CanComponentDeactivate&gt; {
  canDeactivate(component: CanComponentDeactivate) {
    return component.canDeactivate ? component.canDeactivate() : true;
  }
}


</div><!----><header class="ng-star-inserted">src/app/can-deactivate-guard.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/can-deactivate-guard.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor"><span class="typ">CanDeactivate</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">CanComponentDeactivate</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln"> canDeactivate</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;boolean&gt;</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="typ">Promise</span><span class="str">&lt;boolean&gt;</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pun">;</span></li><li class="L6"><span class="pun">}</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span></li><li class="L9"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CanDeactivateGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor"><span class="typ">CanDeactivate</span></a><span class="pun">&lt;</span><span class="typ">CanComponentDeactivate</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">  canDeactivate</span><span class="pun">(</span><span class="pln">component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CanComponentDeactivate</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> component</span><span class="pun">.</span><span class="pln">canDeactivate </span><span class="pun">?</span><span class="pln"> component</span><span class="pun">.</span><span class="pln">canDeactivate</span><span class="pun">()</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">另外，你也可以为 <code>CrisisDetailComponent</code> 创建一个特定的 <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> 守卫。
在需要访问外部信息时，<code>canDeactivate()</code> 方法为你提供了组件、<code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> 和 <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code> 的当前实例。
如果只想为这个组件使用该守卫，并且需要获取该组件属性或确认路由器是否允许从该组件导航出去时，这会非常有用。</p><p translation-origin="off">Alternatively, you could make a component-specific <code><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a></code> guard for the <code>CrisisDetailComponent</code>.
The <code>canDeactivate()</code> method provides you with the current
instance of the <code>component</code>, the current <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code>,
and <code><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a></code> in case you needed to access
some external information. This would be useful if you only
wanted to use this guard for this component and needed to get
the component's properties or confirm whether the router should allow navigation away from it.</p>

<code-example path="router/src/app/can-deactivate-guard.service.1.ts" linenums="false" title="src/app/can-deactivate-guard.service.ts (component-specific)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }           from '@angular/core';
import { Observable }           from 'rxjs';
import { <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a>,
         <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
         <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a> }  from '@angular/router';

import { CrisisDetailComponent } from './crisis-center/crisis-detail.component';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CanDeactivateGuard implements <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a>&lt;CrisisDetailComponent&gt; {

  canDeactivate(
    component: CrisisDetailComponent,
    route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
    <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>
  ): Observable&lt;boolean&gt; | boolean {
    // Get the Crisis Center ID
    console.log(route.paramMap.get('id'));

    // Get the current URL
    console.log(state.url);

    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged
    if (!component.crisis || component.crisis.name === component.editName) {
      return true;
    }
    // Otherwise ask the user with the dialog service and return its
    // observable which resolves to true or false when the user decides
    return component.dialogService.confirm('Discard changes?');
  }
}


</div><!----><header class="ng-star-inserted">src/app/can-deactivate-guard.service.ts (component-specific)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/can-deactivate-guard.service.ts (component-specific)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor"><span class="typ">CanDeactivate</span></a><span class="pun">,</span><span class="pln">
         </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln">
         </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center/crisis-detail.component'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CanDeactivateGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor"><span class="typ">CanDeactivate</span></a><span class="pun">&lt;</span><span class="typ">CrisisDetailComponent</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  canDeactivate</span><span class="pun">(</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pun">,</span><span class="pln">
    route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pln">
  </span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;boolean&gt;</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Get the Crisis Center ID</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">route</span><span class="pun">.</span><span class="pln">paramMap</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'id'</span><span class="pun">));</span><span class="pln">

    </span><span class="com">// Get the current URL</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">state</span><span class="pun">.</span><span class="pln">url</span><span class="pun">);</span><span class="pln">

    </span><span class="com">// Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="pln">component</span><span class="pun">.</span><span class="pln">crisis </span><span class="pun">||</span><span class="pln"> component</span><span class="pun">.</span><span class="pln">crisis</span><span class="pun">.</span><span class="pln">name </span><span class="pun">===</span><span class="pln"> component</span><span class="pun">.</span><span class="pln">editName</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
    </span><span class="com">// Otherwise ask the user with the dialog service and return its</span><span class="pln">
    </span><span class="com">// observable which resolves to true or false when the user decides</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> component</span><span class="pun">.</span><span class="pln">dialogService</span><span class="pun">.</span><span class="pln">confirm</span><span class="pun">(</span><span class="str">'Discard changes?'</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">看看 <code>CrisisDetailComponent</code> 组件，它已经实现了对未保存的更改进行确认的工作流。</p><p translation-origin="off">Looking back at the <code>CrisisDetailComponent</code>, it implements the confirmation workflow for unsaved changes.</p>

<code-example path="router/src/app/crisis-center/crisis-detail.component.ts" linenums="false" title="src/app/crisis-center/crisis-detail.component.ts (excerpt)" region="canDeactivate" ng-version="6.0.0"><div style="display: none">
canDeactivate(): Observable&lt;boolean&gt; | boolean {
  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged
  if (!this.crisis || this.crisis.name === this.editName) {
    return true;
  }
  // Otherwise ask the user with the dialog service and return its
  // observable which resolves to true or false when the user decides
  return this.dialogService.confirm('Discard changes?');
}

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">canDeactivate</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;boolean&gt;</span><span class="pln"> </span><span class="pun">|</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged</span><span class="pln">
  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(!</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">crisis </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">crisis</span><span class="pun">.</span><span class="pln">name </span><span class="pun">===</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">editName</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
  </span><span class="com">// Otherwise ask the user with the dialog service and return its</span><span class="pln">
  </span><span class="com">// observable which resolves to true or false when the user decides</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">dialogService</span><span class="pun">.</span><span class="pln">confirm</span><span class="pun">(</span><span class="str">'Discard changes?'</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，<code>canDeactivate</code> 方法<em>可以</em>同步返回，如果没有危机，或者没有未定的修改，它就立即返回 <code>true</code>。但是它也可以返回一个承诺（<code>Promise</code>）或可观察对象（<code>Observable</code>），路由器将等待它们被解析为真值（继续导航）或假值（留下）。</p><p translation-origin="off">Notice that the <code>canDeactivate()</code> method <em>can</em> return synchronously;
it returns <code>true</code> immediately if there is no crisis or there are no pending changes.
But it can also return a <code>Promise</code> or an <code>Observable</code> and the router will wait for that
to resolve to truthy (navigate) or falsy (stay put).</p>

<p translation-result="">往 <code>crisis-center.routing.module.ts</code> 的危机详情路由中用 <code>canDeactivate</code> 数组添加一个 <code>Guard</code>（守卫）。</p><p translation-origin="off">Add the <code>Guard</code> to the crisis detail route in <code>crisis-center-routing.module.ts</code> using the <code>canDeactivate</code> array property.</p>

<code-example path="router/src/app/crisis-center/crisis-center-routing.module.3.ts" linenums="false" title="src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { CrisisCenterHomeComponent } from './crisis-center-home.component';
import { CrisisListComponent }       from './crisis-list.component';
import { CrisisCenterComponent }     from './crisis-center.component';
import { CrisisDetailComponent }     from './crisis-detail.component';

import { CanDeactivateGuard }    from '../can-deactivate-guard.service';

const crisisCenterRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: '',
    redirectTo: '/crisis-center',
    pathMatch: 'full'
  },
  {
    path: 'crisis-center',
    component: CrisisCenterComponent,
    children: [
      {
        path: '',
        component: CrisisListComponent,
        children: [
          {
            path: ':id',
            component: CrisisDetailComponent,
            canDeactivate: [CanDeactivateGuard]
          },
          {
            path: '',
            component: CrisisCenterHomeComponent
          }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(crisisCenterRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class CrisisCenterRoutingModule { }


</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center-routing.module.ts (can deactivate guard)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center-home.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-center.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-detail.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CanDeactivateGuard</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../can-deactivate-guard.service'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> crisisCenterRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
    redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/crisis-center'</span><span class="pun">,</span><span class="pln">
    pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterComponent</span><span class="pun">,</span><span class="pln">
    children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisListComponent</span><span class="pun">,</span><span class="pln">
        children</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">':id'</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisDetailComponent</span><span class="pun">,</span><span class="pln">
            canDeactivate</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">CanDeactivateGuard</span><span class="pun">]</span><span class="pln">
          </span><span class="pun">},</span><span class="pln">
          </span><span class="pun">{</span><span class="pln">
            path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
            component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisCenterHomeComponent</span><span class="pln">
          </span><span class="pun">}</span><span class="pln">
        </span><span class="pun">]</span><span class="pln">
      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">crisisCenterRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisCenterRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">还要把这个 <code>Guard</code> 添加到 <code>AppRoutingModule</code> 的 <code>providers</code> 中去，以便 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 可以在导航过程中注入它。</p><p translation-origin="off">Add the <code>Guard</code> to the main <code>AppRoutingModule</code> <code>providers</code> array so the
<code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> can inject it during the navigation process.</p>

<code-example path="router/src/app/app-routing.module.4.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> }  from '@angular/router';

import { ComposeMessageComponent } from './compose-message.component';
import { CanDeactivateGuard }      from './can-deactivate-guard.service';
import { PageNotFoundComponent }   from './not-found.component';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'compose',
    component: ComposeMessageComponent,
    outlet: 'popup'
  },
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      { enableTracing: true } // &lt;-- debugging purposes only
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CanDeactivateGuard
  ]
})
export class AppRoutingModule {}


</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./compose-message.component'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CanDeactivateGuard</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./can-deactivate-guard.service'</span><span class="pun">;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">  </span><span class="pun">{</span></li><li class="L9"><span class="pln">    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'compose'</span><span class="pun">,</span></li><li class="L0"><span class="pln">    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pun">,</span></li><li class="L1"><span class="pln">    outlet</span><span class="pun">:</span><span class="pln"> </span><span class="str">'popup'</span></li><li class="L2"><span class="pln">  </span><span class="pun">},</span></li><li class="L3"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/heroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span></li><li class="L4"><span class="pln">  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span></li><li class="L5"><span class="pun">];</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L8"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L9"><span class="pln">    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span></li><li class="L0"><span class="pln">      appRoutes</span><span class="pun">,</span></li><li class="L1"><span class="pln">      </span><span class="pun">{</span><span class="pln"> enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span></li><li class="L2"><span class="pln">    </span><span class="pun">)</span></li><li class="L3"><span class="pln">  </span><span class="pun">],</span></li><li class="L4"><span class="pln">  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L5"><span class="pln">    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a></li><li class="L6"><span class="pln">  </span><span class="pun">],</span></li><li class="L7"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">    </span><span class="typ">CanDeactivateGuard</span></li><li class="L9"><span class="pln">  </span><span class="pun">]</span></li><li class="L0"><span class="pun">})</span></li><li class="L1"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">{}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">现在，你已经给了用户一个能保护未保存更改的安全守卫。</p><p translation-origin="off">Now you have given the user a safeguard against unsaved changes.</p>

<a id="Resolve"></a>
<a id="resolve-guard"></a>
<h3 translation-result="" id="emresolveem-pre-fetching-component-data"><em>Resolve</em>: 预先获取组件数据<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emresolveem-pre-fetching-component-data"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="resolve-pre-fetching-component-data"><em>Resolve</em>: pre-fetching component data<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#resolve-pre-fetching-component-data"><i class="material-icons">link</i></a></h3>

<p translation-result="">在 <code>Hero Detail</code> 和 <code>Crisis Detail</code> 中，它们等待路由读取完对应的英雄和危机。</p><p translation-origin="off">In the <code>Hero Detail</code> and <code>Crisis Detail</code>, the app waited until the route was activated to fetch the respective hero or crisis.</p>

<p translation-result="">这种方式没有问题，但是它们还有进步的空间。
如果你在使用真实 api，很有可能数据返回有延迟，导致无法即时显示。
在这种情况下，直到数据到达前，显示一个空的组件不是最好的用户体验。</p><p translation-origin="off">This worked well, but there's a better way.
If you were using a real world API, there might be some delay before the data to display is returned from the server.
You don't want to display a blank component while waiting for the data.</p>

<p translation-result="">最好预先从服务器上获取完数据，这样在路由激活的那一刻数据就准备好了。
还要在路由到此组件之前处理好错误。
但当某个 <code>id</code> 无法对应到一个危机详情时，就没办法处理它。
这时最好把用户带回到“危机列表”中，那里显示了所有有效的“危机”。</p><p translation-origin="off">It's preferable to pre-fetch data from the server so it's ready the
moment the route is activated. This also allows you to handle errors before routing to the component.
There's no point in navigating to a crisis detail for an <code>id</code> that doesn't have a record.
It'd be better to send the user back to the <code>Crisis List</code> that shows only valid crisis centers.</p>

<p translation-result="">总之，你希望的是只有当所有必要数据都已经拿到之后，才渲染这个路由组件。</p><p translation-origin="off">In summary, you want to delay rendering the routed component until all necessary data have been fetched.</p>

<p translation-result="">你需要 <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> 守卫。</p><p translation-origin="off">You need a <em>resolver</em>.</p>

<a id="fetch-before-navigating"></a>
<h3 translation-result="" id="fetch-data-before-navigating">导航前预先加载路由信息<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#fetch-data-before-navigating"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="fetch-data-before-navigating">Fetch data before navigating<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#fetch-data-before-navigating"><i class="material-icons">link</i></a></h3>

<p translation-result="">目前，<code>CrisisDetailComponent</code> 会接收选中的危机。
如果该危机没有找到，它就会导航回危机列表视图。</p><p translation-origin="off">At the moment, the <code>CrisisDetailComponent</code> retrieves the selected crisis.
If the crisis is not found, it navigates back to the crisis list view.</p>

<p translation-result="">如果能在该路由将要激活时提前处理了这个问题，那么用户体验会更好。
<code>CrisisDetailResolver</code> 服务可以接收一个 <code>Crisis</code>，而如果这个 <code>Crisis</code> 不存在，就会在激活该路由并创建 <code>CrisisDetailComponent</code> 之前先行离开。</p><p translation-origin="off">The experience might be better if all of this were handled first, before the route is activated.
A <code>CrisisDetailResolver</code> service could retrieve a <code>Crisis</code> or navigate away if the <code>Crisis</code> does not exist
<em>before</em> activating the route and creating the <code>CrisisDetailComponent</code>.</p>

<p translation-result="">在“危机中心”特性区中创建 <code>crisis-detail-resolver.service.ts</code> 文件。</p><p translation-origin="off">Create the <code>crisis-detail-resolver.service.ts</code> file within the <code>Crisis Center</code> feature area.</p>

<code-example path="router/src/app/crisis-center/crisis-detail-resolver.service.ts" title="src/app/crisis-center/crisis-detail-resolver.service.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>, <a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a>, <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>,
         <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a> } from '@angular/router';
import { Observable }             from 'rxjs';
import { map, take }              from 'rxjs/operators';

import { Crisis, CrisisService }  from './crisis.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CrisisDetailResolver implements <a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a>&lt;Crisis&gt; {
  constructor(private cs: CrisisService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  resolve(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {
    let id = route.paramMap.get('id');

    return this.cs.getCrisis(id).pipe(
      take(1),
      map(crisis =&gt; {
        if (crisis) {
          return crisis;
        } else { // id not found
          this.router.navigate(['/crisis-center']);
          return null;
        }
      })
    );
  }
}


</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-detail-resolver.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-detail-resolver.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Resolve" class="code-anchor"><span class="typ">Resolve</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">,</span></li><li class="L2"><span class="pln">         </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> map</span><span class="pun">,</span><span class="pln"> take </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pun">,</span><span class="pln"> </span><span class="typ">CrisisService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis.service'</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span></li><li class="L9"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisDetailResolver</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/Resolve" class="code-anchor"><span class="typ">Resolve</span></a><span class="pun">&lt;</span><span class="typ">Crisis</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> cs</span><span class="pun">:</span><span class="pln"> </span><span class="typ">CrisisService</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="pln">  resolve</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Crisis</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">    </span><span class="kwd">let</span><span class="pln"> id </span><span class="pun">=</span><span class="pln"> route</span><span class="pun">.</span><span class="pln">paramMap</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'id'</span><span class="pun">);</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">cs</span><span class="pun">.</span><span class="pln">getCrisis</span><span class="pun">(</span><span class="pln">id</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span></li><li class="L6"><span class="pln">      take</span><span class="pun">(</span><span class="lit">1</span><span class="pun">),</span></li><li class="L7"><span class="pln">      map</span><span class="pun">(</span><span class="pln">crisis </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">crisis</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L9"><span class="pln">          </span><span class="kwd">return</span><span class="pln"> crisis</span><span class="pun">;</span></li><li class="L0"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// id not found</span></li><li class="L1"><span class="pln">          </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/crisis-center'</span><span class="pun">]);</span></li><li class="L2"><span class="pln">          </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">;</span></li><li class="L3"><span class="pln">        </span><span class="pun">}</span></li><li class="L4"><span class="pln">      </span><span class="pun">})</span></li><li class="L5"><span class="pln">    </span><span class="pun">);</span></li><li class="L6"><span class="pln">  </span><span class="pun">}</span></li><li class="L7"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">在 <code>CrisisDetailComponent.ngOnInit</code> 中拿到相关的危机检索逻辑，并且把它们移到 <code>CrisisDetailResolver</code> 中。
导入 <code>Crisis</code> 模型、<code>CrisisService</code> 和 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 以便让你可以在找不到指定的危机时导航到别处。</p><p translation-origin="off">Take the relevant parts of the crisis retrieval logic in <code>CrisisDetailComponent.ngOnInit</code>
and move them into the <code>CrisisDetailResolver</code>.
Import the <code>Crisis</code> model, <code>CrisisService</code>, and the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>
so you can navigate elsewhere if you can't fetch the crisis.</p>

<p translation-result="">为了更明确一点，可以实现一个带有 <code>Crisis</code> 类型的 <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> 接口。</p><p translation-origin="off">Be explicit. Implement the <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> interface with a type of <code>Crisis</code>.</p>

<p translation-result="">注入 <code>CrisisService</code> 和 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>，并实现 <code>resolve()</code> 方法。
该方法可以返回一个 <code>Promise</code>、一个 <code>Observable</code> 来支持异步方式，或者直接返回一个值来支持同步方式。</p><p translation-origin="off">Inject the <code>CrisisService</code> and <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> and implement the <code>resolve()</code> method.
That method could return a <code>Promise</code>, an <code>Observable</code>, or a synchronous return value.</p>

<p translation-result=""><code>CrisisService.getCrisis</code> 方法返回了一个可观察对象，这是为了防止在数据获取完毕前加载路由。
如果它没有返回一个有效的 <code>Crisis</code>，就把用户导航回 <code>CrisisListComponent</code>，并取消以前到 <code>CrisisDetailComponent</code> 尚未完成的导航。</p><p translation-origin="off">The <code>CrisisService.getCrisis</code> method returns an observable, in order to prevent the route from loading until the data is fetched.
The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> guards require an observable to <code>complete</code>, meaning it has emitted all
of its values. You use the <code>take</code> operator with an argument of <code>1</code> to ensure that the
observable completes after retrieving the first value from the observable returned by the
<code>getCrisis</code> method. If it doesn't return a valid <code>Crisis</code>, navigate the user back to the <code>CrisisListComponent</code>,
canceling the previous in-flight navigation to the <code>CrisisDetailComponent</code>.</p>

<p translation-result="">把这个解析器（resolver）导入到 <code>crisis-center-routing.module.ts</code> 中，并往 <code>CrisisDetailComponent</code> 的路由配置中添加一个 <code>resolve</code> 对象。</p><p translation-origin="off">Import this resolver in the <code>crisis-center-routing.module.ts</code>
and add a <code>resolve</code> object to the <code>CrisisDetailComponent</code> route configuration.</p>

<p translation-result="">别忘了把 <code>CrisisDetailResolver</code> 服务添加到 <code>CrisisCenterRoutingModule</code> 的 <code>providers</code> 数组中。</p><p translation-origin="off">Remember to add the <code>CrisisDetailResolver</code> service to the <code>CrisisCenterRoutingModule</code>'s <code>providers</code> array.</p>

<code-example path="router/src/app/crisis-center/crisis-center-routing.module.4.ts" linenums="false" title="src/app/crisis-center/crisis-center-routing.module.ts (resolver)" region="crisis-detail-resolver" ng-version="6.0.0"><div style="display: none">
import { CrisisDetailResolver }   from './crisis-detail-resolver.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(crisisCenterRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CrisisDetailResolver
  ]
})
export class CrisisCenterRoutingModule { }

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-center-routing.module.ts (resolver)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-center-routing.module.ts (resolver)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CrisisDetailResolver</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./crisis-detail-resolver.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">crisisCenterRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">CrisisDetailResolver</span><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">CrisisCenterRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>CrisisDetailComponent</code> 不应该再去获取这个危机的详情。
把 <code>CrisisDetailComponent</code> 改成从 <code>ActivatedRoute.data.crisis</code> 属性中获取危机详情，这正是你重新配置路由的恰当时机。
当 <code>CrisisDetailComponent</code> 要求取得危机详情时，它就已经在那里了。</p><p translation-origin="off">The <code>CrisisDetailComponent</code> should no longer fetch the crisis.
Update the <code>CrisisDetailComponent</code> to get the crisis from the  <code>ActivatedRoute.data.crisis</code> property instead;
that's where you said it should be when you re-configured the route.
It will be there when the <code>CrisisDetailComponent</code> ask for it.</p>

<code-example path="router/src/app/crisis-center/crisis-detail.component.ts" linenums="false" title="src/app/crisis-center/crisis-detail.component.ts (ngOnInit v2)" region="ngOnInit" ng-version="6.0.0"><div style="display: none">
ngOnInit() {
  this.route.data
    .subscribe((data: { crisis: Crisis }) =&gt; {
      this.editName = data.crisis.name;
      this.crisis = data.crisis;
    });
}

</div><!----><header class="ng-star-inserted">src/app/crisis-center/crisis-detail.component.ts (ngOnInit v2)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/crisis-center/crisis-detail.component.ts (ngOnInit v2)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route</span><span class="pun">.</span><span class="pln">data
    </span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">((</span><span class="pln">data</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> crisis</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Crisis</span><span class="pln"> </span><span class="pun">})</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">editName </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">crisis</span><span class="pun">.</span><span class="pln">name</span><span class="pun">;</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">crisis </span><span class="pun">=</span><span class="pln"> data</span><span class="pun">.</span><span class="pln">crisis</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><strong>两个关键点</strong></p><p translation-origin="off"><strong>Three critical points</strong></p>

<ol>
<li>
<p translation-result="">   路由器的这个 <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> 接口是可选的。<code>CrisisDetailResolver</code> 没有继承自某个基类。路由器只要找到了这个方法，就会调用它。</p><p translation-origin="off">The router's <code><a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a></code> interface is optional.
The <code>CrisisDetailResolver</code> doesn't inherit from a base class.
The router looks for that method and calls it if found.</p>

</li>
<li>
<p translation-result="">   要依赖路由器调用此守卫。不必关心用户用哪种方式导航离开，这是路由器的工作。你只要写出这个类，等路由器从那里取出它就可以了。</p><p translation-origin="off">Rely on the router to call the resolver.
Don't worry about all the ways that the user  could navigate away.
That's the router's job. Write this class and let the router take it from there.</p>

</li>
<li>
<p translation-result="">   由路由器提供的 Observable <em>必须</em> 完成（complete），否则导航不会继续。</p><p translation-origin="off">The observable provided to the Router <em>must</em> complete.
If the observable does not complete, the navigation will not continue.</p>

</li>
</ol>
<p translation-result="">本里程碑中与<em>危机中心</em>有关的代码如下：</p><p translation-origin="off">The relevant <em>Crisis Center</em> code for this milestone follows.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="app.component.ts" path="router/src/app/app.component.6.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  template: `
    &lt;h1 class="title"&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/heroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/admin" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Admin&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/login" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Login&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a> name="popup"&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AppComponent {
}


</code-pane>

  <code-pane title="crisis-center-home.component.ts" path="router/src/app/crisis-center/crisis-center-home.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;p&gt;Welcome to the Crisis Center&lt;/p&gt;
  `
})
export class CrisisCenterHomeComponent { }


</code-pane>

  <code-pane title="crisis-center.component.ts" path="router/src/app/crisis-center/crisis-center.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class CrisisCenterComponent { }


</code-pane>

  <code-pane title="crisis-center-routing.module.ts" path="router/src/app/crisis-center/crisis-center-routing.module.4.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { CrisisCenterHomeComponent } from './crisis-center-home.component';
import { CrisisListComponent }       from './crisis-list.component';
import { CrisisCenterComponent }     from './crisis-center.component';
import { CrisisDetailComponent }     from './crisis-detail.component';

import { CanDeactivateGuard }     from '../can-deactivate-guard.service';

import { CrisisDetailResolver }   from './crisis-detail-resolver.service';

const crisisCenterRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: '',
    redirectTo: '/crisis-center',
    pathMatch: 'full'
  },
  {
    path: 'crisis-center',
    component: CrisisCenterComponent,
    children: [
      {
        path: '',
        component: CrisisListComponent,
        children: [
          {
            path: ':id',
            component: CrisisDetailComponent,
            canDeactivate: [CanDeactivateGuard],
            resolve: {
              crisis: CrisisDetailResolver
            }
          },
          {
            path: '',
            component: CrisisCenterHomeComponent
          }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(crisisCenterRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CrisisDetailResolver
  ]
})
export class CrisisCenterRoutingModule { }

</code-pane>

  <code-pane title="crisis-list.component.ts" path="router/src/app/crisis-center/crisis-list.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> }        from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a> } from '@angular/router';

import { Crisis, CrisisService } from './crisis.service';
import { Observable }            from 'rxjs';
import { switchMap }             from 'rxjs/operators';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
    &lt;ul class="items"&gt;
      &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let crisis of crises$ | <a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>"
        [class.selected]="crisis.id === selectedId"&gt;
        &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="[crisis.id]"&gt;
          &lt;span class="badge"&gt;{{ crisis.id }}&lt;/span&gt;{{ crisis.name }}
        &lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class CrisisListComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  crises$: Observable&lt;Crisis[]&gt;;
  selectedId: number;

  constructor(
    private service: CrisisService,
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>
  ) {}

  ngOnInit() {
    this.crises$ = this.route.paramMap.pipe(
      switchMap((params: <a href="https://angular.cn/api/router/ParamMap" class="code-anchor">ParamMap</a>) =&gt; {
        this.selectedId = +params.get('id');
        return this.service.getCrises();
      })
    );
  }
}


</code-pane>

  <code-pane title="crisis-detail.component.ts" path="router/src/app/crisis-center/crisis-detail.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a>, <a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>, <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> } from '@angular/router';
import { Observable } from 'rxjs';

import { slideInDownAnimation }   from '../animations';
import { Crisis }         from './crisis.service';
import { DialogService }  from '../dialog.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template: `
  &lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="crisis"&gt;
    &lt;h3&gt;"{{ editName }}"&lt;/h3&gt;
    &lt;div&gt;
      &lt;label&gt;Id: &lt;/label&gt;{{ crisis.id }}&lt;/div&gt;
    &lt;div&gt;
      &lt;label&gt;Name: &lt;/label&gt;
      &lt;input [(<a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a>)]="editName" placeholder="name"/&gt;
    &lt;/div&gt;
    &lt;p&gt;
      &lt;button (click)="save()"&gt;Save&lt;/button&gt;
      &lt;button (click)="cancel()"&gt;Cancel&lt;/button&gt;
    &lt;/p&gt;
  &lt;/div&gt;
  `,
  styles: ['input {width: 20em}'],
  animations: [ slideInDownAnimation ]
})
export class CrisisDetailComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('@routeAnimation') routeAnimation = true;
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.display')   display = 'block';
  @<a href="https://angular.cn/api/core/HostBinding" class="code-anchor">HostBinding</a>('style.position')  position = 'absolute';

  crisis: Crisis;
  editName: string;

  constructor(
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>,
    private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
    public dialogService: DialogService
  ) {}

  ngOnInit() {
    this.route.data
      .subscribe((data: { crisis: Crisis }) =&gt; {
        this.editName = data.crisis.name;
        this.crisis = data.crisis;
      });
  }

  cancel() {
    this.gotoCrises();
  }

  save() {
    this.crisis.name = this.editName;
    this.gotoCrises();
  }

  canDeactivate(): Observable&lt;boolean&gt; | boolean {
    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged
    if (!this.crisis || this.crisis.name === this.editName) {
      return true;
    }
    // Otherwise ask the user with the dialog service and return its
    // observable which resolves to true or false when the user decides
    return this.dialogService.confirm('Discard changes?');
  }

  gotoCrises() {
    let crisisId = this.crisis ? this.crisis.id : null;
    // Pass along the crisis id if available
    // so that the CrisisListComponent can select that crisis.
    // Add <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> totally useless `foo` parameter for kicks.
    // Relative navigation back to the crises
    this.router.navigate(['../', { id: crisisId, foo: 'foo' }], { relativeTo: this.route });
  }
}


</code-pane>

  <code-pane title="crisis-detail-resolver.service.ts" path="router/src/app/crisis-center/crisis-detail-resolver.service.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>, <a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a>, <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>,
         <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a> } from '@angular/router';
import { Observable }             from 'rxjs';
import { map, take }              from 'rxjs/operators';

import { Crisis, CrisisService }  from './crisis.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CrisisDetailResolver implements <a href="https://angular.cn/api/router/Resolve" class="code-anchor">Resolve</a>&lt;Crisis&gt; {
  constructor(private cs: CrisisService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  resolve(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): Observable&lt;Crisis&gt; {
    let id = route.paramMap.get('id');

    return this.cs.getCrisis(id).pipe(
      take(1),
      map(crisis =&gt; {
        if (crisis) {
          return crisis;
        } else { // id not found
          this.router.navigate(['/crisis-center']);
          return null;
        }
      })
    );
  }
}


</code-pane>

  <code-pane title="crisis.service.ts" path="router/src/app/crisis-center/crisis.service.ts">
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';

export class Crisis {
  constructor(public id: number, public name: string) { }
}

const CRISES = [
  new Crisis(1, 'Dragon Burning Cities'),
  new Crisis(2, 'Sky Rains Great White Sharks'),
  new Crisis(3, 'Giant Asteroid Heading For Earth'),
  new Crisis(4, 'Procrastinators Meeting Delayed Again'),
];

import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CrisisService {
  <a href="https://angular.cn/api/upgrade/static" class="code-anchor">static</a> nextCrisisId = 100;
  private crises$: BehaviorSubject&lt;Crisis[]&gt; = new BehaviorSubject&lt;Crisis[]&gt;(CRISES);

  getCrises() { return this.crises$; }

  getCrisis(id: number | string) {
    return this.getCrises().pipe(
      map(crises =&gt; crises.find(crisis =&gt; crisis.id === +id))
    );
  }

}


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-0" tabindex="0" aria-controls="mat-tab-content-13-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-1" tabindex="-1" aria-controls="mat-tab-content-13-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-center-home.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-2" tabindex="-1" aria-controls="mat-tab-content-13-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-center.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-3" tabindex="-1" aria-controls="mat-tab-content-13-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-center-routing.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-4" tabindex="-1" aria-controls="mat-tab-content-13-4" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-5" tabindex="-1" aria-controls="mat-tab-content-13-5" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-detail.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-6" tabindex="-1" aria-controls="mat-tab-content-13-6" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-detail-resolver.service.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-13-7" tabindex="-1" aria-controls="mat-tab-content-13-7" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis.service.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 161px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-45 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-13-0" aria-labelledby="mat-tab-label-13-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L3"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span></li><li class="L4"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L5"><span class="str">    &lt;h1 class="title"&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;</span></li><li class="L6"><span class="str">    &lt;nav&gt;</span></li><li class="L7"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L8"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/heroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L9"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/admin" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Admin&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L0"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/login" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Login&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L1"><span class="str">      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;</span></li><li class="L2"><span class="str">    &lt;/nav&gt;</span></li><li class="L3"><span class="str">    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;</span></li><li class="L4"><span class="str">    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str"> name="popup"&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;</span></li><li class="L5"><span class="str">  `</span></li><li class="L6"><span class="pun">})</span></li><li class="L7"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-46 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-1" aria-labelledby="mat-tab-label-13-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-47 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-2" aria-labelledby="mat-tab-label-13-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-48 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-3" aria-labelledby="mat-tab-label-13-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-49 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-4" aria-labelledby="mat-tab-label-13-4"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-50 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-5" aria-labelledby="mat-tab-label-13-5"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-51 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-6" aria-labelledby="mat-tab-label-13-6"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-52 ng-star-inserted" role="tabpanel" id="mat-tab-content-13-7" aria-labelledby="mat-tab-label-13-7"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="auth-guard.service.ts" path="router/src/app/auth-guard.service.3.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }       from '@angular/core';
import {
  <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
  <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
  <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>,
  <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a>
}                           from '@angular/router';
import { AuthService }      from './auth.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthGuard implements <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a> {
  constructor(private authService: AuthService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  canActivate(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    let url: string = state.url;

    return this.checkLogin(url);
  }

  canActivateChild(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    return this.canActivate(route, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>);
  }

  checkLogin(url: string): boolean {
    if (this.authService.isLoggedIn) { return true; }

    // Store the attempted URL for redirecting
    this.authService.redirectUrl = url;

    // Navigate to the login page
    this.router.navigate(['/login']);
    return false;
  }
}


</code-pane>

  <code-pane title="can-deactivate-guard.service.ts" path="router/src/app/can-deactivate-guard.service.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }    from '@angular/core';
import { <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a> } from '@angular/router';
import { Observable }    from 'rxjs';

export interface CanComponentDeactivate {
 canDeactivate: () =&gt; Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean;
}

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class CanDeactivateGuard implements <a href="https://angular.cn/api/router/CanDeactivate" class="code-anchor">CanDeactivate</a>&lt;CanComponentDeactivate&gt; {
  canDeactivate(component: CanComponentDeactivate) {
    return component.canDeactivate ? component.canDeactivate() : true;
  }
}


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-14-0" tabindex="0" aria-controls="mat-tab-content-14-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">auth-guard.service.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-14-1" tabindex="-1" aria-controls="mat-tab-content-14-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">can-deactivate-guard.service.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 179px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-53 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-14-0" aria-labelledby="mat-tab-label-14-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from auth-guard.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">  </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span></li><li class="L3"><span class="pln">  </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span></li><li class="L4"><span class="pln">  </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">,</span></li><li class="L5"><span class="pln">  </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a></li><li class="L6"><span class="pun">}</span><span class="pln">                           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./auth.service'</span><span class="pun">;</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span></li><li class="L0"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> authService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="pln">  canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span></li><li class="L4"><span class="pln">    </span><span class="kwd">let</span><span class="pln"> url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> state</span><span class="pun">.</span><span class="pln">url</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span></li><li class="L7"><span class="pln">  </span><span class="pun">}</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="pln">  canActivateChild</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">);</span></li><li class="L1"><span class="pln">  </span><span class="pun">}</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="pln">  checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span></li><li class="L4"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">isLoggedIn</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">    </span><span class="com">// Store the attempted URL for redirecting</span></li><li class="L7"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">redirectUrl </span><span class="pun">=</span><span class="pln"> url</span><span class="pun">;</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="pln">    </span><span class="com">// Navigate to the login page</span></li><li class="L0"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/login'</span><span class="pun">]);</span></li><li class="L1"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-54 ng-star-inserted" role="tabpanel" id="mat-tab-content-14-1" aria-labelledby="mat-tab-label-14-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="query-parameters"></a>
<a id="fragment"></a>
<h3 translation-result="" id="query-parameters-and-fragments">查询参数及片段<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#query-parameters-and-fragments"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="query-parameters-and-fragments">Query parameters and fragments<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#query-parameters-and-fragments"><i class="material-icons">link</i></a></h3>

<p translation-result="">在这个<a href="https://angular.cn/guide/router#query-parameters">查询参数</a>例子中，你只为路由指定了参数，但是该如何定义一些所有路由中都可用的可选参数呢？
这就该“查询参数”登场了。</p><p translation-origin="off">In the <a href="https://angular.cn/guide/router#optional-route-parameters">route parameters</a> example, you only dealt with parameters specific to
the route, but what if you wanted optional parameters available to all routes?
This is where query parameters come into play.</p>

<p translation-result=""><a href="https://en.wikipedia.org/wiki/Fragment_identifier">片段</a>可以引用页面中带有特定 <code>id</code> 属性的元素.</p><p translation-origin="off"><a href="https://en.wikipedia.org/wiki/Fragment_identifier">Fragments</a> refer to certain elements on the page
identified with an <code>id</code> attribute.</p>

<p translation-result="">修改 <code>AuthGuard</code> 以提供 <code>session_id</code> 查询参数，在导航到其它路由后，它还会存在。</p><p translation-origin="off">Update the <code>AuthGuard</code> to provide a <code>session_id</code> query that will remain after navigating to another route.</p>

<p translation-result="">再添加一个锚点（<code>A</code>）元素，来让你能跳转到页面中的正确位置。</p><p translation-origin="off">Add an <code>anchor</code> element so you can jump to a certain point on the page.</p>

<p translation-result="">为 <code>router.navigate</code> 方法添加一个 <code><a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor">NavigationExtras</a></code> 对象，用来导航到 <code>/login</code> 路由。</p><p translation-origin="off">Add the <code><a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor">NavigationExtras</a></code> object to the <code>router.navigate</code> method that navigates you to the <code>/login</code> route.</p>

<code-example path="router/src/app/auth-guard.service.4.ts" linenums="false" title="src/app/auth-guard.service.ts (v3)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> }       from '@angular/core';
import {
  <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>,
  <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>,
  <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>,
  <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a>,
  <a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor">NavigationExtras</a>
}                           from '@angular/router';
import { AuthService }      from './auth.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class AuthGuard implements <a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a>, <a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor">CanActivateChild</a> {
  constructor(private authService: AuthService, private router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {}

  canActivate(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    let url: string = state.url;

    return this.checkLogin(url);
  }

  canActivateChild(route: <a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor">ActivatedRouteSnapshot</a>, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: <a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor">RouterStateSnapshot</a>): boolean {
    return this.canActivate(route, <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>);
  }

  checkLogin(url: string): boolean {
    if (this.authService.isLoggedIn) { return true; }

    // Store the attempted URL for redirecting
    this.authService.redirectUrl = url;

    // Create <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> dummy session id
    let sessionId = 123456789;

    // Set our navigation extras object
    // that contains our global <a href="https://angular.cn/api/animations/query" class="code-anchor">query</a> params and fragment
    let navigationExtras: <a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor">NavigationExtras</a> = {
      queryParams: { 'session_id': sessionId },
      fragment: 'anchor'
    };

    // Navigate to the login page with extras
    this.router.navigate(['/login'], navigationExtras);
    return false;
  }
}


</div><!----><header class="ng-star-inserted">src/app/auth-guard.service.ts (v3)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth-guard.service.ts (v3)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a><span class="pun">,</span><span class="pln">
  </span><a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor"><span class="typ">NavigationExtras</span></a><span class="pln">
</span><span class="pun">}</span><span class="pln">                           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./auth.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivate" class="code-anchor"><span class="typ">CanActivate</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/CanActivateChild" class="code-anchor"><span class="typ">CanActivateChild</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> authService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AuthService</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">private</span><span class="pln"> router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

  canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> state</span><span class="pun">.</span><span class="pln">url</span><span class="pun">;</span><span class="pln">

    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  canActivateChild</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRouteSnapshot" class="code-anchor"><span class="typ">ActivatedRouteSnapshot</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterStateSnapshot" class="code-anchor"><span class="typ">RouterStateSnapshot</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">canActivate</span><span class="pun">(</span><span class="pln">route</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">isLoggedIn</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

    </span><span class="com">// Store the attempted URL for redirecting</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">authService</span><span class="pun">.</span><span class="pln">redirectUrl </span><span class="pun">=</span><span class="pln"> url</span><span class="pun">;</span><span class="pln">

    </span><span class="com">// Create </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> dummy session id</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> sessionId </span><span class="pun">=</span><span class="pln"> </span><span class="lit">123456789</span><span class="pun">;</span><span class="pln">

    </span><span class="com">// Set our navigation extras object</span><span class="pln">
    </span><span class="com">// that contains our global </span><a href="https://angular.cn/api/animations/query" class="code-anchor"><span class="com">query</span></a><span class="com"> params and fragment</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> navigationExtras</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor"><span class="typ">NavigationExtras</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      queryParams</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="str">'session_id'</span><span class="pun">:</span><span class="pln"> sessionId </span><span class="pun">},</span><span class="pln">
      fragment</span><span class="pun">:</span><span class="pln"> </span><span class="str">'anchor'</span><span class="pln">
    </span><span class="pun">};</span><span class="pln">

    </span><span class="com">// Navigate to the login page with extras</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="str">'/login'</span><span class="pun">],</span><span class="pln"> navigationExtras</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">还可以再导航之间<strong>保留</strong>查询参数和片段，而无需再次再导航中提供。在 <code>LoginComponent</code> 中的 <code>router.navigate</code> 方法中，添加第二个参数，该<strong>对象</strong>提供了 <code>preserveQueryParams</code> 和 <code>preserveFragment</code>，用于传递到当前的查询参数中并为下一个路由提供片段。</p><p translation-origin="off">You can also preserve query parameters and fragments across navigations without having to provide them
again when navigating. In the <code>LoginComponent</code>, you'll add an <em>object</em> as the
second argument in the <code>router.navigate</code> function
and provide the <code>queryParamsHandling</code> and <code>preserveFragment</code> to pass along the current query parameters
and fragment to the next route.</p>

<code-example path="router/src/app/login.component.ts" linenums="false" title="src/app/login.component.ts (preserve)" region="preserve" ng-version="6.0.0"><div style="display: none">
// Set our navigation extras object
// that passes on our global <a href="https://angular.cn/api/animations/query" class="code-anchor">query</a> params and fragment
let navigationExtras: <a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor">NavigationExtras</a> = {
  queryParamsHandling: 'preserve',
  preserveFragment: true
};

// Redirect the user
this.router.navigate([redirect], navigationExtras);

</div><!----><header class="ng-star-inserted">src/app/login.component.ts (preserve)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/login.component.ts (preserve)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// Set our navigation extras object</span><span class="pln">
</span><span class="com">// that passes on our global </span><a href="https://angular.cn/api/animations/query" class="code-anchor"><span class="com">query</span></a><span class="com"> params and fragment</span><span class="pln">
</span><span class="kwd">let</span><span class="pln"> navigationExtras</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/NavigationExtras" class="code-anchor"><span class="typ">NavigationExtras</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  queryParamsHandling</span><span class="pun">:</span><span class="pln"> </span><span class="str">'preserve'</span><span class="pun">,</span><span class="pln">
  preserveFragment</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln">
</span><span class="pun">};</span><span class="pln">

</span><span class="com">// Redirect the user</span><span class="pln">
</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">router</span><span class="pun">.</span><span class="pln">navigate</span><span class="pun">([</span><span class="pln">redirect</span><span class="pun">],</span><span class="pln"> navigationExtras</span><span class="pun">);</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result=""><code>queryParamsHandling</code> 特性还提供了 <code>merge</code> 选项，它将会在导航时保留当前的查询参数，并与其它查询参数合并。</p><p translation-origin="off">The <code>queryParamsHandling</code> feature also provides a <code>merge</code> option, which will preserve and combine the current query parameters with any provided query parameters
when navigating.</p>

</div>
<p translation-result="">由于要在登录后导航到<em>危机管理</em>特征区的路由，所以你还得修改它，来处理这些全局查询参数和片段。</p><p translation-origin="off">Since you'll be navigating to the <em>Admin Dashboard</em> route after logging in, you'll update it to handle the
query parameters and fragment.</p>

<code-example path="router/src/app/admin/admin-dashboard.component.2.ts" linenums="false" title="src/app/admin/admin-dashboard.component.ts (v2)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> }  from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a> }     from '@angular/router';
import { Observable }         from 'rxjs';
import { map }                from 'rxjs/operators';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;p&gt;Dashboard&lt;/p&gt;

    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> id="anchor"&gt;&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;
  `
})
export class AdminDashboardComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  sessionId: Observable&lt;string&gt;;
  token: Observable&lt;string&gt;;

  constructor(private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>) {}

  ngOnInit() {
    // Capture the session ID if available
    this.sessionId = this.route
      .queryParamMap
      .pipe(map(params =&gt; params.get('session_id') || 'None'));

    // Capture the fragment if available
    this.token = this.route
      .fragment
      .pipe(map(fragment =&gt; fragment || 'None'));
  }
}


</div><!----><header class="ng-star-inserted">src/app/admin/admin-dashboard.component.ts (v2)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-dashboard.component.ts (v2)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">         </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> map </span><span class="pun">}</span><span class="pln">                </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln">  </span><span class="str">`
    &lt;p&gt;Dashboard&lt;/p&gt;

    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> id="anchor"&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  sessionId</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;string&gt;</span><span class="pun">;</span><span class="pln">
  token</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;string&gt;</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

  ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Capture the session ID if available</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sessionId </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route
      </span><span class="pun">.</span><span class="pln">queryParamMap
      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">map</span><span class="pun">(</span><span class="kwd">params</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">params</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'session_id'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="str">'None'</span><span class="pun">));</span><span class="pln">

    </span><span class="com">// Capture the fragment if available</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">token </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route
      </span><span class="pun">.</span><span class="pln">fragment
      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">map</span><span class="pun">(</span><span class="pln">fragment </span><span class="pun">=&gt;</span><span class="pln"> fragment </span><span class="pun">||</span><span class="pln"> </span><span class="str">'None'</span><span class="pun">));</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><em>查询参数</em>和<em>片段</em>可通过 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 服务的 <code>routerState</code> 属性使用。和<em>路由参数</em>类似，全局查询参数和片段也是 <code>Observable</code> 对象。
在修改过的<em>英雄管理</em>组件中，你将借助 <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code> 直接把 <code>Observable</code> 传给模板。</p><p translation-origin="off"><em>Query parameters</em> and <em>fragments</em> are also available through the <code><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a></code> service.
Just like <em>route parameters</em>, the query parameters and fragments are provided as an <code>Observable</code>.
The updated <em>Crisis Admin</em> component feeds the <code>Observable</code> directly into the template using the <code><a href="https://angular.cn/api/common/AsyncPipe" class="code-anchor">AsyncPipe</a></code>.</p>

<p translation-result="">按照下列步骤试验下：点击<em>Crisis Admin</em>按钮，它会带着你提供的 <code>queryParamMap</code> 和 <code>fragment</code> 跳转到登录页。
点击登录按钮，你就会被重定向到 <code>Admin Dashboard</code> 页。
注意，它仍然带着上一步提供的 <code>queryParamMap</code> 和 <code>fragment</code>。</p><p translation-origin="off">Now, you can click on the <em>Admin</em> button, which takes you to the <em>Login</em>
page with the provided <code>queryParamMap</code> and <code>fragment</code>. After you click the login button, notice that
you have been redirected to the <code>Admin Dashboard</code> page with the query parameters and fragment still intact in the address bar.</p>

<p translation-result="">你可以用这些持久化信息来携带需要为每个页面都提供的信息，如认证令牌或会话的 ID 等。</p><p translation-origin="off">You can use these persistent bits of information for things that need to be provided across pages like
authentication tokens or session ids.</p>

<div class="l-sub-section">
<p translation-result="">“查询参数”和“片段”也可以分别用 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 中的 <strong>preserveQueryParams</strong> 和 <strong>preserveFragment</strong> 保存。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/animations/query" class="code-anchor">query</a> params</code> and <code>fragment</code> can also be preserved using a <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> with
the <code>queryParamsHandling</code> and <code>preserveFragment</code> bindings respectively.</p>

</div>
<a id="asynchronous-routing"></a>
<h2 translation-result="" id="milestone-6-asynchronous-routing">里程碑 6：异步路由<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-6-asynchronous-routing"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="milestone-6-asynchronous-routing">Milestone 6: Asynchronous routing<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#milestone-6-asynchronous-routing"><i class="material-icons">link</i></a></h2>

<p translation-result="">完成上面的里程碑后，应用程序很自然的长大了。在继续构建特征区的过程中，应用的尺寸将会变得更大。在某一个时间点，你将达到一个顶点，应用将会需要过多的时间来加载。</p><p translation-origin="off">As you've worked through the milestones, the application has naturally gotten larger.
As you continue to build out feature areas, the overall application size will continue to grow.
At some point you'll reach a tipping point where the application takes long time to load.</p>

<p translation-result="">如何才能解决这个问题呢？通过引进异步路由，可以获得在请求时才<strong>惰性</strong>加载特性模块的能力。
惰性加载有多个优点：</p><p translation-origin="off">How do you combat this problem?  With asynchronous routing, which loads feature modules <em>lazily</em>, on request.
Lazy loading has multiple benefits.</p>

<ul>
<li>
<p translation-result=""> 你可以只在用户请求时才加载某些特性区。</p><p translation-origin="off">You can load feature areas only when requested by the user.</p>

</li>
<li>
<p translation-result=""> 对于那些只访问应用程序某些区域的用户，这样能加快加载速度。</p><p translation-origin="off">You can speed up load time for users that only visit certain areas of the application.</p>

</li>
<li>
<p translation-result=""> 你可以持续扩充惰性加载特性区的功能，而不用增加初始加载的包体积。</p><p translation-origin="off">You can continue expanding lazy loaded feature areas without increasing the size of the initial load bundle.</p>

</li>
</ul>
<p translation-result="">你已经完成了一部分。通过把应用组织成一些模块：<code>AppModule</code>、<code>HeroesModule</code>、<code>AdminModule</code> 和 <code>CrisisCenterModule</code>，
你已经有了可用于实现惰性加载的候选者。</p><p translation-origin="off">You're already made part way there.
By organizing the application into modules—<code>AppModule</code>,
<code>HeroesModule</code>, <code>AdminModule</code> and <code>CrisisCenterModule</code>—you
have natural candidates for lazy loading.</p>

<p translation-result="">有些模块（比如 <code>AppModule</code>）必须在启动时加载，但其它的都可以而且应该惰性加载。
比如 <code>AdminModule</code> 就只有少数已认证的用户才需要它，所以你应该只有在正确的人请求它时才加载。</p><p translation-origin="off">Some modules, like <code>AppModule</code>, must be loaded from the start.
But others can and should be lazy loaded.
The <code>AdminModule</code>, for example, is needed by a few authorized users, so
you should only load it when requested by the right people.</p>

<a id="lazy-loading-route-config"></a>
<h3 translation-result="" id="lazy-loading-route-configuration">惰性加载路由配置<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#lazy-loading-route-configuration"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="lazy-loading-route-configuration">Lazy Loading route configuration<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#lazy-loading-route-configuration"><i class="material-icons">link</i></a></h3>

<p translation-result="">把 <code>admin-routing.module.ts</code> 中的 <code>admin</code> 路径从 <code>'admin'</code> 改为空路径 <code>''</code>。</p><p translation-origin="off">Change the <code>admin</code> <strong>path</strong> in the <code>admin-routing.module.ts</code> from <code>'admin'</code> to an empty string, <code>''</code>, the <em>empty path</em>.</p>

<p translation-result=""><code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 支持<em>空路径</em>路由，可以使用它们来分组路由，而不用往 URL 中添加额外的路径片段。
用户仍旧访问 <code>/admin</code>，并且 <code>AdminComponent</code> 仍然作为用来包含子路由的<em>路由组件</em>。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> supports  <em>empty path</em> routes;
use them to group routes together without adding any additional path segments to the URL.
Users will still visit <code>/admin</code> and the <code>AdminComponent</code> still serves as the <em>Routing Component</em> containing child routes.</p>

<p translation-result="">打开 <code>AppRoutingModule</code>，并把一个新的 <code>admin</code> 路由添加到它的 <code>appRoutes</code> 数组中。</p><p translation-origin="off">Open the <code>AppRoutingModule</code> and add a new <code>admin</code> route to its <code>appRoutes</code> array.</p>

<p translation-result="">给它一个 <code>loadChildren</code> 属性（注意不是 <code>children</code> 属性），把它设置为 <code>AdminModule</code> 的地址。
该地址是 <code>AdminModule</code> 的文件路径（相对于 <code>app</code> 目录的），加上一个 <code>#</code> 分隔符，再加上导出模块的类名 <code>AdminModule</code>。</p><p translation-origin="off">Give it a <code>loadChildren</code> property (not a <code>children</code> property!), set to the address of the <code>AdminModule</code>.
The address is the <code>AdminModule</code> file location (relative to the app root),
followed by a <code>#</code> separator,
followed by the name of the exported module class, <code>AdminModule</code>.</p>

<code-example path="router/src/app/app-routing.module.5.ts" region="admin-1" title="app-routing.module.ts (load children)" ng-version="6.0.0"><div style="display: none">
{
  path: 'admin',
  loadChildren: 'app/admin/admin.module#AdminModule',
},

</div><!----><header class="ng-star-inserted">app-routing.module.ts (load children)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app-routing.module.ts (load children)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln">
  path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
  loadChildren</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app/admin/admin.module#AdminModule'</span><span class="pun">,</span><span class="pln">
</span><span class="pun">},</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当路由器导航到这个路由时，它会用 <code>loadChildren</code> 字符串来动态加载 <code>AdminModule</code>，然后把 <code>AdminModule</code> 添加到当前的路由配置中，
最后，它把所请求的路由加载到目标 <code>admin</code> 组件中。</p><p translation-origin="off">When the router navigates to this route, it uses the <code>loadChildren</code> string to dynamically load the <code>AdminModule</code>.
Then it adds the <code>AdminModule</code> routes to its current route configuration.
Finally, it loads the requested route to the destination admin component.</p>

<p translation-result="">惰性加载和重新配置工作只会发生一次，也就是在该路由<em>首次</em>被请求时。在后续的请求中，该模块和路由都是立即可用的。</p><p translation-origin="off">The lazy loading and re-configuration happen just once, when the route is <em>first</em> requested;
the module and routes are available immediately for subsequent requests.</p>

<div class="l-sub-section">
<p translation-result="">Angular 提供一个内置模块加载器，支持<strong><code>SystemJS</code></strong>来异步加载模块。如果你使用其它捆绑工具比如 <strong>Webpack</strong>，则使用 Webpack 的机制来异步加载模块。</p><p translation-origin="off">Angular provides a built-in module loader that supports SystemJS to load modules asynchronously. If you were
using another bundling tool, such as Webpack, you would use the Webpack mechanism for asynchronously loading modules.</p>

</div>
<p translation-result="">最后一步是把管理特性区从主应用中完全分离开。
根模块 <code>AppModule</code> 既不能加载也不能引用 <code>AdminModule</code> 及其文件。</p><p translation-origin="off">Take the final step and detach the admin feature set from the main application.
The root <code>AppModule</code> must neither load nor reference the <code>AdminModule</code> or its files.</p>

<p translation-result="">在 <code>app.module.ts</code> 中，从顶部移除 <code>AdminModule</code> 的导入语句，并且从 Angular 模块的 <code>imports</code> 数组中移除 <code>AdminModule</code>。</p><p translation-origin="off">In <code>app.module.ts</code>, remove the <code>AdminModule</code> import statement from the top of the file
and remove the <code>AdminModule</code> from the NgModule's <code>imports</code> array.</p>

<a id="can-load-guard"></a>
<h3 translation-result="" id="emcanloadem-guard-guarding-unauthorized-loading-of-feature-modules"><code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 守卫：保护对特性模块的未授权加载<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emcanloadem-guard-guarding-unauthorized-loading-of-feature-modules"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="canload-guard-guarding-unauthorized-loading-of-feature-modules"><em>CanLoad</em> Guard: guarding unauthorized loading of feature modules<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#canload-guard-guarding-unauthorized-loading-of-feature-modules"><i class="material-icons">link</i></a></h3>

<p translation-result="">你已经使用 <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> 保护 <code>AdminModule</code> 了，它会阻止未授权用户访问管理特性区。如果用户未登录，它就会跳转到登录页。</p><p translation-origin="off">You're already protecting the <code>AdminModule</code> with a <code><a href="https://angular.cn/api/router/CanActivate" class="code-anchor">CanActivate</a></code> guard that prevents unauthorized users from
accessing the admin feature area.
It redirects to the  login page if the user is not authorized.</p>

<p translation-result="">但是路由器仍然会加载 <code>AdminModule</code> —— 即使用户无法访问它的任何一个组件。
理想的方式是，只有在用户已登录的情况下你才加载 <code>AdminModule</code>。</p><p translation-origin="off">But the router is still loading the <code>AdminModule</code> even if the user can't visit any of its components.
Ideally, you'd only load the <code>AdminModule</code> if the user is logged in.</p>

<p translation-result="">添加一个<strong><code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code></strong>守卫，它只在用户已登录<em>并且</em>尝试访问管理特性区的时候，才加载 <code>AdminModule</code> 一次。</p><p translation-origin="off">Add a <strong><code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code></strong> guard that only loads the <code>AdminModule</code> once the user is logged in <em>and</em> attempts to access the admin feature area.</p>

<p translation-result="">现有的 <code>AuthGuard</code> 的 <code>checkLogin()</code> 方法中已经有了支持 <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 守卫的基础逻辑。</p><p translation-origin="off">The existing <code>AuthGuard</code> already has the essential logic in
its <code>checkLogin()</code> method to support the <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> guard.</p>

<p translation-result="">打开 <code>auth-guard.service.ts</code>，从 <code>@angular/router</code> 中导入 <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 接口。
把它添加到 <code>AuthGuard</code> 类的 <code>implements</code> 列表中。
然后实现 <code>canLoad</code>，代码如下：</p><p translation-origin="off">Open <code>auth-guard.service.ts</code>.
Import the <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> interface from <code>@angular/router</code>.
Add it to the <code>AuthGuard</code> class's <code>implements</code> list.
Then implement <code>canLoad()</code> as follows:</p>

<code-example path="router/src/app/auth-guard.service.ts" linenums="false" title="src/app/auth-guard.service.ts (CanLoad guard)" region="canLoad" ng-version="6.0.0"><div style="display: none">
canLoad(route: <a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a>): boolean {
  let url = `/${route.path}`;

  return this.checkLogin(url);
}

</div><!----><header class="ng-star-inserted">src/app/auth-guard.service.ts (CanLoad guard)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/auth-guard.service.ts (CanLoad guard)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">canLoad</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Route" class="code-anchor"><span class="typ">Route</span></a><span class="pun">):</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">let</span><span class="pln"> url </span><span class="pun">=</span><span class="pln"> </span><span class="str">`/${route.path}`</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">checkLogin</span><span class="pun">(</span><span class="pln">url</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">路由器会把 <code>canLoad()</code> 方法的 <code>route</code> 参数设置为准备访问的目标 URL。
如果用户已经登录了，<code>checkLogin()</code> 方法就会重定向到那个 URL。</p><p translation-origin="off">The router sets the <code>canLoad()</code> method's <code>route</code> parameter to the intended destination URL.
The <code>checkLogin()</code> method redirects to that URL once the user has logged in.</p>

<p translation-result="">现在，把 <code>AuthGuard</code> 导入到 <code>AppRoutingModule</code> 中，并把 <code>AuthGuard</code> 添加到 <code>admin</code> 路由的 <code>canLoad</code> 数组中。
完整的 <code>admin</code> 路由是这样的：</p><p translation-origin="off">Now import the <code>AuthGuard</code> into the <code>AppRoutingModule</code> and add the <code>AuthGuard</code> to the <code>canLoad</code>
array property for the <code>admin</code> route.
The completed admin route looks like this:</p>

<code-example path="router/src/app/app-routing.module.5.ts" region="admin" title="app-routing.module.ts (lazy admin route)" ng-version="6.0.0"><div style="display: none">
{
  path: 'admin',
  loadChildren: 'app/admin/admin.module#AdminModule',
  canLoad: [AuthGuard]
},

</div><!----><header class="ng-star-inserted">app-routing.module.ts (lazy admin route)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app-routing.module.ts (lazy admin route)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln">
  path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
  loadChildren</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app/admin/admin.module#AdminModule'</span><span class="pun">,</span><span class="pln">
  canLoad</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">AuthGuard</span><span class="pun">]</span><span class="pln">
</span><span class="pun">},</span></code>
    </pre></aio-code></code-example>
<a id="preloading"></a>
<h3 translation-result="" id="preloading-background-loading-of-feature-areas">预加载：特性区的后台加载<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#preloading-background-loading-of-feature-areas"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="preloading-background-loading-of-feature-areas">Preloading: background loading of feature areas<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#preloading-background-loading-of-feature-areas"><i class="material-icons">link</i></a></h3>

<p translation-result="">你已经学会了如何按需加载模块，接下来再看看如何使用<em>预加载</em>技术异步加载模块。</p><p translation-origin="off">You've learned how to load modules on-demand.
You can also load modules asynchronously with <em>preloading</em>.</p>

<p translation-result="">看起来好像应用一直都是这么做的，但其实并非如此。
<code>AppModule</code> 在应用启动时就被加载了，它是<em>立即</em>加载的。
而 <code>AdminModule</code> 只有当用户点击某个链接时才会加载，它是<em>惰性</em>加载的。</p><p translation-origin="off">This may seem like what the app has been doing all along. Not quite.
The <code>AppModule</code> is loaded when the application starts; that's <em>eager</em> loading.
Now the <code>AdminModule</code> loads only when the user clicks on a link; that's <em>lazy</em> loading.</p>

<p translation-result=""><em>预加载</em>是介于两者之间的一种方式。
来看看<em>危机中心</em>。
用户第一眼不会看到它。
默认情况下，<em>英雄管理</em>才是第一视图。
为了获得尽可能小的初始加载体积和最快的加载速度，你应该对 <code>AppModule</code> 和 <code>HeroesModule</code> 进行立即加载。</p><p translation-origin="off"><em>Preloading</em> is something in between.
Consider the <em>Crisis Center</em>.
It isn't the first view that a user sees.
By default, the <em>Heroes</em> are the first view.
For the smallest initial payload and fastest launch time,
you should eagerly load the <code>AppModule</code> and the <code>HeroesModule</code>.</p>

<p translation-result="">你可以惰性加载<em>危机中心</em>。
但是，你几乎可以肯定用户会在启动应用之后的几分钟内访问<em>危机中心</em>。
理想情况下，应用启动时应该只加载 <code>AppModule</code> 和 <code>HeroesModule</code>，然后几乎立即开始后台加载 <code>CrisisCenterModule</code>。
在用户浏览到<em>危机中心</em>之前，该模块应该已经加载完毕，可供访问了。</p><p translation-origin="off">You could lazy load the <em>Crisis Center</em>.
But you're almost certain that the user will visit the <em>Crisis Center</em> within minutes of launching the app.
Ideally, the app would launch with just the <code>AppModule</code> and the <code>HeroesModule</code> loaded
and then, almost immediately, load the <code>CrisisCenterModule</code> in the background.
By the time the user navigates to the <em>Crisis Center</em>, its module will have been loaded and ready to go.</p>

<p translation-result="">这就是<em>预加载</em>。</p><p translation-origin="off">That's <em>preloading</em>.</p>

<a id="how-preloading"></a>
<h4 translation-result="" id="how-preloading-works">预加载的工作原理<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#how-preloading-works"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="how-preloading-works">How preloading works<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#how-preloading-works"><i class="material-icons">link</i></a></h4>

<p translation-result="">在每次<em>成功的</em>导航后，路由器会在自己的配置中查找尚未加载并且可以预加载的模块。
是否加载某个模块，以及要加载哪些模块，取决于<em>预加载策略</em>。</p><p translation-origin="off">After each <em>successful</em> navigation, the router looks in its configuration for an unloaded module that it can preload.
Whether it preloads a module, and which modules it preloads, depends upon the <em>preload strategy</em>.</p>

<p translation-result=""><code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 内置了两种预加载策略：</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> offers two preloading strategies out of the box:</p>

<ul>
<li>
<p translation-result=""> 完全不预加载，这是默认值。惰性加载的特性区仍然会按需加载。</p><p translation-origin="off">No preloading at all which is the default. Lazy loaded feature areas are still loaded on demand.</p>

</li>
<li>
<p translation-result=""> 预加载所有惰性加载的特性区。</p><p translation-origin="off">Preloading of all lazy loaded feature areas.</p>

</li>
</ul>
<p translation-result="">默认情况下，路由器或者完全不预加载或者预加载每个惰性加载模块。
路由器还支持<a href="https://angular.cn/guide/router#custom-preloading">自定义预加载策略</a>，以便完全控制要预加载哪些模块以及何时加载。</p><p translation-origin="off">Out of the box, the router either never preloads, or preloads every lazy load module.
The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> also supports <a href="https://angular.cn/guide/router#custom-preloading">custom preloading strategies</a> for
fine control over which modules to preload and when.</p>

<p translation-result="">在下一节，你将会把 <code>CrisisCenterModule</code> 改为默认惰性加载的，并使用 <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> 策略来尽快加载它（以及<em>所有其它</em>惰性加载模块）。</p><p translation-origin="off">In this next section, you'll update the <code>CrisisCenterModule</code> to load lazily
by default and use the <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> strategy
to load it (and <em>all other</em> lazy loaded modules) as soon as possible.</p>

<a id="lazy-load-crisis-center"></a>
<h4 translation-result="" id="lazy-load-the-emcrisis-centerem">惰性加载<em>危机中心</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#lazy-load-the-emcrisis-centerem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="lazy-load-the-crisis-center">Lazy load the <em>crisis center</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#lazy-load-the-crisis-center"><i class="material-icons">link</i></a></h4>

<p translation-result="">修改路由配置，来惰性加载 <code>CrisisCenterModule</code>。修改的步骤和配置惰性加载 <code>AdminModule</code> 时一样。</p><p translation-origin="off">Update the route configuration to lazy load the <code>CrisisCenterModule</code>.
Take the same steps you used to configure <code>AdminModule</code> for lazy load.</p>

<ol>
<li>
<p translation-result="">把 <code>CrisisCenterRoutingModule</code> 中的路径从 <code>crisis-center</code> 改为空字符串。</p><p translation-origin="off">Change the <code>crisis-center</code> path in the <code>CrisisCenterRoutingModule</code> to an empty string.</p>

</li>
<li>
<p translation-result="">往 <code>AppRoutingModule</code> 中添加一个 <code>crisis-center</code> 路由。</p><p translation-origin="off">Add a <code>crisis-center</code> route to the <code>AppRoutingModule</code>.</p>

</li>
<li>
<p translation-result="">设置 <code>loadChildren</code> 字符串来加载 <code>CrisisCenterModule</code>。</p><p translation-origin="off">Set the <code>loadChildren</code> string to load the <code>CrisisCenterModule</code>.</p>

</li>
<li>
<p translation-result="">从 <code>app.module.ts</code> 中移除所有对 <code>CrisisCenterModule</code> 的引用。</p><p translation-origin="off">Remove all mention of the <code>CrisisCenterModule</code> from <code>app.module.ts</code>.</p>

</li>
</ol>
<p translation-result="">下面是打开预加载之前的模块修改版：</p><p translation-origin="off">Here are the updated modules <em>before enabling preload</em>:</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="app.module.ts" path="router/src/app/app.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }  from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }    from '@angular/forms';
import { <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a> } from '@angular/platform-browser/animations';

import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> } from '@angular/router';

import { AppComponent }            from './app.component';
import { AppRoutingModule }        from './app-routing.module';

import { HeroesModule }            from './heroes/heroes.module';
import { ComposeMessageComponent } from './compose-message.component';
import { LoginRoutingModule }      from './login-routing.module';
import { LoginComponent }          from './login.component';
import { PageNotFoundComponent }   from './not-found.component';

import { DialogService }           from './dialog.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    HeroesModule,
    LoginRoutingModule,
    AppRoutingModule,
    <a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor">BrowserAnimationsModule</a>
  ],
  declarations: [
    AppComponent,
    ComposeMessageComponent,
    LoginComponent,
    PageNotFoundComponent
  ],
  providers: [
    DialogService
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule {
  // Diagnostic only: inspect router configuration
  constructor(router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {
    console.log('<a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a>: ', JSON.stringify(router.config, undefined, 2));
  }
}


</code-pane>

  <code-pane title="app-routing.module.ts" path="router/src/app/app-routing.module.6.ts" region="preload-v1">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }     from '@angular/core';
import {
  <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a>,
} from '@angular/router';

import { ComposeMessageComponent } from './compose-message.component';
import { PageNotFoundComponent }   from './not-found.component';

import { CanDeactivateGuard }      from './can-deactivate-guard.service';
import { AuthGuard }               from './auth-guard.service';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'compose',
    component: ComposeMessageComponent,
    outlet: 'popup'
  },
  {
    path: 'admin',
    loadChildren: 'app/admin/admin.module#AdminModule',
    canLoad: [AuthGuard]
  },
  {
    path: 'crisis-center',
    loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule'
  },
  { path: '',   redirectTo: '/heroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CanDeactivateGuard
  ]
})
export class AppRoutingModule {}


</code-pane>

  <code-pane title="crisis-center-routing.module.ts" path="router/src/app/crisis-center/crisis-center-routing.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { CrisisCenterHomeComponent } from './crisis-center-home.component';
import { CrisisListComponent }       from './crisis-list.component';
import { CrisisCenterComponent }     from './crisis-center.component';
import { CrisisDetailComponent }     from './crisis-detail.component';

import { CanDeactivateGuard }     from '../can-deactivate-guard.service';
import { CrisisDetailResolver }   from './crisis-detail-resolver.service';

const crisisCenterRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: '',
    component: CrisisCenterComponent,
    children: [
      {
        path: '',
        component: CrisisListComponent,
        children: [
          {
            path: ':id',
            component: CrisisDetailComponent,
            canDeactivate: [CanDeactivateGuard],
            resolve: {
              crisis: CrisisDetailResolver
            }
          },
          {
            path: '',
            component: CrisisCenterHomeComponent
          }
        ]
      }
    ]
  }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(crisisCenterRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CrisisDetailResolver
  ]
})
export class CrisisCenterRoutingModule { }

</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-0" tabindex="0" aria-controls="mat-tab-content-15-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-1" tabindex="-1" aria-controls="mat-tab-content-15-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">app-routing.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-15-2" tabindex="-1" aria-controls="mat-tab-content-15-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">crisis-center-routing.module.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 160px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-55 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-15-0" aria-labelledby="mat-tab-label-15-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.module.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser/animations'</span><span class="pun">;</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span></li><li class="L8"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app-routing.module'</span><span class="pun">;</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroesModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./heroes/heroes.module'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./compose-message.component'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">LoginRoutingModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln">      </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./login-routing.module'</span><span class="pun">;</span></li><li class="L3"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">LoginComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./login.component'</span><span class="pun">;</span></li><li class="L4"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DialogService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./dialog.service'</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span></li><li class="L9"><span class="pln">  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L0"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span></li><li class="L2"><span class="pln">    </span><span class="typ">HeroesModule</span><span class="pun">,</span></li><li class="L3"><span class="pln">    </span><span class="typ">LoginRoutingModule</span><span class="pun">,</span></li><li class="L4"><span class="pln">    </span><span class="typ">AppRoutingModule</span><span class="pun">,</span></li><li class="L5"><span class="pln">    </span><a href="https://angular.cn/api/platform-browser/animations/BrowserAnimationsModule" class="code-anchor"><span class="typ">BrowserAnimationsModule</span></a></li><li class="L6"><span class="pln">  </span><span class="pun">],</span></li><li class="L7"><span class="pln">  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L8"><span class="pln">    </span><span class="typ">AppComponent</span><span class="pun">,</span></li><li class="L9"><span class="pln">    </span><span class="typ">ComposeMessageComponent</span><span class="pun">,</span></li><li class="L0"><span class="pln">    </span><span class="typ">LoginComponent</span><span class="pun">,</span></li><li class="L1"><span class="pln">    </span><span class="typ">PageNotFoundComponent</span></li><li class="L2"><span class="pln">  </span><span class="pun">],</span></li><li class="L3"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span></li><li class="L4"><span class="pln">    </span><span class="typ">DialogService</span></li><li class="L5"><span class="pln">  </span><span class="pun">],</span></li><li class="L6"><span class="pln">  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span></li><li class="L7"><span class="pun">})</span></li><li class="L8"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span></li><li class="L9"><span class="pln">  </span><span class="com">// Diagnostic only: inspect router configuration</span></li><li class="L0"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'</span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="str">Routes</span></a><span class="str">: '</span><span class="pun">,</span><span class="pln"> JSON</span><span class="pun">.</span><span class="pln">stringify</span><span class="pun">(</span><span class="pln">router</span><span class="pun">.</span><span class="pln">config</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-56 ng-star-inserted" role="tabpanel" id="mat-tab-content-15-1" aria-labelledby="mat-tab-label-15-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-57 ng-star-inserted" role="tabpanel" id="mat-tab-content-15-2" aria-labelledby="mat-tab-label-15-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result="">你可以现在尝试它，并确认在点击了“Crisis Center”按钮之后加载了 <code>CrisisCenterModule</code>。</p><p translation-origin="off">You could try this now and confirm that the  <code>CrisisCenterModule</code> loads after you click the "Crisis Center" button.</p>

<p translation-result="">要为所有惰性加载模块启用预加载功能，请从 Angular 的路由模块中导入 <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code>。</p><p translation-origin="off">To enable preloading of all lazy loaded modules, import the <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> token from the Angular router package.</p>

<p translation-result=""><code>RouterModule.forRoot</code> 方法的第二个参数接受一个附加配置选项对象。
<code>preloadingStrategy</code> 就是其中之一。
把 <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> 添加到 <code>forRoot</code> 调用中：</p><p translation-origin="off">The second argument in the <code>RouterModule.forRoot</code> method takes an object for additional configuration options.
The <code>preloadingStrategy</code> is one of those options.
Add the <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> token to the <code>forRoot</code> call:</p>

<code-example path="router/src/app/app-routing.module.6.ts" linenums="false" title="src/app/app-routing.module.ts (preload all)" region="forRoot" ng-version="6.0.0"><div style="display: none">
RouterModule.forRoot(
  appRoutes,
  {
    enableTracing: true, // &lt;-- debugging purposes only
    preloadingStrategy: <a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a>
  }
)

</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (preload all)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (preload all)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
  appRoutes</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
    preloadingStrategy</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor"><span class="typ">PreloadAllModules</span></a><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">)</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这会让 <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> 预加载器立即加载<em>所有</em>惰性加载路由（带 <code>loadChildren</code> 属性的路由）。</p><p translation-origin="off">This tells the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> preloader to immediately load <em>all</em> lazy loaded routes (routes with a <code>loadChildren</code> property).</p>

<p translation-result="">当访问 <code>http://localhost:3000</code> 时，<code>/heroes</code> 路由立即随之启动，并且路由器在加载了 <code>HeroesModule</code> 之后立即开始加载 <code>CrisisCenterModule</code>。</p><p translation-origin="off">When you visit <code>http://localhost:3000</code>, the <code>/heroes</code> route loads immediately upon launch
and the router starts loading the <code>CrisisCenterModule</code> right after the <code>HeroesModule</code> loads.</p>

<p translation-result="">意外的是，<code>AdminModule</code><em>没有</em>预加载，有什么东西阻塞了它。</p><p translation-origin="off">Surprisingly, the <code>AdminModule</code> does <em>not</em> preload. Something is blocking it.</p>

<a id="preload-canload"></a>
<h4 translation-result="" id="canload-blocks-preload">CanLoad 会阻塞预加载<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#canload-blocks-preload"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="canload-blocks-preload">CanLoad blocks preload<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#canload-blocks-preload"><i class="material-icons">link</i></a></h4>

<p translation-result=""><code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> 策略不会加载被<a href="https://angular.cn/guide/router#can-load-guard">CanLoad</a>守卫所保护的特性区。这是刻意设计的。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> strategy does not load feature areas protected by a <a href="https://angular.cn/guide/router#can-load-guard">CanLoad</a> guard.
This is by design.</p>

<p translation-result="">你几步之前刚刚给 <code>AdminModule</code> 中的路由添加了 <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 守卫，以阻塞加载那个模块，直到用户认证结束。
<code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> 守卫的优先级高于预加载策略。</p><p translation-origin="off">You added a <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> guard to the route in the <code>AdminModule</code> a few steps back
to block loading of that module until the user is authorized.
That <code><a href="https://angular.cn/api/router/CanLoad" class="code-anchor">CanLoad</a></code> guard takes precedence over the preload strategy.</p>

<p translation-result="">如果你要加载一个模块<em>并且</em>保护它防止未授权访问，请移除 <code>canLoad</code> 守卫，只单独依赖<a href="https://angular.cn/guide/router#can-activate-guard">CanActivate</a>守卫。</p><p translation-origin="off">If you want to preload a module <em>and</em> guard against unauthorized access,
drop the <code>canLoad()</code> guard method and rely on the <a href="https://angular.cn/guide/router#can-activate-guard">canActivate()</a> guard alone.</p>

<a id="custom-preloading"></a>
<h3 translation-result="" id="custom-preloading-strategy">自定义预加载策略<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#custom-preloading-strategy"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="custom-preloading-strategy">Custom Preloading Strategy<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#custom-preloading-strategy"><i class="material-icons">link</i></a></h3>

<p translation-result="">在大多数场景下，预加载每个惰性加载模块就很好了，但是有时候它却并不是正确的选择，特别是在移动设备和低带宽连接下。
你可能出于用户的测量和其它商业和技术因素而选择只对某些特性模块进行预加载。</p><p translation-origin="off">Preloading every lazy loaded modules works well in many situations,
but it isn't always the right choice, especially on mobile devices and over low bandwidth connections.
You may choose to preload only certain feature modules, based on user metrics and other business and technical factors.</p>

<p translation-result="">使用自定义预加载策略，你可以控制路由器预加载哪些路由以及如何加载。</p><p translation-origin="off">You can control what and how the router preloads with a custom preloading strategy.</p>

<p translation-result="">在这一节，你将添加一个自定义策略，它<em>只</em>预加载那些 <code>data.preload</code> 标志为 <code>true</code> 的路由。
回忆一下，你可以往路由的 <code>data</code> 属性中添加任何东西。</p><p translation-origin="off">In this section, you'll add a custom strategy that <em>only</em> preloads routes whose <code>data.preload</code> flag is set to <code>true</code>.
Recall that you can add anything to the <code>data</code> property of a route.</p>

<p translation-result="">在 <code>AppRoutingModule</code> 的 <code>crisis-center</code> 路由中设置 <code>data.preload</code> 标志。</p><p translation-origin="off">Set the <code>data.preload</code> flag in the <code>crisis-center</code> route in the <code>AppRoutingModule</code>.</p>

<code-example path="router/src/app/app-routing.module.ts" linenums="false" title="src/app/app-routing.module.ts (route data preload)" region="preload-v2" ng-version="6.0.0"><div style="display: none">
{
  path: 'crisis-center',
  loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule',
  data: { preload: true }
},

</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (route data preload)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (route data preload)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">{</span><span class="pln">
  path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln">
  loadChildren</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app/crisis-center/crisis-center.module#CrisisCenterModule'</span><span class="pun">,</span><span class="pln">
  data</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> preload</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">},</span></code>
    </pre></aio-code></code-example>
<p translation-result="">往项目中添加一个新的名叫 <code>selective-preloading-strategy.ts</code> 的文件，并在其中定义一个服务类 <code>SelectivePreloadingStrategy</code>，代码如下：</p><p translation-origin="off">Add a new file to the project called <code>selective-preloading-strategy.ts</code>
and define a <code>SelectivePreloadingStrategy</code> service class as follows:</p>

<code-example path="router/src/app/selective-preloading-strategy.ts" linenums="false" title="src/app/selective-preloading-strategy.ts (excerpt)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { <a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor">PreloadingStrategy</a>, <a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a> } from '@angular/router';
import { Observable, of } from 'rxjs';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class SelectivePreloadingStrategy implements <a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor">PreloadingStrategy</a> {
  preloadedModules: string[] = [];

  preload(route: <a href="https://angular.cn/api/router/Route" class="code-anchor">Route</a>, load: () =&gt; Observable&lt;any&gt;): Observable&lt;any&gt; {
    if (route.data &amp;&amp; route.data['preload']) {
      // add the route path to the preloaded module array
      this.preloadedModules.push(route.path);

      // log the route path to the console
      console.log('Preloaded: ' + route.path);

      return load();
    } else {
      return of(null);
    }
  }
}


</div><!----><header class="ng-star-inserted">src/app/selective-preloading-strategy.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/selective-preloading-strategy.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor"><span class="typ">PreloadingStrategy</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Route" class="code-anchor"><span class="typ">Route</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">,</span><span class="pln"> of </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">SelectivePreloadingStrategy</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor"><span class="typ">PreloadingStrategy</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  preloadedModules</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln">

  preload</span><span class="pun">(</span><span class="pln">route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Route" class="code-anchor"><span class="typ">Route</span></a><span class="pun">,</span><span class="pln"> load</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;any&gt;</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;any&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">route</span><span class="pun">.</span><span class="pln">data </span><span class="pun">&amp;&amp;</span><span class="pln"> route</span><span class="pun">.</span><span class="pln">data</span><span class="pun">[</span><span class="str">'preload'</span><span class="pun">])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="com">// add the route path to the preloaded module array</span><span class="pln">
      </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">preloadedModules</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">route</span><span class="pun">.</span><span class="pln">path</span><span class="pun">);</span><span class="pln">

      </span><span class="com">// log the route path to the console</span><span class="pln">
      console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Preloaded: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> route</span><span class="pun">.</span><span class="pln">path</span><span class="pun">);</span><span class="pln">

      </span><span class="kwd">return</span><span class="pln"> load</span><span class="pun">();</span><span class="pln">
    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="kwd">null</span><span class="pun">);</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>SelectivePreloadingStrategy</code> 实现了 <code><a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor">PreloadingStrategy</a></code>，它只有一个方法 <code>preload</code>。</p><p translation-origin="off"><code>SelectivePreloadingStrategy</code> implements the <code><a href="https://angular.cn/api/router/PreloadingStrategy" class="code-anchor">PreloadingStrategy</a></code>, which has one method, <code>preload</code>.</p>

<p translation-result="">路由器会用两个参数调用调用 <code>preload</code> 方法：</p><p translation-origin="off">The router calls the <code>preload</code> method with two arguments:</p>

<ol>
<li>
<p translation-result="">要加载的路由。</p><p translation-origin="off">The route to consider.</p>

</li>
<li>
<p translation-result="">一个加载器（loader）函数，它能异步加载带路由的模块。</p><p translation-origin="off">A loader function that can load the routed module asynchronously.</p>

</li>
</ol>
<p translation-result=""><code>preload</code> 的实现必须返回一个 <code>Observable</code>。
如果该路由应该预加载，它就会返回调用加载器函数所返回的 <code>Observable</code>。
如果该路由<em>不</em>应该预加载，它就返回一个 <code>null</code> 值的 <code>Observable</code> 对象。</p><p translation-origin="off">An implementation of <code>preload</code> must return an <code>Observable</code>.
If the route should preload, it returns the observable returned by calling the loader function.
If the route should <em>not</em> preload, it returns an <code>Observable</code> of <code>null</code>.</p>

<p translation-result="">在这个例子中，<code>preload</code> 方法只有在路由的 <code>data.preload</code> 标识为真时才会加载该路由。</p><p translation-origin="off">In this sample, the  <code>preload</code> method loads the route if the route's <code>data.preload</code> flag is truthy.</p>

<p translation-result="">它还有一个副作用。
<code>SelectivePreloadingStrategy</code> 会把所选路由的 <code>path</code> 记录在它的公共数组 <code>preloadedModules</code> 中。</p><p translation-origin="off">It also has a side-effect.
<code>SelectivePreloadingStrategy</code> logs the <code>path</code> of a selected route in its public <code>preloadedModules</code> array.</p>

<p translation-result="">很快，你就会扩展 <code>AdminDashboardComponent</code> 来注入该服务，并且显示它的 <code>preloadedModules</code> 数组。</p><p translation-origin="off">Shortly, you'll extend the <code>AdminDashboardComponent</code> to inject this service and display its <code>preloadedModules</code> array.</p>

<p translation-result="">但是首先，要对 <code>AppRoutingModule</code> 做少量修改。</p><p translation-origin="off">But first, make a few changes to the <code>AppRoutingModule</code>.</p>

<ol>
<li>
<p translation-result="">把 <code>SelectivePreloadingStrategy</code> 导入到 <code>AppRoutingModule</code> 中。</p><p translation-origin="off">Import <code>SelectivePreloadingStrategy</code> into <code>AppRoutingModule</code>.</p>

</li>
<li>
<p translation-result="">把 <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> 策略替换成对 <code>forRoot</code> 的调用，并且传入这个 <code>SelectivePreloadingStrategy</code>。</p><p translation-origin="off">Replace the <code><a href="https://angular.cn/api/router/PreloadAllModules" class="code-anchor">PreloadAllModules</a></code> strategy in the call to <code>forRoot</code> with this <code>SelectivePreloadingStrategy</code>.</p>

</li>
<li>
<p translation-result="">   把 <code>SelectivePreloadingStrategy</code> 策略添加到 <code>AppRoutingModule</code> 的 <code>providers</code> 数组中，以便它可以注入到应用中的任何地方。</p><p translation-origin="off">Add the <code>SelectivePreloadingStrategy</code> strategy to the <code>AppRoutingModule</code> providers array so it can be injected
elsewhere in the app.</p>

</li>
</ol>
<p translation-result="">现在，编辑 <code>AdminDashboardComponent</code> 以显示这些预加载路由的日志。</p><p translation-origin="off">Now edit the <code>AdminDashboardComponent</code> to display the log of preloaded routes.</p>

<ol>
<li>
<p translation-result="">导入 <code>SelectivePreloadingStrategy</code>（它是一个服务）。</p><p translation-origin="off">Import the <code>SelectivePreloadingStrategy</code> (it's a service).</p>

</li>
<li>
<p translation-result="">把它注入到仪表盘的构造函数中。</p><p translation-origin="off">Inject it into the dashboard's constructor.</p>

</li>
<li>
<p translation-result="">修改模板来显示这个策略服务的 <code>preloadedModules</code> 数组。</p><p translation-origin="off">Update the template to display the strategy service's <code>preloadedModules</code> array.</p>

</li>
</ol>
<p translation-result="">当完成时，代码如下：</p><p translation-origin="off">When you're done it looks like this.</p>

<code-example path="router/src/app/admin/admin-dashboard.component.ts" linenums="false" title="src/app/admin/admin-dashboard.component.ts (preloaded modules)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> }    from '@angular/core';
import { <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a> }       from '@angular/router';
import { Observable }           from 'rxjs';
import { map }                  from 'rxjs/operators';

import { SelectivePreloadingStrategy } from '../selective-preloading-strategy';


@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  template:  `
    &lt;p&gt;Dashboard&lt;/p&gt;

    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> id="anchor"&gt;&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;

    Preloaded Modules
    &lt;ul&gt;
      &lt;li *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let module of modules"&gt;{{ module }}&lt;/li&gt;
    &lt;/ul&gt;
  `
})
export class AdminDashboardComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  sessionId: Observable&lt;string&gt;;
  token: Observable&lt;string&gt;;
  modules: string[];

  constructor(
    private route: <a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor">ActivatedRoute</a>,
    private preloadStrategy: SelectivePreloadingStrategy
  ) {
    this.modules = preloadStrategy.preloadedModules;
  }

  ngOnInit() {
    // Capture the session ID if available
    this.sessionId = this.route
      .queryParamMap
      .pipe(map(params =&gt; params.get('session_id') || 'None'));

    // Capture the fragment if available
    this.token = this.route
      .fragment
      .pipe(map(fragment =&gt; fragment || 'None'));
  }
}


</div><!----><header class="ng-star-inserted">src/app/admin/admin-dashboard.component.ts (preloaded modules)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/admin/admin-dashboard.component.ts (preloaded modules)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> map </span><span class="pun">}</span><span class="pln">                  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">SelectivePreloadingStrategy</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../selective-preloading-strategy'</span><span class="pun">;</span><span class="pln">


</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln">  </span><span class="str">`
    &lt;p&gt;Dashboard&lt;/p&gt;

    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> id="anchor"&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;

    Preloaded Modules
    &lt;ul&gt;
      &lt;li *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="str">ngFor</span></a><span class="str">="let module of modules"&gt;{{ module }}&lt;/li&gt;
    &lt;/ul&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AdminDashboardComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  sessionId</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;string&gt;</span><span class="pun">;</span><span class="pln">
  token</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="str">&lt;string&gt;</span><span class="pun">;</span><span class="pln">
  modules</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[];</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> route</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/ActivatedRoute" class="code-anchor"><span class="typ">ActivatedRoute</span></a><span class="pun">,</span><span class="pln">
    </span><span class="kwd">private</span><span class="pln"> preloadStrategy</span><span class="pun">:</span><span class="pln"> </span><span class="typ">SelectivePreloadingStrategy</span><span class="pln">
  </span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">modules </span><span class="pun">=</span><span class="pln"> preloadStrategy</span><span class="pun">.</span><span class="pln">preloadedModules</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="com">// Capture the session ID if available</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">sessionId </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route
      </span><span class="pun">.</span><span class="pln">queryParamMap
      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">map</span><span class="pun">(</span><span class="kwd">params</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">params</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'session_id'</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="str">'None'</span><span class="pun">));</span><span class="pln">

    </span><span class="com">// Capture the fragment if available</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">token </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">route
      </span><span class="pun">.</span><span class="pln">fragment
      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">map</span><span class="pun">(</span><span class="pln">fragment </span><span class="pun">=&gt;</span><span class="pln"> fragment </span><span class="pun">||</span><span class="pln"> </span><span class="str">'None'</span><span class="pun">));</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">一旦应用加载完了初始路由，<code>CrisisCenterModule</code> 也被预加载了。
通过 <code>Admin</code> 特性区中的记录就可以验证它，“Preloaded Modules”中没有列出 <code>crisis-center</code>。
它也被记录到了浏览器的控制台。</p><p translation-origin="off">Once the application loads the initial route, the <code>CrisisCenterModule</code> is preloaded.
Verify this by logging in to the <code>Admin</code> feature area and noting that the <code>crisis-center</code> is listed in the <code>Preloaded Modules</code>.
It's also logged to the browser's console.</p>

<a id="redirect-advanced"></a>
<h2 translation-result="" id="migrating-urls-with-redirects">使用重定向迁移 URL<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#migrating-urls-with-redirects"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="migrating-urls-with-redirects">Migrating URLs with Redirects<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#migrating-urls-with-redirects"><i class="material-icons">link</i></a></h2>

<p translation-result="">你已经设置好了路由，并且用命令式和声明式的方式导航到了很多不同的路由。但是，任何应用的需求都会随着时间而改变。
你把链接 <code>/heroes</code> 和 <code>hero/:id</code> 指向了 <code>HeroListComponent</code> 和 <code>HeroDetailComponent</code> 组件。
如果有这样一个需求，要把链接 <code>heroes</code> 变成 <code>superheroes</code>，你仍然希望以前的 URL 能正常导航。
但你也不想在应用中找到并修改每一个链接，这时候，重定向就可以省去这些琐碎的重构工作。</p><p translation-origin="off">You've setup the routes for navigating around your application. You've used navigation imperatively and declaratively to many different routes. But like any application, requirements change over time. You've setup links and navigation to <code>/heroes</code> and <code>/hero/:id</code> from the <code>HeroListComponent</code> and <code>HeroDetailComponent</code> components. If there was a requirement that links to <code>heroes</code> become <code>superheroes</code>, you still want the previous URLs to navigate correctly. You also don't want to go and update every link in your application, so redirects makes refactoring routes trivial.</p>

<a id="url-refactor"></a>
<h3 translation-result="" id="changing-heroes-to-superheroes">把 <code>/heroes</code> 修改为 <code>/superheros</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#changing-heroes-to-superheroes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="changing-heroes-to-superheroes">Changing /heroes to /superheroes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#changing-heroes-to-superheroes"><i class="material-icons">link</i></a></h3>

<p translation-result="">先取得 <code>Hero</code> 路由，并把它们迁移到新的 URL。<code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code>（路由器）会在开始导航之前先在配置中检查所有重定向语句，以便将来按需触发重定向。要支持这种修改，你就要在 <code>heroes-routing.module</code> 文件中把老的路由重定向到新的路由。</p><p translation-origin="off">Let's take the <code>Hero</code> routes and migrate them to new URLs. The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> checks for redirects in your configuration before navigating, so each redirect is triggered when needed. To support this change, you'll add redirects from the old routes to the new routes in the <code>heroes-routing.module</code>.</p>

<code-example path="router/src/app/heroes/heroes-routing.module.ts" linenums="false" title="src/app/heroes/heroes-routing.module.ts (heroes redirects)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { HeroListComponent }    from './hero-list.component';
import { HeroDetailComponent }  from './hero-detail.component';

const heroesRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  { path: 'heroes', redirectTo: '/superheroes' },
  { path: 'hero/:id', redirectTo: '/superhero/:id' },
  { path: 'superheroes',  component: HeroListComponent },
  { path: 'superhero/:id', component: HeroDetailComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forChild(heroesRoutes)
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ]
})
export class HeroRoutingModule { }

</div><!----><header class="ng-star-inserted">src/app/heroes/heroes-routing.module.ts (heroes redirects)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes-routing.module.ts (heroes redirects)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-detail.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> heroesRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'heroes'</span><span class="pun">,</span><span class="pln"> redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/superheroes'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'hero/:id'</span><span class="pun">,</span><span class="pln"> redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/superhero/:id'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'superheroes'</span><span class="pun">,</span><span class="pln">  component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'superhero/:id'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forChild</span><span class="pun">(</span><span class="pln">heroesRoutes</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，这里有两种类型的重定向。第一种是不带参数的从 <code>/heroes</code> 重定向到 <code>/superheroes</code>。这是一种非常直观的重定向。第二种是从 <code>/hero/:id</code> 重定向到 <code>/superhero/:id</code>，它还要包含一个 <code>:id</code> 路由参数。
路由器重定向时使用强大的模式匹配功能，这样，路由器就会检查 URL，并且把 <code>path</code> 中带的路由参数替换成相应的目标形式。以前，你导航到形如 <code>/hero/15</code> 的 URL 时，带了一个路由参数 <code>id</code>，它的值是 <code>15</code>。</p><p translation-origin="off">You'll notice two different types of redirects. The first change is from  <code>/heroes</code> to <code>/superheroes</code> without any parameters. This is a straightforward redirect, unlike the change from <code>/hero/:id</code> to <code>/superhero/:id</code>, which includes the <code>:id</code> route parameter. Router redirects also use powerful pattern matching, so the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> inspects the URL and replaces route parameters in the <code>path</code> with their appropriate destination. Previously, you navigated to a URL such as <code>/hero/15</code> with a route parameter <code>id</code> of <code>15</code>.</p>

<div class="l-sub-section">
<p translation-result="">在重定向的时候，路由器还支持<a href="https://angular.cn/guide/router#query-parameters">查询参数</a>和<a href="https://angular.cn/guide/router#fragment">片段(fragment)</a>。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> also supports <a href="https://angular.cn/guide/router#query-parameters">query parameters</a> and the <a href="https://angular.cn/guide/router#fragment">fragment</a> when using redirects.</p>

<ul>
<li>
<p translation-result=""> 当使用绝对地址重定向时，路由器将会使用路由配置的 <code>redirectTo</code> 属性中规定的查询参数和片段。</p><p translation-origin="off">When using absolute redirects, the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> will use the query parameters and the fragment from the redirectTo in the route config.</p>

</li>
<li>
<p translation-result=""> 当使用相对地址重定向时，路由器将会使用源地址（跳转前的地址）中的查询参数和片段。</p><p translation-origin="off">When using relative redirects, the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> use the query params and the fragment from the source URL.</p>

</li>
</ul>
</div>
<p translation-result="">在修改 <code>app-routing.module.ts</code> 之前，你要先考虑一条重要的规则。
目前，你把空路径路由重定向到了 <code>/heroes</code>，它又被重定向到了 <code>/superheroes</code>。这样<em>不行</em>，从设计上就不行。
因为路由器在每一层的路由配置中只会处理一次重定向。这样可以防止出现无限循环的重定向。</p><p translation-origin="off">Before updating the <code>app-routing.module.ts</code>, you'll need to consider an important rule. Currently, our empty path route redirects to <code>/heroes</code>, which redirects to <code>/superheroes</code>. This <em>won't</em> work and is by design as the <code><a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a></code> handles redirects once at each level of routing configuration. This prevents chaining of redirects, which can lead to endless redirect loops.</p>

<p translation-result="">所以，你要在 <code>app-routing.module.ts</code> 中修改空路径路由，让它重定向到 <code>/superheroes</code>。</p><p translation-origin="off">So instead, you'll update the empty path route in <code>app-routing.module.ts</code> to redirect to <code>/superheroes</code>.</p>

<code-example path="router/src/app/app-routing.module.ts" linenums="false" title="src/app/app-routing.module.ts (superheroes redirect)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>, <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> } from '@angular/router';

import { ComposeMessageComponent }  from './compose-message.component';
import { PageNotFoundComponent }    from './not-found.component';

import { CanDeactivateGuard }       from './can-deactivate-guard.service';
import { AuthGuard }                from './auth-guard.service';
import { SelectivePreloadingStrategy } from './selective-preloading-strategy';

const appRoutes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [
  {
    path: 'compose',
    component: ComposeMessageComponent,
    outlet: 'popup'
  },
  {
    path: 'admin',
    loadChildren: 'app/admin/admin.module#AdminModule',
    canLoad: [AuthGuard]
  },
  {
    path: 'crisis-center',
    loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule',
    data: { preload: true }
  },
  { path: '',   redirectTo: '/superheroes', pathMatch: 'full' },
  { path: '**', component: PageNotFoundComponent }
];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    RouterModule.forRoot(
      appRoutes,
      {
        enableTracing: true, // &lt;-- debugging purposes only
        preloadingStrategy: SelectivePreloadingStrategy,

      }
    )
  ],
  exports: [
    <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a>
  ],
  providers: [
    CanDeactivateGuard,
    SelectivePreloadingStrategy
  ]
})
export class AppRoutingModule { }


</div><!----><header class="ng-star-inserted">src/app/app-routing.module.ts (superheroes redirect)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app-routing.module.ts (superheroes redirect)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">  </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./compose-message.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">    </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CanDeactivateGuard</span><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./can-deactivate-guard.service'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AuthGuard</span><span class="pln"> </span><span class="pun">}</span><span class="pln">                </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./auth-guard.service'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">SelectivePreloadingStrategy</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./selective-preloading-strategy'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> appRoutes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'compose'</span><span class="pun">,</span><span class="pln">
    component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">ComposeMessageComponent</span><span class="pun">,</span><span class="pln">
    outlet</span><span class="pun">:</span><span class="pln"> </span><span class="str">'popup'</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'admin'</span><span class="pun">,</span><span class="pln">
    loadChildren</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app/admin/admin.module#AdminModule'</span><span class="pun">,</span><span class="pln">
    canLoad</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">AuthGuard</span><span class="pun">]</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'crisis-center'</span><span class="pun">,</span><span class="pln">
    loadChildren</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app/crisis-center/crisis-center.module#CrisisCenterModule'</span><span class="pun">,</span><span class="pln">
    data</span><span class="pun">:</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> preload</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">   redirectTo</span><span class="pun">:</span><span class="pln"> </span><span class="str">'/superheroes'</span><span class="pun">,</span><span class="pln"> pathMatch</span><span class="pun">:</span><span class="pln"> </span><span class="str">'full'</span><span class="pln"> </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> path</span><span class="pun">:</span><span class="pln"> </span><span class="str">'**'</span><span class="pun">,</span><span class="pln"> component</span><span class="pun">:</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">
      appRoutes</span><span class="pun">,</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">
        enableTracing</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">,</span><span class="pln"> </span><span class="com">// &lt;-- debugging purposes only</span><span class="pln">
        preloadingStrategy</span><span class="pun">:</span><span class="pln"> </span><span class="typ">SelectivePreloadingStrategy</span><span class="pun">,</span><span class="pln">

      </span><span class="pun">}</span><span class="pln">
    </span><span class="pun">)</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">CanDeactivateGuard</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">SelectivePreloadingStrategy</span><span class="pln">
  </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppRoutingModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">由于 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令没有关联到路由配置，所以你需要修改相关的路由链接，以便在新的路由激活时，它们也能保持激活状态。你要修改 <code>app.component.ts</code> 模板中的 <code>/heroes</code> 路由链接。</p><p translation-origin="off">Since <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>s aren't tied to route configuration, you'll need to update the associated router links so they remain active when the new route is active. You'll update the <code>app.component.ts</code> template for the <code>/heroes</code> routerLink.</p>

<code-example path="router/src/app/app.component.ts" linenums="false" title="src/app/app.component.ts (superheroes active routerLink)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  template: `
    &lt;h1 class="title"&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
    &lt;nav&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/crisis-center" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/superheroes" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/admin" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Admin&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>="/login" <a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor">routerLinkActive</a>="active"&gt;Login&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
      &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;/nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a> name="popup"&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
  `
})
export class AppComponent {
}


</div><!----><header class="ng-star-inserted">src/app/app.component.ts (superheroes active routerLink)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (superheroes active routerLink)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-root'</span><span class="pun">,</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;h1 class="title"&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
    &lt;nav&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/crisis-center" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/superheroes" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Heroes&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/admin" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Admin&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> </span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">="/login" </span><a href="https://angular.cn/api/router/RouterLinkActive" class="code-anchor"><span class="str">routerLinkActive</span></a><span class="str">="active"&gt;Login&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
      &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="[{ outlets: { popup: ['compose'] } }]"&gt;Contact&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;/nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str"> name="popup"&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当这些重定向设置好之后，所有以前的路由都指向了它们的新目标，并且每个 URL 也仍然能正常工作。</p><p translation-origin="off">With the redirects setup, all previous routes now point to their new destinations and both URLs still function as intended.</p>

<a id="inspect-config"></a>
<h2 translation-result="" id="inspect-the-routers-configuration">审查路由器配置<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#inspect-the-routers-configuration"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="inspect-the-routers-configuration">Inspect the router's configuration<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#inspect-the-routers-configuration"><i class="material-icons">link</i></a></h2>

<p translation-result="">你把大量的精力投入到在一系列路由模块文件里配置路由器上，并且小心的<a href="https://angular.cn/guide/router#routing-module-order">以合适的顺序</a>列出它们。
这些路由是否真的如同你预想的那样执行了？
路由器的真实配置是怎样的？</p><p translation-origin="off">You put a lot of effort into configuring the router in several routing module files
and were careful to list them <a href="https://angular.cn/guide/router#routing-module-order">in the proper order</a>.
Are routes actually evaluated as you planned?
How is the router really configured?</p>

<p translation-result="">通过注入它（Router）并检查它的 <code>config</code> 属性，你可以随时审查路由器的当前配置。
例如，把 <code>AppModule</code> 修改为这样，并在浏览器的控制台窗口中查看最终的路由配置。</p><p translation-origin="off">You can inspect the router's current configuration any time by injecting it and
examining its <code>config</code> property.
For example, update the <code>AppModule</code> as follows and look in the browser console window
to see the finished route configuration.</p>

<code-example path="router/src/app/app.module.ts" linenums="false" title="src/app/app.module.ts (inspect the router config)" region="inspect-config" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a> } from '@angular/router';

export class AppModule {
  // Diagnostic only: inspect router configuration
  constructor(router: <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>) {
    console.log('<a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a>: ', JSON.stringify(router.config, undefined, 2));
  }
}

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (inspect the router config)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (inspect the router config)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// Diagnostic only: inspect router configuration</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">router</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="typ">Router</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'</span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="str">Routes</span></a><span class="str">: '</span><span class="pun">,</span><span class="pln"> JSON</span><span class="pun">.</span><span class="pln">stringify</span><span class="pun">(</span><span class="pln">router</span><span class="pun">.</span><span class="pln">config</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">));</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="final-app"></a>
<h2 translation-result="" id="wrap-up-and-final-app">总结与最终的应用<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#wrap-up-and-final-app"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="wrap-up-and-final-app">Wrap up and final app<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#wrap-up-and-final-app"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章中涉及到了很多背景知识，而且本应用程序也太大了，所以没法在这里显示。请访问<live-example title="Router Sample in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="Router Sample in Stackblitz">Router Sample in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>，在那里你可以下载最终的源码。</p><p translation-origin="off">You've covered a lot of ground in this guide and the application is too big to reprint here.
Please visit the <live-example title="Router Sample in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/router/stackblitz.html" title="Router Sample in Stackblitz">Router Sample in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/router/router.zip">下载范例</a></span></span></span></live-example>
where you can download the final source code.</p>

<a id="appendices"></a>
<h2 translation-result="" id="appendices">附录<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendices"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="appendices">Appendices<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendices"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章剩下的部分是一组附录，它详尽阐述了那些曾匆匆带过的知识点。</p><p translation-origin="off">The balance of this guide is a set of appendices that
elaborate some of the points you covered quickly above.</p>

<p translation-result="">该附件中的内容不是必须的，感兴趣的人才需要阅读它。</p><p translation-origin="off">The appendix material isn't essential. Continued reading is for the curious.</p>

<a id="link-parameters-array"></a>
<h3 translation-result="" id="appendix-link-parameters-array">附录：链接参数数组<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendix-link-parameters-array"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="appendix-link-parameters-array">Appendix: link parameters array<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendix-link-parameters-array"><i class="material-icons">link</i></a></h3>

<p translation-result="">链接参数数组保存路由导航时所需的成分：</p><p translation-origin="off">A link parameters array holds the following ingredients for router navigation:</p>

<ul>
<li>
<p translation-result=""> 指向目标组件的那个路由的<em>路径（path）</em></p><p translation-origin="off">The <em>path</em> of the route to the destination component.</p>

</li>
<li>
<p translation-result=""> 必备路由参数和可选路由参数，它们将进入该路由的 URL</p><p translation-origin="off">Required and optional route parameters that go into the route URL.</p>

</li>
</ul>
<p translation-result="">你可以把 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> 指令绑定到一个数组，就像这样：</p><p translation-origin="off">You can bind the <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> directive to such an array like this:</p>

<code-example path="router/src/app/app.component.3.ts" linenums="false" title="src/app/app.component.ts (h-anchor)" region="h-anchor" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/heroes']"&gt;Heroes&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (h-anchor)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (h-anchor)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"['/heroes']"</span><span class="tag">&gt;</span><span class="pln">Heroes</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在指定路由参数时，你写过一个双元素的数组，就像这样：</p><p translation-origin="off">You've written a two element array when specifying a route parameter like this:</p>

<code-example path="router/src/app/heroes/hero-list.component.1.ts" linenums="false" title="src/app/heroes/hero-list.component.ts (nav-to-detail)" region="nav-to-detail" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/hero', hero.id]"&gt;
  &lt;span class="badge"&gt;{{ hero.id }}&lt;/span&gt;{{ hero.name }}
&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (nav-to-detail)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (nav-to-detail)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"['/hero', hero.id]"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;span</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"badge"</span><span class="tag">&gt;</span><span class="pln">{{ hero.id }}</span><span class="tag">&lt;/span&gt;</span><span class="pln">{{ hero.name }}
</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你可以在对象中提供可选的路由参数，就像这样：</p><p translation-origin="off">You can provide optional route parameters in an object like this:</p>

<code-example path="router/src/app/app.component.3.ts" linenums="false" title="src/app/app.component.ts (cc-query-params)" region="cc-query-params" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center', { foo: 'foo' }]"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (cc-query-params)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (cc-query-params)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"['/crisis-center', { foo: 'foo' }]"</span><span class="tag">&gt;</span><span class="pln">Crisis Center</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这三个例子涵盖了你在单级路由的应用中所需的一切。在你添加一个像<em>危机中心</em>一样的子路由时，你可以创建新链接数组。</p><p translation-origin="off">These three examples cover the need for an app with one level routing.
The moment you add a child router, such as the crisis center, you create new link array possibilities.</p>

<p translation-result="">回忆一下，你曾为<em>危机中心</em>指定过一个默认的子路由，以便能使用这种简单的 <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code>。</p><p translation-origin="off">Recall that you specified a default child route for the crisis center so this simple <code><a href="https://angular.cn/api/router/RouterLink" class="code-anchor">RouterLink</a></code> is fine.</p>

<code-example path="router/src/app/app.component.3.ts" linenums="false" title="src/app/app.component.ts (cc-anchor-w-default)" region="cc-anchor-w-default" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center']"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (cc-anchor-w-default)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (cc-anchor-w-default)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"['/crisis-center']"</span><span class="tag">&gt;</span><span class="pln">Crisis Center</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">分解一下。</p><p translation-origin="off">Parse it out.</p>

<ul>
<li>
<p translation-result=""> 数组中的第一个条目标记出了父路由(<code>/crisis-center</code>)。</p><p translation-origin="off">The first item in the array identifies the parent route (<code>/crisis-center</code>).</p>

</li>
<li>
<p translation-result=""> 这个父路由没有参数，因此这步已经完成了。</p><p translation-origin="off">There are no parameters for this parent route so you're done with it.</p>

</li>
<li>
<p translation-result=""> 没有默认的子路由，因此你得选取一个。</p><p translation-origin="off">There is no default for the child route so you need to pick one.</p>

</li>
<li>
<p translation-result=""> 你决定跳转到 <code>CrisisListComponent</code>，它的路由路径是'/'，但你不用显式的添加它。</p><p translation-origin="off">You're navigating to the <code>CrisisListComponent</code>, whose route path is <code>/</code>, but you don't need to explicitly add the slash.</p>

</li>
<li>
<p translation-result=""> 哇！<code>['/crisis-center']</code>。</p><p translation-origin="off">Voilà! <code>['/crisis-center']</code>.</p>

</li>
</ul>
<p translation-result="">更进一步。这次要构建一个从根组件往下导航到“巨龙危机”时的链接参数数组：</p><p translation-origin="off">Take it a step further. Consider the following router link that
navigates from the root of the application down to the <em>Dragon Crisis</em>:</p>

<code-example path="router/src/app/app.component.3.ts" linenums="false" title="src/app/app.component.ts (Dragon-anchor)" region="Dragon-anchor" ng-version="6.0.0"><div style="display: none">
&lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center', 1]"&gt;Dragon Crisis&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (Dragon-anchor)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (Dragon-anchor)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="atn">routerLink</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"['/crisis-center', 1]"</span><span class="tag">&gt;</span><span class="pln">Dragon Crisis</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<ul>
<li>
<p translation-result=""> 数组中的第一个条目标记出了父路由(<code>/crisis-center</code>)。</p><p translation-origin="off">The first item in the array identifies the parent route (<code>/crisis-center</code>).</p>

</li>
<li>
<p translation-result=""> 这个父路由没有参数，因此这步已经完成了。</p><p translation-origin="off">There are no parameters for this parent route so you're done with it.</p>

</li>
<li>
<p translation-result=""> 数组中的第二个条目（'/:id'）用来标记出到指定危机的详情页的子路由。</p><p translation-origin="off">The second item identifies the child route details about a particular crisis (<code>/:id</code>).</p>

</li>
<li>
<p translation-result=""> 详细的子路由需要一个 <code>id</code> 路由参数。</p><p translation-origin="off">The details child route requires an <code>id</code> route parameter.</p>

</li>
<li>
<p translation-result=""> 你把<em>巨龙危机</em>的 <code>id</code> 添加为该数组中的第二个条目（<code>1</code>）。</p><p translation-origin="off">You added the <code>id</code> of the <em>Dragon Crisis</em> as the second item in the array (<code>1</code>).</p>

</li>
<li>
<p translation-result=""> 最终生成的路径是 <code>/crisis-center/1</code>。</p><p translation-origin="off">The resulting path is <code>/crisis-center/1</code>.</p>

</li>
</ul>
<p translation-result="">只要想，你也可以用<em>危机中心</em>路由单独重定义 <code>AppComponent</code> 的模板：</p><p translation-origin="off">If you wanted to, you could redefine the <code>AppComponent</code> template with <em>Crisis Center</em> routes exclusively:</p>

<code-example path="router/src/app/app.component.3.ts" linenums="false" title="src/app/app.component.ts (template)" region="template" ng-version="6.0.0"><div style="display: none">
template: `
  &lt;h1 class="title"&gt;Angular <a href="https://angular.cn/api/router/Router" class="code-anchor">Router</a>&lt;/h1&gt;
  &lt;nav&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center']"&gt;Crisis Center&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center/1', { foo: 'foo' }]"&gt;Dragon Crisis&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
    &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> [<a href="https://angular.cn/api/router/RouterLink" class="code-anchor">routerLink</a>]="['/crisis-center/2']"&gt;Shark Crisis&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
  &lt;/nav&gt;
  &lt;<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;&lt;/<a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor">router-outlet</a>&gt;
`

</div><!----><header class="ng-star-inserted">src/app/app.component.ts (template)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.ts (template)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
  &lt;h1 class="title"&gt;Angular </span><a href="https://angular.cn/api/router/Router" class="code-anchor"><span class="str">Router</span></a><span class="str">&lt;/h1&gt;
  &lt;nav&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="['/crisis-center']"&gt;Crisis Center&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="['/crisis-center/1', { foo: 'foo' }]"&gt;Dragon Crisis&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
    &lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> [</span><a href="https://angular.cn/api/router/RouterLink" class="code-anchor"><span class="str">routerLink</span></a><span class="str">]="['/crisis-center/2']"&gt;Shark Crisis&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str">&gt;
  &lt;/nav&gt;
  &lt;</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;&lt;/</span><a href="https://angular.cn/api/router/RouterOutlet" class="code-anchor"><span class="str">router-outlet</span></a><span class="str">&gt;
`</span></code>
    </pre></aio-code></code-example>
<p translation-result="">总结：你可以用一级、两级或多级路由来写应用程序。
链接参数数组提供了用来表示任意深度路由的链接参数数组以及任意合法的路由参数序列、必须的路由器参数以及可选的路由参数对象。</p><p translation-origin="off">In sum, you can write applications with one, two or more levels of routing.
The link parameters array affords the flexibility to represent any routing depth and
any legal sequence of route paths, (required) router parameters, and (optional) route parameter objects.</p>

<a id="browser-url-styles"></a>
<a id="location-strategy"></a>
<h3 translation-result="" id="appendix-emlocationstrategyem-and-browser-url-styles">附录：<em>LocationStrategy</em> 以及浏览器 URL 样式<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendix-emlocationstrategyem-and-browser-url-styles"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="appendix-locationstrategy-and-browser-url-styles">Appendix: <em>LocationStrategy</em> and browser URL styles<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#appendix-locationstrategy-and-browser-url-styles"><i class="material-icons">link</i></a></h3>

<p translation-result="">当路由器导航到一个新的组件视图时，它会用该视图的 URL 来更新浏览器的当前地址以及历史。
严格来说，这个 URL 其实是本地的，浏览器不会把该 URL 发给服务器，并且不会重新加载此页面。</p><p translation-origin="off">When the router navigates to a new component view, it updates the browser's location and history
with a URL for that view.
This is a strictly local URL. The browser shouldn't send this URL to the server
and should not reload the page.</p>

<p translation-result="">现代 HTML 5 浏览器支持<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries">history.pushState</a> API，
这是一项可以改变浏览器的当前地址和历史，却又不会触发服务端页面请求的技术。
路由器可以合成出一个“自然的”URL，它看起来和那些需要进行页面加载的 URL 没什么区别。</p><p translation-origin="off">Modern HTML5 browsers support
<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" title="HTML5 browser history push-state">history.pushState</a>,
a technique that changes a browser's location and history without triggering a server page request.
The router can compose a "natural" URL that is indistinguishable from
one that would otherwise require a page load.</p>

<p translation-result="">下面是<em>危机中心</em>的 URL 在“HTML 5 pushState”风格下的样子：</p><p translation-origin="off">Here's the <em>Crisis Center</em> URL in this "HTML5 pushState" style:</p>

<code-example format="nocode" ng-version="6.0.0"><div style="display: none">
  localhost:3002/crisis-center/

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3002</span><span class="pun">/</span><span class="pln">crisis</span><span class="pun">-</span><span class="pln">center</span><span class="pun">/</span></code>
    </pre></aio-code></code-example>
<p translation-result="">老旧的浏览器在当前地址的 URL 变化时总会往服务器发送页面请求……唯一的例外规则是：当这些变化位于“#”（被称为“hash”）后面时不会发送。通过把应用内的路由 URL 拼接在 <code>#</code> 之后，路由器可以获得这条“例外规则”带来的优点。下面是到<em>危机中心</em>路由的“hash URL”：</p><p translation-origin="off">Older browsers send page requests to the server when the location URL changes
<em>unless</em> the change occurs after a "#" (called the "hash").
Routers can take advantage of this exception by composing in-application route
URLs with hashes.  Here's a "hash URL" that routes to the <em>Crisis Center</em>.</p>

<code-example format="nocode" ng-version="6.0.0"><div style="display: none">
  localhost:3002/src/#/crisis-center/

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">localhost</span><span class="pun">:</span><span class="lit">3002</span><span class="pun">/</span><span class="pln">src</span><span class="pun">/</span><span class="com">#/crisis-center/</span></code>
    </pre></aio-code></code-example>
<p translation-result="">路由器通过两种 <code><a href="https://angular.cn/api/common/LocationStrategy" class="code-anchor">LocationStrategy</a></code> 提供商来支持所有这些风格：</p><p translation-origin="off">The router supports both styles with two <code><a href="https://angular.cn/api/common/LocationStrategy" class="code-anchor">LocationStrategy</a></code> providers:</p>

<ol>
<li>
<p translation-result=""><code><a href="https://angular.cn/api/common/PathLocationStrategy" class="code-anchor">PathLocationStrategy</a></code> - 默认的策略，支持“HTML 5 pushState”风格。</p><p translation-origin="off"><code><a href="https://angular.cn/api/common/PathLocationStrategy" class="code-anchor">PathLocationStrategy</a></code>—the default "HTML5 pushState" style.</p>

</li>
<li>
<p translation-result=""><code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code> - 支持“hash URL”风格。</p><p translation-origin="off"><code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code>—the "hash URL" style.</p>

</li>
</ol>
<p translation-result=""><code>RouterModule.forRoot</code> 函数把 <code><a href="https://angular.cn/api/common/LocationStrategy" class="code-anchor">LocationStrategy</a></code> 设置成了 <code><a href="https://angular.cn/api/common/PathLocationStrategy" class="code-anchor">PathLocationStrategy</a></code>，使其成为了默认策略。
你可以在启动过程中改写（override）它，来切换到 <code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code> 风格 —— 如果你更喜欢这种。</p><p translation-origin="off">The <code>RouterModule.forRoot</code> function sets the <code><a href="https://angular.cn/api/common/LocationStrategy" class="code-anchor">LocationStrategy</a></code> to the <code><a href="https://angular.cn/api/common/PathLocationStrategy" class="code-anchor">PathLocationStrategy</a></code>,
making it the default strategy.
You can switch to the <code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code> with an override during the bootstrapping process if you prefer it.</p>

<div class="l-sub-section">
<p translation-result="">要学习关于“提供商”和启动过程的更多知识，参见<a href="https://angular.cn/guide/dependency-injection#bootstrap">依赖注入</a>一章。</p><p translation-origin="off">Learn about providers and the bootstrap process in the
<a href="https://angular.cn/guide/dependency-injection#bootstrap">Dependency Injection guide</a>.</p>

</div>
<h4 translation-result="" id="which-strategy-is-best">哪种策略更好？<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#which-strategy-is-best"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="which-strategy-is-best">Which strategy is best?<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#which-strategy-is-best"><i class="material-icons">link</i></a></h4>

<p translation-result="">你必须选择一种策略，并且在项目的早期就这么干。一旦该应用进入了生产阶段，要改起来可就不容易了，因为外面已经有了大量对应用 URL 的引用。</p><p translation-origin="off">You must choose a strategy and you need to make the right call early in the project.
It won't be easy to change later once the application is in production
and there are lots of application URL references in the wild.</p>

<p translation-result="">几乎所有的 Angular 项目都会使用默认的 HTML 5 风格。它生成的 URL 更易于被用户理解，它也为将来做<strong>服务端渲染</strong>预留了空间。</p><p translation-origin="off">Almost all Angular projects should use the default HTML5 style.
It produces URLs that are easier for users to understand.
And it preserves the option to do <em>server-side rendering</em> later.</p>

<p translation-result="">在服务器端渲染指定的页面，是一项可以在该应用首次加载时大幅提升响应速度的技术。那些原本需要十秒甚至更长时间加载的应用，可以预先在服务端渲染好，并在少于一秒的时间内完整呈现在用户的设备上。</p><p translation-origin="off">Rendering critical pages on the server is a technique that can greatly improve
perceived responsiveness when the app first loads.
An app that would otherwise take ten or more seconds to start
could be rendered on the server and delivered to the user's device
in less than a second.</p>

<p translation-result="">只有当应用的 URL 看起来像是标准的 Web URL，中间没有 hash（#）时，这个选项才能生效。</p><p translation-origin="off">This option is only available if application URLs look like normal web URLs
without hashes (#) in the middle.</p>

<p translation-result="">除非你有强烈的理由不得不使用 hash 路由，否则就应该坚决使用默认的 HTML 5 路由风格。</p><p translation-origin="off">Stick with the default unless you have a compelling reason to
resort to hash routes.</p>

<h4 translation-result="" id="html5-urls-and-the--emx3cbase-hrefem">HTML 5 URL 与<em>&lt;base href&gt;</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#html5-urls-and-the--emx3cbase-hrefem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="html5-urls-and-the--base-href">HTML5 URLs and the  <em>&lt;base href&gt;</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#html5-urls-and-the--base-href"><i class="material-icons">link</i></a></h4>

<p translation-result="">由于路由器默认使用“<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" target="_blank" title="Browser history push-state">HTML 5 pushState</a>”风格，所以你<em>必须</em>用一个<strong>base href</strong>来配置该策略（Strategy）。</p><p translation-origin="off">While the router uses the
<a href="https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries" title="Browser history push-state">HTML5 pushState</a>
style by default, you <em>must</em> configure that strategy with a <strong>base href</strong>.</p>

<p translation-result="">配置该策略的首选方式是往 <code>index.html</code> 的 <code>&lt;head&gt;</code> 中添加一个<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base">&lt;base href&gt; element</a>标签。</p><p translation-origin="off">The preferred way to configure the strategy is to add a
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base" title="base href">&lt;base href&gt; element</a>
tag in the <code>&lt;head&gt;</code> of the <code>index.html</code>.</p>

<code-example path="router/src/index.html" linenums="false" title="src/index.html (base-href)" region="base-href" ng-version="6.0.0"><div style="display: none">
&lt;base href="/"&gt;

</div><!----><header class="ng-star-inserted">src/index.html (base-href)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/index.html (base-href)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;base</span><span class="pln"> </span><span class="atn">href</span><span class="pun">=</span><span class="atv">"/"</span><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果没有此标签，当通过“深链接”进入该应用时，浏览器就不能加载资源（图片、CSS、脚本）。如果有人把应用的链接粘贴进浏览器的地址栏或从邮件中点击应用的链接时，这种问题就发生。</p><p translation-origin="off">Without that tag, the browser may not be able to load resources
(images, CSS, scripts) when "deep linking" into the app.
Bad things could happen when someone pastes an application link into the
browser's address bar or clicks such a link in an email.</p>

<p translation-result="">有些开发人员可能无法添加 <code>&lt;base&gt;</code> 元素，这可能是因为它们没有访问 <code>&lt;head&gt;</code> 或 <code>index.html</code> 的权限。</p><p translation-origin="off">Some developers may not be able to add the <code>&lt;base&gt;</code> element, perhaps because they don't have
access to <code>&lt;head&gt;</code> or the <code>index.html</code>.</p>

<p translation-result="">它们仍然可以使用 HTML 5 格式的 URL，但要采取两个步骤进行补救：</p><p translation-origin="off">Those developers may still use HTML5 URLs by taking two remedial steps:</p>

<ol>
<li>
<p translation-result="">用适当的<a href="https://angular.cn/">APP_BASE_HREF</a>值提供（provide）路由器。</p><p translation-origin="off">Provide the router with an appropriate <a href="https://angular.cn/">APP_BASE_HREF</a> value.</p>

</li>
<li>
<p translation-result="">对所有 Web 资源使用<strong>绝对地址</strong>：CSS、图片、脚本、模板 HTML。</p><p translation-origin="off">Use <em>root URLs</em> for all web resources: CSS, images, scripts, and template HTML files.</p>

</li>
</ol>
<a id="hashlocationstrategy"></a>
<h4 translation-result="" id="emhashlocationstrategyem"><em>HashLocationStrategy</em> 策略<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#emhashlocationstrategyem"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="hashlocationstrategy"><em>HashLocationStrategy</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/router#hashlocationstrategy"><i class="material-icons">link</i></a></h4>

<p translation-result="">你可以在根模块的 <code>RouterModule.forRoot</code> 的第二个参数中传入一个带有 <code>useHash: true</code> 的对象，以回到基于 <code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code> 的传统方式。</p><p translation-origin="off">You can go old-school with the <code><a href="https://angular.cn/api/common/HashLocationStrategy" class="code-anchor">HashLocationStrategy</a></code> by
providing the <code>useHash: true</code> in an object as the second argument of the <code>RouterModule.forRoot</code>
in the <code>AppModule</code>.</p>

<code-example path="router/src/app/app.module.6.ts" linenums="false" title="src/app/app.module.ts (hash URL strategy)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }             from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }        from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a> }          from '@angular/forms';
import { <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a>, <a href="https://angular.cn/api/router/RouterModule" class="code-anchor">RouterModule</a> } from '@angular/router';

import { AppComponent }          from './app.component';
import { PageNotFoundComponent } from './not-found.component';

const routes: <a href="https://angular.cn/api/router/Routes" class="code-anchor">Routes</a> = [

];

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a>,
    RouterModule.forRoot(routes, { useHash: true })  // .../#/crisis-center/
  ],
  declarations: [
    AppComponent,
    PageNotFoundComponent
  ],
  providers: [

  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</div><!----><header class="ng-star-inserted">src/app/app.module.ts (hash URL strategy)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (hash URL strategy)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/router/RouterModule" class="code-anchor"><span class="typ">RouterModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/router'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">PageNotFoundComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./not-found.component'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> routes</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/router/Routes" class="code-anchor"><span class="typ">Routes</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">

</span><span class="pun">];</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor"><span class="typ">FormsModule</span></a><span class="pun">,</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">(</span><span class="pln">routes</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> useHash</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">})</span><span class="pln">  </span><span class="com">// .../#/crisis-center/</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">PageNotFoundComponent</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">

  </span><span class="pun">],</span><span class="pln">
  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>

</div>
<!-- links to this doc:
 - guide/ajs-quick-reference
 - guide/architecture
 - guide/change-log
 - guide/dependency-injection-in-action
 - guide/deployment
 - guide/glossary
 - guide/lazy-loading-ngmodules
 - guide/sharing-ngmodules
 - guide/template-syntax
 - guide/testing
 - guide/universal
 - guide/upgrade
-->
<!-- links from this doc:
 - api/animations/animate
 - api/animations/query
 - api/animations/state
 - api/animations/style
 - api/animations/transition
 - api/animations/trigger
 - api/common/AsyncPipe
 - api/common/CommonModule
 - api/common/HashLocationStrategy
 - api/common/LocationStrategy
 - api/common/NgForOf
 - api/common/NgIf
 - api/common/PathLocationStrategy
 - api/core/Component
 - api/core/HostBinding
 - api/core/Injectable
 - api/core/Injector
 - api/core/NgModule
 - api/core/OnInit
 - api/core/testing/async
 - api/forms/DefaultValueAccessor
 - api/forms/FormsModule
 - api/forms/NgModel
 - api/platform-browser-dynamic/platformBrowserDynamic
 - api/platform-browser/BrowserModule
 - api/platform-browser/animations/BrowserAnimationsModule
 - api/router/ActivatedRoute
 - api/router/ActivatedRoute#paramMap
 - api/router/ActivatedRouteSnapshot
 - api/router/CanActivate
 - api/router/CanActivateChild
 - api/router/CanDeactivate
 - api/router/CanLoad
 - api/router/NavigationCancel
 - api/router/NavigationEnd
 - api/router/NavigationError
 - api/router/NavigationExtras
 - api/router/NavigationStart
 - api/router/ParamMap
 - api/router/Params
 - api/router/PreloadAllModules
 - api/router/PreloadingStrategy
 - api/router/Resolve
 - api/router/Route
 - api/router/RouteConfigLoadEnd
 - api/router/RouteConfigLoadStart
 - api/router/Router
 - api/router/Router#events
 - api/router/Router#navigate
 - api/router/RouterLink
 - api/router/RouterLinkActive
 - api/router/RouterLinkWithHref
 - api/router/RouterModule
 - api/router/RouterModule#forRoot
 - api/router/RouterOutlet
 - api/router/RouterState
 - api/router/RouterStateSnapshot
 - api/router/RouterStateSnapshot#url
 - api/router/Routes
 - api/router/RoutesRecognized
 - api/upgrade/static
 - guide/animations
 - guide/dependency-injection#bootstrap
 - guide/glossary#view
 - guide/router#a-crisis-center-with-child-routes
 - guide/router#activated-route
 - guide/router#activated-route-in-action
 - guide/router#add-a-secondary-route
 - guide/router#add-an-admin-feature-module
 - guide/router#add-heroes-functionality
 - guide/router#add-the-emlogincomponentem
 - guide/router#add-the-logincomponent
 - guide/router#add-the-routing-module-to-the-emheroesmoduleem
 - guide/router#add-the-routing-module-to-the-heroesmodule
 - guide/router#adding-animations-to-the-routed-component
 - guide/router#appendices
 - guide/router#appendix-emlocationstrategyem-and-browser-url-styles
 - guide/router#appendix-link-parameters-array
 - guide/router#appendix-locationstrategy-and-browser-url-styles
 - guide/router#asynchronous-routing
 - guide/router#base-href
 - guide/router#basics-wrap-up
 - guide/router#browser-url-styles
 - guide/router#can-activate-child-guard
 - guide/router#can-activate-guard
 - guide/router#can-load-guard
 - guide/router#canactivate-requiring-authentication
 - guide/router#canactivatechild-guarding-child-routes
 - guide/router#cancel-and-save
 - guide/router#candeactivate-handling-unsaved-changes
 - guide/router#canload-blocks-preload
 - guide/router#canload-guard-guarding-unauthorized-loading-of-feature-modules
 - guide/router#changing-heroes-to-superheroes
 - guide/router#child-route-configuration
 - guide/router#child-routing-component
 - guide/router#clear-secondary-routes
 - guide/router#clearing-secondary-routes
 - guide/router#component-less-route-grouping-routes-without-a-component
 - guide/router#configuration
 - guide/router#custom-preloading
 - guide/router#custom-preloading-strategy
 - guide/router#define-routes
 - guide/router#displaying-multiple-routes-in-named-outlets
 - guide/router#do-you-need-a-emrouting-moduleem
 - guide/router#do-you-need-a-routing-module
 - guide/router#emactivated-routeem-in-action
 - guide/router#emcanactivatechildem-guarding-child-routes
 - guide/router#emcanactivateem-requiring-authentication
 - guide/router#emcandeactivateem-handling-unsaved-changes
 - guide/router#emcanloadem-guard-guarding-unauthorized-loading-of-feature-modules
 - guide/router#emhashlocationstrategyem
 - guide/router#emheroem-feature-route-configuration
 - guide/router#emheroem-feature-routing-requirements
 - guide/router#emresolveem-pre-fetching-component-data
 - guide/router#emrouter-directivesem
 - guide/router#emrouterlinkactiveem-binding
 - guide/router#emrouterlinkem-binding
 - guide/router#emrouteroutletem
 - guide/router#emsnapshotem-the-emno-observableem-alternative
 - guide/router#emx3cbase-hrefem
 - guide/router#example-config
 - guide/router#fetch-data-before-navigating
 - guide/router#fragment
 - guide/router#guard-the-admin-feature
 - guide/router#guards
 - guide/router#hashlocationstrategy
 - guide/router#hero-feature-route-configuration
 - guide/router#hero-feature-routing-requirements
 - guide/router#hero-routing-module
 - guide/router#heroes-list-optionally-selecting-a-hero
 - guide/router#how-preloading-works
 - guide/router#html5-urls-and-the--base-href
 - guide/router#html5-urls-and-the--emx3cbase-hrefem
 - guide/router#import-crisis-center-module-into-the-appmodule-routes
 - guide/router#import-crisis-center-module-into-the-emappmoduleem-routes
 - guide/router#import-hero-module-into-appmodule
 - guide/router#importing-from-the-router-library
 - guide/router#inspect-config
 - guide/router#inspect-the-routers-configuration
 - guide/router#lazy-load-the-crisis-center
 - guide/router#lazy-load-the-emcrisis-centerem
 - guide/router#lazy-loading-route-configuration
 - guide/router#link-parameters-array
 - guide/router#migrating-urls-with-redirects
 - guide/router#milestone-1-getting-started-with-the-router
 - guide/router#milestone-2-emrouting-moduleem
 - guide/router#milestone-2-routing-module
 - guide/router#milestone-3-heroes-feature
 - guide/router#milestone-3-wrap-up
 - guide/router#milestone-4-crisis-center-feature
 - guide/router#milestone-5-route-guards
 - guide/router#milestone-6-asynchronous-routing
 - guide/router#module-import-order-matters
 - guide/router#navigate-to-crisis-list-with-a-relative-url
 - guide/router#navigating-back-to-the-list-component
 - guide/router#observable-iparammapi-and-component-reuse
 - guide/router#observable-parammap-and-component-reuse
 - guide/router#optional-route-parameters
 - guide/router#overview
 - guide/router#overview-2
 - guide/router#parammap-api
 - guide/router#preloading-background-loading-of-feature-areas
 - guide/router#query-parameters
 - guide/router#query-parameters-and-fragments
 - guide/router#redirect
 - guide/router#redirecting-routes
 - guide/router#refactor-the-routing-configuration-into-a-emrouting-moduleem
 - guide/router#refactor-the-routing-configuration-into-a-routing-module
 - guide/router#relative-navigation
 - guide/router#remove-duplicate-hero-routes
 - guide/router#resolve-guard
 - guide/router#resolve-pre-fetching-component-data
 - guide/router#reuse
 - guide/router#route-definition-with-a-parameter
 - guide/router#route-parameters
 - guide/router#route-parameters-in-the-activatedroute-service
 - guide/router#route-parameters-in-the-emactivatedrouteem-service
 - guide/router#route-parameters-required-or-optional
 - guide/router#router-directives
 - guide/router#router-events
 - guide/router#router-imports
 - guide/router#router-links
 - guide/router#router-outlet
 - guide/router#router-outlet-1
 - guide/router#router-state
 - guide/router#routerlink-binding
 - guide/router#routerlinkactive-binding
 - guide/router#routeroutlet
 - guide/router#routing--navigation
 - guide/router#routing-module
 - guide/router#routing-module-order
 - guide/router#routing-x26-navigation
 - guide/router#secondary-route-navigation-merging-routes-during-navigation
 - guide/router#secondary-routes
 - guide/router#set-the-base-href
 - guide/router#set-the-emx3cbase-hrefem
 - guide/router#setting-the-route-parameters-in-the-list-view
 - guide/router#snapshot-the-no-observable-alternative
 - guide/router#summary
 - guide/router#summary-5
 - guide/router#teach-authguard-to-authenticate
 - guide/router#teach-emauthguardem-to-authenticate
 - guide/router#the-appcomponent-shell
 - guide/router#the-basics
 - guide/router#the-default-route-to-heroes
 - guide/router#the-emappcomponentem-shell
 - guide/router#the-emdefaultem-route-to-heroes
 - guide/router#the-sample-application
 - guide/router#the-sample-application-in-action
 - guide/router#which-strategy-is-best
 - guide/router#wildcard
 - guide/router#wildcard-route
 - guide/router#wrap-up-and-final-app
 - guide/template-syntax#attribute-binding
 - guide/template-syntax#class-binding
 - guide/template-syntax#property-binding
 - tutorial/toh-pt4
 - http://exploringjs.com/es6/ch_promises.html
 - http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes
 - http://www.w3.org/DesignIssues/MatrixURIs.html
 - https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html
 - https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries
 - https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams
 - https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
 - https://en.wikipedia.org/wiki/Fragment_identifier
--></div></aio-doc-viewer><aio-dt><!----></aio-dt></section></mat-sidenav-content></mat-sidenav-container><!----><div class="toc-container no-print ng-star-inserted"><aio-toc><!----><div class="toc-inner no-print collapsed ng-star-inserted"><!----><!----><ul class="toc-list"><!----><!----><!----><li title="路由与导航link" class="h1 active ng-star-inserted"><a href="https://angular.cn/guide/router#routing-x26-navigation">路由与导航</a></li><!----><!----><!----><li title="概览link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#overview-2">概览</a></li><!----><!----><!----><li title="基础知识link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#the-basics">基础知识</a></li><!----><!----><!----><li title="&lt;base href&gt; 元素link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emx3cbase-hrefem"><em>&lt;base href&gt;</em> 元素</a></li><!----><!----><!----><li title="从路由库中导入link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#router-imports">从路由库中导入</a></li><!----><!----><!----><li title="配置link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#configuration">配置</a></li><!----><!----><!----><li title="路由出口link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#router-outlet-1">路由出口</a></li><!----><!----><!----><li title="路由器链接link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#router-links">路由器链接</a></li><!----><!----><!----><li title="路由器状态link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#router-state">路由器状态</a></li><!----><!----><!----><li title="激活的路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#activated-route">激活的路由</a></li><!----><!----><!----><li title="路由事件link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#router-events">路由事件</a></li><!----><!----><!----><li title="总结一下link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#summary-5">总结一下</a></li><!----><!----><!----><li title="范例应用link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#the-sample-application">范例应用</a></li><!----><!----><!----><li title="范例程序的动图link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#the-sample-application-in-action">范例程序的动图</a></li><!----><!----><!----><li title="里程碑 1：从路由器开始link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-1-getting-started-with-the-router">里程碑 1：从路由器开始</a></li><!----><!----><!----><li title="设置&lt;base href&gt;link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#set-the-emx3cbase-hrefem">设置<em>&lt;base href&gt;</em></a></li><!----><!----><!----><li title="从路由库中导入link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#importing-from-the-router-library">从路由库中导入</a></li><!----><!----><!----><li title="AppComponent 外壳组件link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#the-emappcomponentem-shell"><em>AppComponent</em> 外壳组件</a></li><!----><!----><!----><li title="路由出口link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emrouteroutletem">路由出口</a></li><!----><!----><!----><li title="routerLink 绑定link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emrouterlinkem-binding"><code>routerLink</code> 绑定</a></li><!----><!----><!----><li title="routerLinkActive 绑定link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emrouterlinkactiveem-binding"><code>routerLinkActive</code> 绑定</a></li><!----><!----><!----><li title="路由器指令集link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emrouter-directivesem"><em>路由器指令集</em></a></li><!----><!----><!----><li title="通配符路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#wildcard-route">通配符路由</a></li><!----><!----><!----><li title="把默认路由设置为英雄列表link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#the-emdefaultem-route-to-heroes">把<em>默认</em>路由设置为英雄列表</a></li><!----><!----><!----><li title="重定向路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#redirecting-routes">重定向路由</a></li><!----><!----><!----><li title="“起步阶段”总结link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#basics-wrap-up">“起步阶段”总结</a></li><!----><!----><!----><li title="里程碑 #2：路由模块link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-2-emrouting-moduleem">里程碑 #2：<strong>路由模块</strong></a></li><!----><!----><!----><li title="将路由配置重构为路由模块link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#refactor-the-routing-configuration-into-a-emrouting-moduleem">将路由配置重构为<em>路由模块</em></a></li><!----><!----><!----><li title="你需要路由模块吗？link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#do-you-need-a-emrouting-moduleem">你需要<strong>路由模块</strong>吗？</a></li><!----><!----><!----><li title="里程碑 #2 英雄特征区link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-3-heroes-feature">里程碑 #2 英雄特征区</a></li><!----><!----><!----><li title="添加英雄管理功能link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#add-heroes-functionality">添加英雄管理功能</a></li><!----><!----><!----><li title="英雄特性区的路由需求link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emheroem-feature-routing-requirements"><em>英雄</em>特性区的路由需求</a></li><!----><!----><!----><li title="英雄特性区的路由配置link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emheroem-feature-route-configuration"><em>英雄</em>特性区的路由配置</a></li><!----><!----><!----><li title="把路由模块添加到 HeroesModule 中link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#add-the-routing-module-to-the-emheroesmoduleem">把路由模块添加到 <code>HeroesModule</code> 中</a></li><!----><!----><!----><li title="移除重复的“英雄管理”路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#remove-duplicate-hero-routes">移除重复的“英雄管理”路由</a></li><!----><!----><!----><li title="把“英雄管理”模块导入到 AppModulelink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#import-hero-module-into-appmodule">把“英雄管理”模块导入到 AppModule</a></li><!----><!----><!----><li title="导入模块的顺序很重要link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#module-import-order-matters">导入模块的顺序很重要</a></li><!----><!----><!----><li title="带参数的路由定义link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#route-definition-with-a-parameter">带参数的路由定义</a></li><!----><!----><!----><li title="在列表视图中设置路由参数link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#setting-the-route-parameters-in-the-list-view">在列表视图中设置路由参数</a></li><!----><!----><!----><li title="Activated Route 实战link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emactivated-routeem-in-action"><em>Activated Route</em> 实战</a></li><!----><!----><!----><li title="导航回列表组件link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#navigating-back-to-the-list-component">导航回列表组件</a></li><!----><!----><!----><li title="路由参数：必须还是可选？link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#route-parameters-required-or-optional">路由参数：必须还是可选？</a></li><!----><!----><!----><li title="英雄列表：选定一个英雄（也可不选）link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#heroes-list-optionally-selecting-a-hero">英雄列表：选定一个英雄（也可不选）</a></li><!----><!----><!----><li title="ActivatedRoute 服务中的路由参数link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#route-parameters-in-the-emactivatedrouteem-service"><em>ActivatedRoute</em> 服务中的路由参数</a></li><!----><!----><!----><li title="为路由组件添加动画link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#adding-animations-to-the-routed-component">为路由组件添加动画</a></li><!----><!----><!----><li title="里程碑#3 的总结link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-3-wrap-up">里程碑#3 的总结</a></li><!----><!----><!----><li title="里程碑#4：危机中心link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-4-crisis-center-feature">里程碑#4：危机中心</a></li><!----><!----><!----><li title="带有子路由的危机中心link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#a-crisis-center-with-child-routes">带有子路由的危机中心</a></li><!----><!----><!----><li title="子路由组件link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#child-routing-component">子路由组件</a></li><!----><!----><!----><li title="子路由配置link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#child-route-configuration">子路由配置</a></li><!----><!----><!----><li title="把危机中心模块导入到 AppModule 的路由中link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#import-crisis-center-module-into-the-emappmoduleem-routes">把危机中心模块导入到 <code>AppModule</code> 的路由中</a></li><!----><!----><!----><li title="相对导航link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#relative-navigation">相对导航</a></li><!----><!----><!----><li title="使用相对 URL 导航到危机列表link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#navigate-to-crisis-list-with-a-relative-url">使用相对 URL 导航到危机列表</a></li><!----><!----><!----><li title="用命名出口（outlet）显示多重路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#displaying-multiple-routes-in-named-outlets">用命名出口（outlet）显示多重路由</a></li><!----><!----><!----><li title="里程碑 5：路由守卫link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-5-route-guards">里程碑 5：路由守卫</a></li><!----><!----><!----><li title="CanActivate: 要求认证link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emcanactivateem-requiring-authentication"><em>CanActivate</em>: 要求认证</a></li><!----><!----><!----><li title="无组件路由: 不借助组件对路由进行分组link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#component-less-route-grouping-routes-without-a-component">无组件路由: 不借助组件对路由进行分组</a></li><!----><!----><!----><li title="CanActivateChild：保护子路由link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emcanactivatechildem-guarding-child-routes"><code>CanActivateChild</code>：保护子路由</a></li><!----><!----><!----><li title="CanDeactivate：处理未保存的更改link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emcandeactivateem-handling-unsaved-changes"><em>CanDeactivate</em>：处理未保存的更改</a></li><!----><!----><!----><li title="取消与保存link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#cancel-and-save">取消与保存</a></li><!----><!----><!----><li title="Resolve: 预先获取组件数据link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emresolveem-pre-fetching-component-data"><em>Resolve</em>: 预先获取组件数据</a></li><!----><!----><!----><li title="导航前预先加载路由信息link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#fetch-data-before-navigating">导航前预先加载路由信息</a></li><!----><!----><!----><li title="查询参数及片段link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#query-parameters-and-fragments">查询参数及片段</a></li><!----><!----><!----><li title="里程碑 6：异步路由link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#milestone-6-asynchronous-routing">里程碑 6：异步路由</a></li><!----><!----><!----><li title="惰性加载路由配置link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#lazy-loading-route-configuration">惰性加载路由配置</a></li><!----><!----><!----><li title="CanLoad 守卫：保护对特性模块的未授权加载link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#emcanloadem-guard-guarding-unauthorized-loading-of-feature-modules"><code>CanLoad</code> 守卫：保护对特性模块的未授权加载</a></li><!----><!----><!----><li title="预加载：特性区的后台加载link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#preloading-background-loading-of-feature-areas">预加载：特性区的后台加载</a></li><!----><!----><!----><li title="自定义预加载策略link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#custom-preloading-strategy">自定义预加载策略</a></li><!----><!----><!----><li title="使用重定向迁移 URLlink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#migrating-urls-with-redirects">使用重定向迁移 URL</a></li><!----><!----><!----><li title="把 /heroes 修改为 /superheroslink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#changing-heroes-to-superheroes">把 <code>/heroes</code> 修改为 <code>/superheros</code></a></li><!----><!----><!----><li title="审查路由器配置link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#inspect-the-routers-configuration">审查路由器配置</a></li><!----><!----><!----><li title="总结与最终的应用link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#wrap-up-and-final-app">总结与最终的应用</a></li><!----><!----><!----><li title="附录link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/router#appendices">附录</a></li><!----><!----><!----><li title="附录：链接参数数组link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#appendix-link-parameters-array">附录：链接参数数组</a></li><!----><!----><!----><li title="附录：LocationStrategy 以及浏览器 URL 样式link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/router#appendix-emlocationstrategyem-and-browser-url-styles">附录：<em>LocationStrategy</em> 以及浏览器 URL 样式</a></li><!----></ul><!----></div></aio-toc></div><footer class="no-print"><aio-footer><div class="grid-fluid"><!----><div class="footer-block ng-star-inserted"><h3>资源</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/about" title="Angular 贡献者。">关于</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/resources" title="网络上的 Angular 工具、培训、博客等">资源列表</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/presskit" title="我们的联系方式、LOGO 和品牌">宣传资料</a></li><li class="ng-star-inserted"><a class="link" href="https://blog.angular.io/" title="Angular 官方博客">博客</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>帮助</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://stackoverflow.com/questions/tagged/angular" title="Stack Overflow: 这里的社区会回答你关于 Angular 的技术问题">Stack Overflow</a></li><li class="ng-star-inserted"><a class="link" href="https://gitter.im/angular/angular" title="和老鸟聊 Angular">Gitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular/issues" title="在 github 上报告问题和建议。">报告问题</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md" title="让我们彼此尊重">行为规范</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>社区</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/events" title="Post issues and suggestions on github.">活动</a></li><li class="ng-star-inserted"><a class="link" href="http://www.meetup.com/topics/angularjs/" title="参加聚会，向别的开发人员学习">聚会</a></li><li class="ng-star-inserted"><a class="link" href="https://twitter.com/angular" title="Twitter">Twitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular" title="GitHub">GitHub</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/contribute" title="向 Angular 做贡献">做贡献</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>多语言</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.io/" title="English Version.">English Version</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.jp/" title="日本語版">日本語版</a></li></ul></div></div><p> Powered by Google ©2010-2018. 代码授权方式：<a href="https://angular.cn/license" title="License text">MIT-style License</a>. 文档授权方式：<a href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>. </p><p><span class="text-caption">本网站由第三方公司洛阳永欣维护 &nbsp;<a href="http://www.miitbeian.gov.cn/">豫ICP备16019859号-1</a></span></p><p> 当前版本：6.0.1-build.180+sha.8494cf4. </p></aio-footer></footer></aio-shell>

  <noscript>
    &lt;div class="background-sky hero"&gt;&lt;/div&gt;
    &lt;section id="intro"&gt;
      &lt;div class="hero-logo"&gt;
        &lt;img src="assets/images/logos/angular/angular.svg" width="250" height="250"&gt;
      &lt;/div&gt;
      &lt;div class="homepage-container"&gt;
        &lt;div class="hero-headline"&gt;一套框架，多种平台&lt;br&gt;移动 &amp;amp; 桌面&lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
    &lt;h2 style="color: red; text-align: center; margin-top: -50px;"&gt;
      &lt;b&gt;&lt;i&gt;该网站需要浏览器支持 JavaScript &lt;/i&gt;&lt;/b&gt;
    &lt;/h2&gt;
  </noscript>


<script type="text/javascript" src="./Angular - 路由与导航_files/runtime.e7e60529879ffb07e28e.js.下载"></script><script type="text/javascript" src="./Angular - 路由与导航_files/polyfills.56dafdd128abda80a86c.js.下载"></script><script type="text/javascript" src="./Angular - 路由与导航_files/main.e580488e21fdad9d749c.js.下载"></script><div class="cdk-visually-hidden" aria-atomic="true" aria-live="polite"></div></body></html>