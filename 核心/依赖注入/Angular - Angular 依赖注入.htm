<!DOCTYPE html>
<!-- saved from url=(0045)https://angular.cn/guide/dependency-injection -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Angular - Angular 依赖注入</title>
  <!--<base href="/">--><base href=".">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/x-icon" href="https://angular.cn/favicon.ico">
  <link rel="icon" type="image/x-icon" href="https://angular.cn/assets/images/favicons/favicon.ico">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-194x194.png" sizes="194x194">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-16x16.png" sizes="16x16">
  <link rel="apple-touch-icon" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">

  <!-- NOTE: These need to be kept in sync with `ngsw-manifest.json`. -->
  <link href="./Angular - Angular 依赖注入_files/Material_Icons.css" rel="stylesheet">
  <link href="./Angular - Angular 依赖注入_files/Droid_Sans_Mono.css" rel="stylesheet">
  <link href="./Angular - Angular 依赖注入_files/font-awesome.min.css" rel="stylesheet">
  <!-- -->

  <link rel="manifest" href="https://angular.cn/pwa-manifest.json">
  <meta name="theme-color" content="#1976d2">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="translucent">

  <script async="" src="./Angular - Angular 依赖注入_files/analytics.js.下载"></script><script>
    // Dynamically, pre-emptively, add `noindex`, which will be removed when the doc is ready and valid
    tag = document.createElement('meta'); tag.name = 'robots'; tag.content = 'noindex';
    document.head.appendChild(tag);
  </script>

  <!-- Google Analytics -->
  <script>
  // Note this is a customised version of the GA tracking snippet
  // See the comments below for more info
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;
  ~i.name.indexOf('NG_DEFER_BOOTSTRAP')|| // only load library if not running e2e tests
  m.parentNode.insertBefore(a,m)
  })(window,document,'script','assets/js/analytics.js','ga');
  </script>
  <!-- End Google Analytics -->

  <script>
    // Report fatal errors to Google Analytics
    window.onerror = function() {
      ga('send', 'exception', {exDescription: formatError.apply(null, arguments), exFatal: true});

      function formatError(msg, url, line, col, e) {
        var stack;
        msg = msg.replace(/^Error: /, '');
        if (e) {
          stack = e.stack
              // strip the leading "Error: " from the stack trace
              .replace(/^Error: /, '')
              // strip the message from the stack trace, if present
              .replace(msg + '\n', '')
              // strip leading spaces
              .replace(/^ +/gm, '')
              // strip all leading "at " for each frame
              .replace(/^at /gm, '')
              // replace long urls with just the last segment: `filename:line:column`
              .replace(/(?: \(|@)http.+\/([^/)]+)\)?(?:\n|$)/gm, '@$1\n')
              // replace "eval code" in Edge
              .replace(/ *\(eval code(:\d+:\d+)\)(?:\n|$)/gm, '@???$1\n')
        } else {
          line = line || '?';
          col = col || '?';
          stack = url + ':' + line + ':' + col;
        }
        return (msg + '\n' + stack).substr(0, 150);
      }
    };
  </script>

  <script>
    if (window.document.documentMode) {
      // polyfill IE11 in a blocking way
      var s = document.createElement('script');
      s.src = 'generated/ie-polyfills.min.js';
      document.head.appendChild(s);
    } else if (!Object.assign) {
      // polyfill other non-evergreen browsers in a blocking way
      var polyfillUrl = "https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.find&flags=gated&unknown=polyfill";

      // send a blocking XHR to fetch the polyfill
      // then append it to the document so that its eval-ed synchronously
      // this is required because the method used for IE is not reliable with other non-evergreen browsers
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        var code = this.responseText;
        s.appendChild(document.createTextNode(code));
        document.head.appendChild(s);
      });
      xhr.open("GET", polyfillUrl, false);
      xhr.send();
    }
  </script>

  <script>
    //load CE polyfill
    //HACK: webpack's html plugin mangles the document.write calls if we don't trick it.

    //load the ES5 shim for browsers with native CE support
    function loadCustomElementsShim(){
      document.write('<scri' + 'pt src="assets/js/native-shim.js"><' + '/script>');
    }

    //load the full custom elements polyfill for browsers without support
    function loadCustomElementsPolyfill(){
      document.write('<scri' + 'pt src="assets/js/custom-elements.min.js"><' + '/script>');
    }
    //detect if we have native CE support
    if(!window.customElements){
      loadCustomElementsPolyfill();
    }
    else {
      loadCustomElementsShim();
    }
  </script><script src="./Angular - Angular 依赖注入_files/native-shim.js.下载"></script>

<link rel="stylesheet" href="./Angular - Angular 依赖注入_files/styles.613b7c8de73e274bd4c6.css"><style>@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}</style><style>.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:1}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]{box-shadow:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-flat-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-fab::-moz-focus-inner{border:0}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-fab[disabled]{box-shadow:none}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-mini-fab[disabled]{box-shadow:none}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}</style><style>.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}</style><style>.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}</style><script charset="utf-8" src="./Angular - Angular 依赖注入_files/current-location-current-location-module-ngfactory.f94bfe4754b66577c07b.js.下载"></script><style>.mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}</style><script charset="utf-8" src="./Angular - Angular 依赖注入_files/code-code-example-module-ngfactory_code-code-tabs-module-ngfactory.6a5aabadc81dbdfa0f4e.js.下载"></script><script charset="utf-8" src="./Angular - Angular 依赖注入_files/code-code-tabs-module-ngfactory.8315a94f020cd25fe92d.js.下载"></script><script charset="utf-8" src="./Angular - Angular 依赖注入_files/code-code-example-module-ngfactory.d0ec50584c7428d1d6ed.js.下载"></script><script charset="utf-8" src="./Angular - Angular 依赖注入_files/12.50857b4475720140b255.js.下载"></script><style>.mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}</style><style>.mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}</style><style>.mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}</style><script charset="utf-8" src="./Angular - Angular 依赖注入_files/live-example-live-example-module-ngfactory.76888e8a441aab262101.js.下载"></script></head>
<body>

  <aio-shell ng-version="6.0.0" class="mode-stable sidenav-open page-guide-dependency-injection folder-guide view-SideNav aio-notification-hide "><div id="top-of-page"></div><!----><mat-toolbar class="app-toolbar no-print mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary"><mat-toolbar-row class="notification-container mat-toolbar-row"><aio-notification actionurl="https://bit.ly/angular-survey-2018" buttontext="Go to survey" expirationdate="2018-01-19" icon="insert_comment" iconlabel="Survey" notificationid="survey-january-2018" class="ng-tns-c2-0 ng-trigger ng-trigger-hideAnimation" style="height: 0px;"><a class="content" href="https://bit.ly/angular-survey-2018"><mat-icon class="icon mat-icon" role="img" aria-hidden="true" aria-label="Survey"><svg fill="#FFFFFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon><span class="message"> Help Angular by taking a <b>1 minute survey</b>! </span><span class="action-button">Go to survey</span></a><button class="close-button mat-icon-button" aria-label="Close" mat-icon-button=""><span class="mat-button-wrapper"><mat-icon aria-label="Dismiss notification" class="mat-icon ng-tns-c2-0" role="img" svgicon="close" aria-hidden="true"><svg fill="#ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple mat-button-ripple-round" matripple=""></div><div class="mat-button-focus-overlay"></div></button></aio-notification></mat-toolbar-row><mat-toolbar-row class="mat-toolbar-row"><button class="hamburger mat-button" mat-button="" title="Docs menu"><span class="mat-button-wrapper"><mat-icon class="mat-icon" role="img" svgicon="menu" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple" matripple=""></div><div class="mat-button-focus-overlay"></div></button><a class="nav-link home" href="https://angular.cn/"><!----><img alt="Home" height="40" src="./Angular - Angular 依赖注入_files/logo-nav@2x.png" title="Home" width="150" class="ng-star-inserted"><!----></a><!----><aio-top-menu class="ng-star-inserted"><ul role="navigation"><!----><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/features" title="特性">特性</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/docs" title="文档">文档</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/resources" title="资源">资源</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/events" title="会议">会议</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://blog.angular.io/" title="博客">博客</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/translations/cn/home" title="关于中文版">关于中文版</a></li></ul></aio-top-menu><aio-search-box class="search-container"><input aria-label="search" placeholder="搜索" type="search"></aio-search-box></mat-toolbar-row></mat-toolbar><!----><mat-sidenav-container class="sidenav-container mat-drawer-container mat-sidenav-container mat-drawer-transition has-floating-toc" role="main"><!----><div class="mat-drawer-backdrop ng-star-inserted"></div><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><mat-sidenav class="sidenav mat-drawer mat-sidenav ng-tns-c6-1 ng-trigger ng-trigger-transform mat-drawer-side ng-star-inserted" tabindex="-1" style="transform: translate3d(0px, 0px, 0px); visibility: visible;"><!----><aio-nav-menu><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/guide/quickstart" title="Angular 破冰"> 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="此《英雄指南》教程会带你用 TypeScript 一步步创建一个 Angular 应用。" aria-pressed="false"> 教程 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial" title="第一部分：《英雄指南》教程简介"> 1. 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt0" title="第二部分：创建应用的外壳"> 2. 应用的“外壳” </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt1" title="第三部分：构建一个简单的英雄编辑器"> 3. 英雄编辑器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt2" title="第四部分：构建一个主从结构的页面，用于展现英雄列表"> 4. 显示英雄列表 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt3" title="第五部分：把主从结构的页面重构成多个组件"> 5. 主从组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt4" title="第六部分：创建一个可复用的服务来管理英雄数据"> 6. 服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt5" title="第七部分：添加 Angular 路由器，并且学习在视图之间导航"> 7. 路由 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/tutorial/toh-pt6" title="第八部分：通过 HTTP 来获取并保存英雄数据"> 8. HTTP </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded selected" type="button" title="学习 Angular 的核心知识" aria-pressed="true"> 核心知识 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 应用的基本构造块。" aria-pressed="false"> 架构 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture" title="Angular 应用的基本构造块"> 架构概览 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-modules" title="关于模块。"> 模块（NgModule）简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-components" title="关于组件、模板和视图。"> 组件简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-services" title="关于服务与依赖注入。"> 服务与 DI 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/architecture-next-steps" title="学完基础知识之后……"> 后续步骤 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="使用数据绑定构建动态视图" aria-pressed="false"> 组件与模板 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/displaying-data" title="属性绑定可以帮助应用把数据显示在界面上"> 显示数据 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/template-syntax" title="学习如何写模板，以便借助数据绑定机制显示数据并响应事件。"> 模板语法 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lifecycle-hooks" title="Angular 调用指令和组件的生命周期钩子函数，包括它的创建、变更和销毁时。"> 生命周期钩子 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-interaction" title="在不同的指令和组件之间共享信息"> 组件交互 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/component-styles" title="添加专属于某个组件的样式"> 组件样式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/elements" title="把组件转换成自定义元素。"> Angular 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-component-loader" title="动态加载组件"> 动态组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/attribute-directives" title="属性型指令把行为添加到现有元素上。"> 属性型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/structural-directives" title="结构型指令可以操纵页面的布局"> 结构型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/pipes" title="管道可以在模板中转换显示的内容。"> 管道 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/animations" title="Angular 动画体系指南"> 动画 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的表单" aria-pressed="false"> 表单 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/user-input" title="用户输入触发 DOM 事件。我们通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。"> 用户输入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/forms" title="表单可以创建集中、高效、引人注目的输入体验。Angular 表单可以协调一组数据绑定控件，跟踪变更，验证输入，并表达错误信息。"> 模板驱动表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/form-validation" title="验证用户的表单输入"> 表单验证 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/reactive-forms" title="使用 FormBuilder 、分组和数组创建响应式表单。"> 响应式表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-form" title="使用FormGroup渲染动态表单"> 动态表单 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Observable 与 RxJS" aria-pressed="false"> Observable 与 RxJS <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables" title=""> 可观察对象(Observable) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/rx-library" title=""> RxJS 库 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables-in-angular" title=""> Angular 中的可观察对象 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/practical-observable-usage" title=""> 用法实战 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/comparing-observables" title=""> 与其它技术的比较 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/bootstrapping" title="在应用的根模块（AppModule）中告诉 Angular 如何构造并引导引用。"> 引导启动 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="Angular 中的模块" aria-pressed="true"> Angular 模块 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodules" title="使用 NgModule 让你的应用更高效"> NgModule 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-vs-jsmodule" title="JavaScript 模块和 NgModule 之间的差异"> JS 模块 vs NgModule </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/frequent-ngmodules" title="介绍最常用的 Angular 模块"> 常用模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/module-types" title="介绍特性模块的几种类型"> 特性模块的分类 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/entry-components" title="关于 Angular 中入口组件的一切"> 入口组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/feature-modules" title="创建特性模块，以组织你的代码"> 特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/providers" title="服务提供商与 Angular 模块"> 服务提供商 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/singleton-services" title="创建单例应用"> 单例应用 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/lazy-loading-ngmodules" title="惰性加载模块，以提高应用的性能"> 惰性加载的特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/sharing-ngmodules" title="共享 Angular 模块让你的应用现代化。"> 共享 Angular 模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-api" title="理解 NgModule 的那些细节。"> NgModule API </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/ngmodule-faq" title="回答关于 NgModules 的常见问题。"> NgModule 常见问题 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded selected" type="button" title="依赖注入：创建并注入各种服务。" aria-pressed="true"> 依赖注入 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/dependency-injection-pattern" title="学习 Angular 依赖注入系统背后的依赖注入模式"> 依赖注入模式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded selected" href="https://angular.cn/guide/dependency-injection" title="Angular 的依赖注入系统能够为 Angular 创建的类创建并交付它们所依赖的服务。"> Angular 依赖注入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/hierarchical-dependency-injection" title="Angular 的多级注入体系会建立与组件平行的注入器树。"> 多级注入器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-in-action" title="依赖注入的使用技巧"> DI 实用技巧 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/http" title="通过 HTTP 协议与远程服务器对话。"> HttpClient </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/router" title="揭示如何通过 Angular 路由进行基本的屏幕导航。"> 路由与导航 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/testing" title="测试 Angular 应用的技巧与实践。"> 测试 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/cheatsheet" title="关于 Angular 常用编码技术的快速指南。"> 速查表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="把 Angular 用到你的实际工作中的一些技巧" aria-pressed="false"> 其它技术 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/i18n" title="把应用模板中的文本翻译成多种语言。"> 国际化 (i18n) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/language-service" title="使用 Angular 语言服务来为开发提速。"> 语言服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/security" title="Angular 应用开发中的安全技术。"> 安全 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="环境准备与部署" aria-pressed="false"> 环境准备与部署 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup" title="在你自己的机器上安装 Angular QuickStart 种子，以便更快、更高效的开发。"> 搭建本地开发环境 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup-systemjs-anatomy" title="基于 SystemJS 的本地开发环境内幕。"> 搭建方式剖析 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/browser-support" title="浏览器支持与 Polyfills 指南"> 浏览器支持 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/npm-packages" title="建议的 npm 包，以及如何指定包的依赖。"> npm 包 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/typescript-configuration" title="给 Angular 开发者的 TypeScript 配置。"> TypeScript 配置 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/aot-compiler" title="学习如何使用 AOT 预编译器。"> 预先（AOT）编译 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/deployment" title="学习如何部署你的 Angular 应用。"> 部署 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/custom-elements" title="把 Angular 组件用作自定义元素。"> 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的 Service Worker：控制应用的资源缓存。" aria-pressed="false"> Service Worker <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-intro" title="Angular 对 Service Worker 的实现提升了慢速或不稳定的网络连接下的用户体验。"> 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-getting-started" title="在 CLI 项目中启用 Service Worker，并在浏览器中查看效果。"> 快速起步 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-communications" title="那些能让你和 Angular 的 Service Worker 通讯的服务类。"> 与 Service Worker 通讯 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-devops" title="使用 Service Worker 运行应用、管理应用更新、调试以及杀掉正在运行的应用。"> 生产环境下的 Service Worker </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-config" title="配置 Service Worker 的缓存行为。"> Service Worker 配置 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的发布实践，更新计划以及与更新有关的资源。" aria-pressed="false"> 保持最新 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/updating" title="关于如何把 Angular 应用升级到最新版的信息。"> 更新你的项目 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/releases" title="Angular 的版本、发布、支持与弃用策略。"> Angular 的版本发布 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="把 AngularJS 应用增量式的升级到 Angular。" aria-pressed="false"> 从 AngularJS 升级 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/upgrade" title="把 AngularJS 应用增量式的升级到 Angular。"> 升级步骤 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ajs-quick-reference" title="学习如何把 AngularJS 的概念映射到 Angular 中。"> AngularJS 与 Angular 的概念对照 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/universal" title="使用 Angular Universal 在服务端渲染 HTML。">  服务端渲染 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/visual-studio-2015" title="在 Visual Studio 2015 中使用快速起步中的文件"> Visual Studio 2015 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/styleguide" title="写出 Angular 风格的程序"> 风格指南 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/glossary" title="Angular 中最重要的词汇的简要定义。"> 词汇表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/api" title="关于 Angular 中类和值的详细信息。"> API 参考手册 </a></div><!----></aio-nav-item></aio-nav-menu><div class="doc-version"><aio-select><div class="form-select-menu"><button class="form-select-button"><strong></strong><!---->stable (v6.0.0) </button><!----></div></aio-select></div></mat-sidenav><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><!----><mat-sidenav-content cdkscrollable="" class="mat-drawer-content mat-sidenav-content ng-star-inserted" style="margin-left: 262px; margin-right: 0px;"><section class="sidenav-content" role="content" id="guide-dependency-injection"><aio-mode-banner><!----></aio-mode-banner><aio-doc-viewer class=""><div style="opacity: 1; transition: all 200ms ease-in-out;">
<div class="content">
<h1 translation-result="" id="angular-dependency-injection">Angular 依赖注入<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#angular-dependency-injection"><i class="material-icons">link</i></a></h1><aio-toc class="embedded"></aio-toc><h1 translation-origin="off" id="angular-dependency-injection">Angular Dependency Injection<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#angular-dependency-injection"><i class="material-icons">link</i></a></h1>

<p translation-result=""><strong>依赖注入（DI）</strong>是用来创建对象及其依赖的其它对象的一种方式。
当依赖注入系统创建某个对象实例时，会负责提供该对象所依赖的对象（称为该对象的<em>依赖</em>）。</p><p translation-origin="off"><strong>Dependency Injection (DI)</strong> is a way to create objects that depend upon other objects.
A Dependency Injection system supplies the dependent objects (called the <em>dependencies</em>)
when it creates an instance of an object.</p>

<p translation-result=""><a href="https://angular.cn/guide/dependency-injection-pattern">依赖注入模式</a>中讲解了这种通用的方法。
<em>在这里</em></p><p translation-origin="off">The <a href="https://angular.cn/guide/dependency-injection-pattern">Dependency Injection pattern</a> page describes this general approach.
<em>The guide you're reading now</em> explains how Angular's own Dependency Injection system works.</p>

<h2 translation-result="" id="di-by-example">DI 的例子<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#di-by-example"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="di-by-example">DI by example<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#di-by-example"><i class="material-icons">link</i></a></h2>

<p translation-result="">在这篇指南中，你将会通过对一个范例应用的讨论来学习 Angular 的依赖注入技术。</p><p translation-origin="off">You'll learn Angular Dependency Injection through a discussion of the sample app that accompanies this guide.
Run the <live-example ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/dependency-injection/stackblitz.html" title="在线例子">在线例子</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/dependency-injection/dependency-injection.zip">下载范例</a></span></span></span></live-example> anytime.</p>

<p translation-result="">先从<a href="https://angular.cn/tutorial/">《英雄指南》</a>中<em>英雄</em>特性区的一个简化版本开始。</p><p translation-origin="off">Start by reviewing this simplified version of the <em>heroes</em> feature
from the <a href="https://angular.cn/tutorial/">The Tour of Heroes</a>.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="src/app/heroes/heroes.component.ts" path="dependency-injection/src/app/heroes/heroes.component.1.ts" region="v1">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';
@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-heroes',
  template: `
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `
})
export class HeroesComponent { }


</code-pane>

  <code-pane title="src/app/heroes/hero-list.component.ts" path="dependency-injection/src/app/heroes/hero-list.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }   from '@angular/core';
import { HEROES }      from './mock-heroes';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-list',
  template: `
    &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes"&gt;
      {{hero.id}} - {{hero.name}}
    &lt;/div&gt;
  `
})
export class HeroListComponent {
  heroes = HEROES;
}


</code-pane>

  <code-pane title="src/app/heroes/hero.ts" path="dependency-injection/src/app/heroes/hero.ts">
export class Hero {
  id: number;
  name: string;
  isSecret = false;
}


</code-pane>

  <code-pane title="src/app/heroes/mock-heroes.ts" path="dependency-injection/src/app/heroes/mock-heroes.ts">
import { Hero } from './hero';

export const HEROES: Hero[] = [
  { id: 11, isSecret: false, name: 'Mr. Nice' },
  { id: 12, isSecret: false, name: 'Narco' },
  { id: 13, isSecret: false, name: 'Bombasto' },
  { id: 14, isSecret: false, name: 'Celeritas' },
  { id: 15, isSecret: false, name: 'Magneta' },
  { id: 16, isSecret: false, name: 'RubberMan' },
  { id: 17, isSecret: false, name: 'Dynama' },
  { id: 18, isSecret: true,  name: 'Dr IQ' },
  { id: 19, isSecret: true,  name: 'Magma' },
  { id: 20, isSecret: true,  name: 'Tornado' }
];


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-3-0" tabindex="0" aria-controls="mat-tab-content-3-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/heroes.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-3-1" tabindex="-1" aria-controls="mat-tab-content-3-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/hero-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-3-2" tabindex="-1" aria-controls="mat-tab-content-3-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/hero.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-3-3" tabindex="-1" aria-controls="mat-tab-content-3-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/mock-heroes.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 283px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-8 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-3-0" aria-labelledby="mat-tab-label-3-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-heroes'</span><span class="pun">,</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroesComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-9 ng-star-inserted" role="tabpanel" id="mat-tab-content-3-1" aria-labelledby="mat-tab-label-3-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-10 ng-star-inserted" role="tabpanel" id="mat-tab-content-3-2" aria-labelledby="mat-tab-label-3-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-11 ng-star-inserted" role="tabpanel" id="mat-tab-content-3-3" aria-labelledby="mat-tab-label-3-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result=""><code>HeroesComponent</code> 是位于顶级的组件。
它唯一的用途是显示 <code>HeroListComponent</code>，它显示一个英雄名字的列表。</p><p translation-origin="off">The <code>HeroesComponent</code> is the top-level heroes component.
It's only purpose is to display the <code>HeroListComponent</code>
which displays a list of hero names.</p>

<p translation-result="">这个版本的 <code>HeroListComponent</code> 从 <code>HEROES</code> 数组（定义在 <code>mock-heroes</code> 文件中的内存数组）中获取 <code>heroes</code>。</p><p translation-origin="off">This version of the <code>HeroListComponent</code> gets its <code>heroes</code> from the <code>HEROES</code> array, an in-memory collection
defined in a separate <code>mock-heroes</code> file.</p>

<code-example title="src/app/heroes/hero-list.component.ts (class)" path="dependency-injection/src/app/heroes/hero-list.component.1.ts" region="class" ng-version="6.0.0"><div style="display: none">
export class HeroListComponent {
  heroes = HEROES;
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts (class)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts (class)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroes </span><span class="pun">=</span><span class="pln"> HEROES</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在开发的早期阶段，这就够用了，不过还很不理想。
当要测试这个组件或者要从远端服务器获取英雄数据时，你就不得不去修改 <code>HeroesListComponent</code> 的实现，并要替换所有使用了 <code>HEROES</code> 模拟数据的地方。</p><p translation-origin="off">That may suffice in the early stages of development, but it's far from ideal.
As soon as you try to test this component or get heroes from a remote server,
you'll have to change the implementation of <code>HerosListComponent</code> and
replace every other use of the <code>HEROES</code> mock data.</p>

<p translation-result="">最好隐藏服务类的这些内部实现细节，那就先<a href="https://angular.cn/guide/dependency-injection#one-class-per-file">把它定义在自己的文件中</a>。</p><p translation-origin="off">It's better to hide these details inside a <em>service</em> class,
<a href="https://angular.cn/guide/dependency-injection#one-class-per-file">defined in its own file</a>.</p>

<h2 translation-result="" id="create-an-injectable-emheroserviceem">创建一个可注入的 <code>HeroService</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#create-an-injectable-emheroserviceem"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="create-an-injectable-heroservice">Create an injectable <em>HeroService</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#create-an-injectable-heroservice"><i class="material-icons">link</i></a></h2>

<p translation-result=""><a href="https://cli.angular.io/"><strong>Angular CLI</strong></a> 可以使用下列命令在 <code>src/app/heroes</code> 目录下新建一个 <code>HeroService</code> 类。</p><p translation-origin="off">The <a href="https://cli.angular.io/"><strong>Angular CLI</strong></a> can generate a new <code>HeroService</code> class in the <code>src/app/heroes</code> folder with this command.</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">
ng generate service heroes/hero
</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate service heroes</span><span class="pun">/</span><span class="pln">hero</span></code>
    </pre></aio-code></code-example>
<p translation-result="">上述命令会创建如下的 <code>HeroService</code> 骨架代码：</p><p translation-origin="off">The command above creates the following <code>HeroService</code> skeleton.</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.0.ts" title="src/app/heroes/hero.service.ts (CLI-generated)" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
})
export class HeroService {
  constructor() { }
}


</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.ts (CLI-generated)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.ts (CLI-generated)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln">
  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器是定义每个 Angular 服务时的必备部分。
把该类的其它部分改写为暴露一个返回和以前一样的 mock 数据的 <code>getHeroes</code> 方法。</p><p translation-origin="off">The <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator is an essential ingredient in every Angular service definition.
The rest of the class has been rewritten to expose a <code>getHeroes</code> method
that returns the same mock data as before.</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.3.ts" title="src/app/heroes/hero.service.3.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { HEROES }     from './mock-heroes';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  // we declare that this service should be created
  // by the root application injector.

  providedIn: 'root',
})
export class HeroService {
  getHeroes() { return HEROES; }
}


</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.3.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.3.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> HEROES </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./mock-heroes'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span></li><li class="L4"><span class="pln">  </span><span class="com">// we declare that this service should be created</span></li><li class="L5"><span class="pln">  </span><span class="com">// by the root application injector.</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span></li><li class="L8"><span class="pun">})</span></li><li class="L9"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">  getHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> HEROES</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span></li><li class="L1"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">当然，这还不是真正的数据服务。
如果该应用真的从远端服务器获取数据，那么 <code>getHeroes</code> 的方法签名就应该是异步形式的。</p><p translation-origin="off">Of course, this isn't a real data service.
If the app were actually getting data from a remote server,
the <code>getHeroes</code> method signature would have to be asynchronous.</p>

<p translation-result="">我们可以放心地忽略这个问题，因为这里的焦点在于<em>把服务注入</em>到 <code>HeroListComponent</code> 组件中。</p><p translation-origin="off">That's a defect we can safely ignore in this guide where our focus is on
<em>injecting the service</em> into the <code>HeroList</code> component.</p>

<a id="injector-config"></a>
<a id="bootstrap"></a>
<h2 translation-result="" id="injectors">注入器<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectors"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="injectors">Injectors<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectors"><i class="material-icons">link</i></a></h2>

<p translation-result="">在你把 Angular 中的<em>服务类</em>（比如 <code>HeroService</code> ）注册进依赖注入器（injector）之前，它只是个普通类而已。</p><p translation-origin="off">A <em>service</em> like <code>HeroService</code> is just a class in Angular until you register it with an Angular dependency injector.</p>

<p translation-result="">Angular 的依赖注入器负责创建服务的实例，并把它们注入到像 <code>HeroListComponent</code> 这样的类中。</p><p translation-origin="off">An Angular injector is responsible for creating service instances and injecting them into classes like the <code>HeroListComponent</code>.</p>

<p translation-result="">你很少需要自己创建 Angular 的依赖注入器。
当 Angular 运行本应用时，它会为你创建这些注入器，首先会在<a href="https://angular.cn/guide/bootstrapping">引导过程</a>中创建一个<em>根注入器</em>。</p><p translation-origin="off">You rarely create an Angular injector yourself.
Angular creates injectors for you as it executes the app,
starting with the <em>root injector</em> that it creates during the <a href="https://angular.cn/guide/bootstrapping">bootstrap process</a>.</p>

<p translation-result="">Angular 本身没法自动判断你是打算自行创建服务类的实例，还是等注入器来创建它。你必须通过为每个服务指定服务提供商来配置它。</p><p translation-origin="off">Angular doesn't automatically know how you want to create instances of your services or the injector to create your service. You must configure it by specifying providers for every service.</p>

<p translation-result=""><strong>提供商</strong>会告诉注入器<em>如何创建该服务</em>。
如果没有提供商，注入器既不知道它该负责创建该服务，也不知道如何创建该服务。</p><p translation-origin="off"><strong>Providers</strong> tell the injector <em>how to create the service</em>.
Without a provider, the injector would not know
that it is responsible for injecting the service
nor be able to create the service.</p>

<div class="l-sub-section">
<p translation-result="">你可以在<a href="https://angular.cn/guide/dependency-injection#providers">稍后的部分</a>学到更多关于<em>提供商</em>的知识。
不过目前，你只要知道它们是用来配置服务应该在哪里创建以及如何创建的就够了。</p><p translation-origin="off">You'll learn much more about <em>providers</em> <a href="https://angular.cn/guide/dependency-injection#providers">below</a>.
For now, it is sufficient to know that they configure where and how services are created.</p>

</div>
<p translation-result="">有很多方式可以为注入器注册服务提供商。本节会展示为你的服务配置提供商最常见的途径。</p><p translation-origin="off">There are many ways to register a service provider with an injector. This section shows the most common ways
of configuring a provider for your services.</p>

<a id="register-providers-injectable"></a>
<h2 translation-result="" id="injectable-providers">@Injectable 的 providers 数组<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectable-providers"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="injectable-providers">@Injectable providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectable-providers"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器会指出这些服务或其它类是用来注入的。它还能用于为这些服务提供配置项。</p><p translation-origin="off">The <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator identifies services and other classes that are intended to be injected. It can also be used to configure a provider for those services.</p>

<p translation-result="">这里我们使用类上的 <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器来为 <code>HeroService</code> 配置了一个提供商。</p><p translation-origin="off">Here we configure a provider for <code>HeroService</code> using the <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator on the class.</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.0.ts" title="src/app/heroes/heroes.service.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
})
export class HeroService {
  constructor() { }
}


</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln">
  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>providedIn</code> 告诉 Angular，它的根注入器要负责调用 <code>HeroService</code> 类的构造函数来创建一个实例，并让它在整个应用中都是可用的。在使用 CLI 生成新服务时，会默认帮你设置为这种提供商。</p><p translation-origin="off"><code>providedIn</code> tells Angular that the root injector is responsible for creating an instance of the <code>HeroService</code> (by invoking its constructor) and making it available across the application. The CLI sets up this kind of a provider automatically for you when generating a new service.</p>

<p translation-result="">有时，你不希望只在应用的根注入器中提供服务。有可能用户希望显式选择要使用的服务，或者应该在一个惰性加载的环境下提供该服务。这种情况下，服务提供商应该关联到一个特定的 <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> 类，而且应该用于该模块包含的任何一个注入器中。</p><p translation-origin="off">Sometimes it's not desirable to have a service always be provided in the application root injector. Perhaps users should explicitly opt-in to using the service, or the service should be provided in a lazily-loaded context. In this case, the provider should be associated with a specific <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> class, and will be used by whichever injector includes that module.</p>

<p translation-result="">下面这段代码中，<code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器用来配置一个服务提供商，它可以用在任何包含了 HeroModule 的注入器中。</p><p translation-origin="off">In the following excerpt, the <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator is used to configure a provider that will be available in any injector that includes the HeroModule.</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.4.ts" title="src/app/heroes/hero.service.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { HeroModule } from './hero.module';
import { HEROES }     from './mock-heroes';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  // we declare that this service should be created
  // by any injector that includes HeroModule.

  providedIn: HeroModule,
})
export class HeroService {
  getHeroes() { return HEROES; }
}


</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroModule</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.module'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> HEROES </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./mock-heroes'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln">
  </span><span class="com">// we declare that this service should be created</span><span class="pln">
  </span><span class="com">// by any injector that includes HeroModule.</span><span class="pln">

  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroModule</span><span class="pun">,</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  getHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">return</span><span class="pln"> HEROES</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="register-providers-ngmodule"></a>
<h3 translation-result="" id="emngmoduleem-providers"><code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> 中的 <code>providers</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#emngmoduleem-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="ngmodule-providers"><em>@NgModule</em> providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#ngmodule-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">在下面的代码片段中，根模块 <code>AppModule</code> 在自己的 <code>providers</code> 数组中注册了两个提供商。</p><p translation-origin="off">In the following excerpt, the root <code>AppModule</code> registers two providers in its <code>providers</code> array.</p>

<code-example path="dependency-injection/src/app/app.module.ts" linenums="false" title="src/app/app.module.ts (providers)" region="providers" ng-version="6.0.0"><div style="display: none">
providers: [
  UserService,
  { provide: APP_CONFIG, useValue: HERO_DI_CONFIG }
],

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (providers)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (providers)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="typ">UserService</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> APP_CONFIG</span><span class="pun">,</span><span class="pln"> useValue</span><span class="pun">:</span><span class="pln"> HERO_DI_CONFIG </span><span class="pun">}</span><span class="pln">
</span><span class="pun">],</span></code>
    </pre></aio-code></code-example>
<p translation-result="">第一条使用 <code>UserService</code> 这个<em>注入令牌（injection token）</em>注册了 <code>UserService</code> 类（代码中未显示）。
第二条使用 <code>APP_CONFIG</code> 这个注入令牌注册了一个值（<code>HERO_DI_CONFIG</code>）。</p><p translation-origin="off">The first entry registers the <code>UserService</code> class (<em>not shown</em>) under the <code>UserService</code> <em>injection token</em>.
The second registers a value (<code>HERO_DI_CONFIG</code>) under the <code>APP_CONFIG</code> <em>injection token</em>.</p>

<p translation-result="">借助这些注册语句，Angular 现在可以向它创建的任何类中注册 <code>UserService</code> 或 <code>HERO_DI_CONFIG</code> 值了。</p><p translation-origin="off">With the above registrations, Angular can inject the <code>UserService</code> or the <code>HERO_DI_CONFIG</code> value
into any class that it creates.</p>

<div class="l-sub-section">
<p translation-result=""><a href="https://angular.cn/guide/dependency-injection#providers">稍后</a>你就会学到关于<em>注入令牌</em>和服务提供商语法的知识。</p><p translation-origin="off">You'll learn about <em>injection tokens</em> and <em>provider</em> syntax <a href="https://angular.cn/guide/dependency-injection#providers">below</a>.</p>

</div>
<a id="register-providers-component"></a>
<h3 translation-result="" id="emcomponentem-providers">在组件中注册提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#emcomponentem-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="component-providers"><em>@Component</em> providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#component-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">除了提供给全应用级或特定的 <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> 中之外，服务还可以提供给指定的组件。在组件级提供的服务职能在该组件及其子组件的注入器中使用。</p><p translation-origin="off">In addition to providing the service application-wide or within a particular <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code>, services can also be provided in specific components. Services provided in component-level is only available within that component injector or in any of its child components.</p>

<p translation-result="">下面的例子展示了一个修改过的 <code>HeroesComponent</code>，它在自己的 <code>providers</code> 数组中注册了 <code>HeroService</code>。</p><p translation-origin="off">The example below shows a revised <code>HeroesComponent</code> that registers the <code>HeroService</code> in its <code>providers</code> array.</p>

<code-example path="dependency-injection/src/app/heroes/heroes.component.1.ts" title="src/app/heroes/heroes.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';
import { HeroService } from './hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-heroes',
  providers: [ HeroService ],
  template: `
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `
})
export class HeroesComponent { }


</div><!----><header class="ng-star-inserted">src/app/heroes/heroes.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-heroes'</span><span class="pun">,</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">],</span><span class="pln">
  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroesComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="ngmodule-vs-comp"></a>
<h3 translation-result="" id="injectable-emngmoduleem-or-emcomponentem">@Injectable、<em>@NgModule</em> 还是 <em>@Component</em> ？<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectable-emngmoduleem-or-emcomponentem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="injectable-ngmodule-or-component">@Injectable, <em>@NgModule</em> or <em>@Component</em>?<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectable-ngmodule-or-component"><i class="material-icons">link</i></a></h3>

<p translation-result="">你该使用 <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器、<code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code>还是 <code>@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a></code> 来提供服务呢？
这几个选择的差别在于最终的打包体积、服务的<em>范围</em>和服务的<em>生命周期</em>。</p><p translation-origin="off">Should you provide a service with an <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator, in an <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code>, or within an <code>@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a></code>?
The choices lead to differences in the final bundle size, service <em>scope</em>, and service <em>lifetime</em>.</p>

<p translation-result="">当你在服务本身的 <strong>@Injectable</strong> 装饰器中注册提供商时，优化工具（比如 CLI 产品模式构建时所用的）可以执行摇树优化，这会移除所有没在应用中使用过的服务。摇树优化会导致更小的打包体积。</p><p translation-origin="off">When you register providers in the <strong>@Injectable</strong> decorator of the service itself, optimization tools such as those used by the CLI's production builds can perform tree shaking, which removes services that aren't used by your app. Tree shaking results in smaller bundle sizes.</p>

<p translation-result=""><strong>Angular 模块中的 <code>providers</code></strong>（<code>@<a href="https://angular.cn/api/core/NgModule#providers" class="code-anchor">NgModule.providers</a></code>）是注册在应用的根注入器下的。
因此，Angular 可以往它所创建的任何类中注入相应的服务。
一旦创建，服务的实例就会存在于该应用的全部生存期中，Angular 会把这一个服务实例注入到需求它的每个类中。</p><p translation-origin="off"><strong>Angular module providers</strong> (<code>@<a href="https://angular.cn/api/core/NgModule#providers" class="code-anchor">NgModule.providers</a></code>) are registered with the application's root injector.
Angular can inject the corresponding services in any class it creates.
Once created, a service instance lives for the life of the app and Angular injects this one service instance in every class that needs it.</p>

<p translation-result="">你可能想要把这个 <code>UserService</code> 注入到应用中的很多地方，并期望每次注入的都是同一个服务实例。
这时候如果不能用 <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code>，那么就可以在 Angular 的模块中提供 <code>UserService</code>。</p><p translation-origin="off">You're likely to inject the <code>UserService</code> in many places throughout the app
and will want to inject the same service instance every time.
Providing the <code>UserService</code> with an Angular module is a good choice if an <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> provider is not an option.</p>

<div class="l-sub-section">
<p translation-result="">严格来说，Angular 模块中的服务提供商会注册到根注入器上，但是，<a href="https://angular.cn/guide/lazy-loading-ngmodules">惰性加载</a>的模块是例外。
在这个例子中，所有模块都是在应用启动时<em>立即加载</em>的，因此模块上的所有服务提供商都注册到了应用的根注入器上。</p><p translation-origin="off">To be precise, Angular module providers are registered with the root injector
<em>unless the module is</em> <a href="https://angular.cn/guide/lazy-loading-ngmodules">lazy loaded</a>.
In this sample, all modules are <em>eagerly loaded</em> when the application starts,
so all module providers are registered with the app's root injector.</p>

</div><br>
<hr>
<p translation-result=""><strong>组件的提供商</strong>（<code>@Component.providers</code>）会注册到每个组件实例自己的注入器上。</p><p translation-origin="off"><strong>A component's providers</strong> (<code>@Component.providers</code>) are registered with each component instance's own injector.</p>

<p translation-result="">因此 Angular 只能在该组件及其各级子组件的实例上注入这个服务实例，而不能在其它地方注入这个服务实例。</p><p translation-origin="off">Angular can only inject the corresponding services in that component instance or one of its descendant component instances.
Angular cannot inject the same service instance anywhere else.</p>

<p translation-result="">注意，由组件提供的服务，也同样具有有限的生命周期。组件的每个实例都会有它自己的服务实例，并且，当组件实例被销毁的时候，服务的实例也同样会被销毁。</p><p translation-origin="off">Note that a component-provided service may have a limited lifetime. Each new instance of the component gets its own instance of the service
and, when the component instance is destroyed, so is that service instance.</p>

<p translation-result="">在这个范例应用中，<code>HeroComponent</code> 会在应用启动时创建，并且它从未销毁，因此，由 <code>HeroComponent</code> 创建的 <code>HeroService</code> 也同样会活在应用的整个生命周期中。</p><p translation-origin="off">In this sample app, the <code>HeroComponent</code> is created when the application starts
and is never destroyed so the <code>HeroService</code> created for the <code>HeroComponent</code> also live for the life of the app.</p>

<p translation-result="">如果你要把 <code>HeroService</code> 的访问权限定在 <code>HeroesComponent</code> 及其嵌套的 <code>HeroListComponent</code> 中，那么在 <code>HeroesComponent</code> 中提供这个 <code>HeroService</code> 就是一个好选择。</p><p translation-origin="off">If you want to restrict <code>HeroService</code> access to the <code>HeroComponent</code> and its nested <code>HeroListComponent</code>,
providing the <code>HeroService</code> in the <code>HeroComponent</code> may be a good choice.</p>

<div class="l-sub-section">
<p translation-result="">由组件提供的服务，其范围和生命周期是 <a href="https://angular.cn/guide/dependency-injection#component-child-injectors">Angular 如何创建组件实例</a> 的必然结果。</p><p translation-origin="off">The scope and lifetime of component-provided services is a consequence of <a href="https://angular.cn/guide/dependency-injection#component-child-injectors">the way Angular creates component instances</a>. </p>

</div>
<a id="providers"></a>
<h2 translation-result="" id="providers">服务提供商们<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#providers"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="providers">Providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#providers"><i class="material-icons">link</i></a></h2>

<p translation-result="">服务提供商<em>提供</em>依赖值的一个具体的、运行时的版本。
注入器依靠<strong>提供商</strong>来创建服务的实例，注入器再将服务的实例注入组件、管道或其它服务。</p><p translation-origin="off">A service provider <em>provides</em> the concrete, runtime version of a dependency value.
The injector relies on <strong>providers</strong> to create instances of the services
that the injector injects into components, directives, pipes, and other services.</p>

<p translation-result="">必须为注入器注册一个服务的<em>提供商</em>，否则它就不知道该如何创建该服务。</p><p translation-origin="off">You must register a service <em>provider</em> with an injector, or it won't know how to create the service.</p>

<p translation-result="">在下面的几节中会解释指定提供商的多种方式。</p><p translation-origin="off">The next few sections explain the many ways you can specify a provider.</p>

<h3 translation-result="" id="the-class-as-its-own-provider">把类作为它自己的提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-class-as-its-own-provider"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-class-as-its-own-provider">The class as its own provider<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-class-as-its-own-provider"><i class="material-icons">link</i></a></h3>

<p translation-result="">有很多方式可以<em>提供</em>一些实现 <code>Logger</code> 类的东西。
<code>Logger</code> 类本身是一个显而易见而且自然而然的提供商。</p><p translation-origin="off">There are many ways to <em>provide</em> something that looks and behaves like a <code>Logger</code>.
The <code>Logger</code> class itself is an obvious and natural provider.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-logger" ng-version="6.0.0"><div style="display: none">
providers: [Logger]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Logger</span><span class="pun">]</span></code>
    </pre></aio-code></code-example>
<p translation-result="">但它不是唯一的途径。</p><p translation-origin="off">But it's not the only way.</p>

<p translation-result="">可以用其它备选提供商来配置注入器，只要它们能交付一个行为类似于 <code>Logger</code> 的对象就可以了。
可以提供一个替代类。你可以提供一个类似日志的对象。
可以给它一个提供商，让它调用可以创建日志服务的工厂函数。
所有这些方法，只要用在正确的场合，都可能是一个好的选择。</p><p translation-origin="off">You can configure the injector with alternative providers that can deliver an object that behaves like a <code>Logger</code>.
You could provide a substitute class. You could provide a logger-like object.
You could give it a provider that calls a logger factory function.
Any of these approaches might be a good choice under the right circumstances.</p>

<p translation-result="">重点是，当注入器需要一个 <code>Logger</code> 时，它得先有一个提供商。</p><p translation-origin="off">What matters is that the injector has a provider to go to when it needs a <code>Logger</code>.</p>

<a id="provide"></a>
<h3 translation-result="" id="the-emprovideem-object-literal-1"><em>provide</em> 对象字面量<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-emprovideem-object-literal-1"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="the-provide-object-literal">The <em>provide</em> object literal<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-provide-object-literal"><i class="material-icons">link</i></a></h3>

<p translation-result="">下面是类提供商的另一种语法。</p><p translation-origin="off">Here's the class-provider syntax again.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-logger" ng-version="6.0.0"><div style="display: none">
providers: [Logger]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Logger</span><span class="pun">]</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这其实是用于注册提供商的简写表达式。
使用的是一个带有两个属性的<em>提供商</em>对象字面量：</p><p translation-origin="off">This is actually a shorthand expression for a provider registration
using a <em>provider</em> object literal with two properties:</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-3" ng-version="6.0.0"><div style="display: none">
[{ provide: Logger, useClass: Logger }]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> useClass</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> </span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>provide</code> 属性保存的是<a href="https://angular.cn/guide/dependency-injection#token">令牌 (token)</a>，它作为键值 (key) 使用，用于定位依赖值和注册提供商。</p><p translation-origin="off">The <code>provide</code> property holds the <a href="https://angular.cn/guide/dependency-injection#token">token</a> that serves as the key for both locating a dependency value
and registering the provider.</p>

<p translation-result="">第二个是一个提供商定义对象。
可以把它看做是指导如何创建依赖值的<em>配方</em>。
有很多方式创建依赖值…… 也有很多方式可以写配方。</p><p translation-origin="off">The second property is always a provider definition object,
which you can think of as a <em>recipe</em> for creating the dependency value.
There are many ways to create dependency values just as there are many ways to write a recipe.</p>

<a id="class-provider"></a>
<h3 translation-result="" id="alternative-class-providers">备选的类提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#alternative-class-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="alternative-class-providers">Alternative class providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#alternative-class-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">某些时候，你会请求一个不同的类来提供服务。
下列代码告诉注入器，当有人请求 <code>Logger</code> 时，返回 <code>BetterLogger</code>。</p><p translation-origin="off">Occasionally you'll ask a different class to provide the service.
The following code tells the injector
to return a <code>BetterLogger</code> when something asks for the <code>Logger</code>.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-4" ng-version="6.0.0"><div style="display: none">
[{ provide: Logger, useClass: BetterLogger }]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> useClass</span><span class="pun">:</span><span class="pln"> </span><span class="typ">BetterLogger</span><span class="pln"> </span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<a id="class-provider-dependencies"></a>
<h3 translation-result="" id="class-provider-with-dependencies">带依赖的类提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#class-provider-with-dependencies"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="class-provider-with-dependencies">Class provider with dependencies<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#class-provider-with-dependencies"><i class="material-icons">link</i></a></h3>

<p translation-result="">假设 <code>EvenBetterLogger</code> 可以在日志消息中显示用户名。
这个日志服务从注入的 <code>UserService</code> 中取得用户，
<code>UserService</code> 通常也会在应用级注入。</p><p translation-origin="off">Maybe an <code>EvenBetterLogger</code> could display the user name in the log message.
This logger gets the user from the injected <code>UserService</code>,
which is also injected at the application level.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="EvenBetterLogger" linenums="false" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class EvenBetterLogger extends Logger {
  constructor(private userService: UserService) { super(); }

  log(message: string) {
    let name = this.userService.user.name;
    super.log(`Message to ${name}: ${message}`);
  }
}

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">EvenBetterLogger</span><span class="pln"> </span><span class="kwd">extends</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> userService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">UserService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">super</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

  log</span><span class="pun">(</span><span class="pln">message</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">let</span><span class="pln"> name </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">userService</span><span class="pun">.</span><span class="pln">user</span><span class="pun">.</span><span class="pln">name</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">super</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`Message to ${name}: ${message}`</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">就像之前在 <code>BetterLogger</code> 中那样配置它。</p><p translation-origin="off">Configure it like <code>BetterLogger</code>.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-5" linenums="false" ng-version="6.0.0"><div style="display: none">
[ UserService,
  { provide: Logger, useClass: EvenBetterLogger }]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[</span><span class="pln"> </span><span class="typ">UserService</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> useClass</span><span class="pun">:</span><span class="pln"> </span><span class="typ">EvenBetterLogger</span><span class="pln"> </span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<a id="aliased-class-providers"></a>
<h3 translation-result="" id="aliased-class-providers">别名类提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#aliased-class-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="aliased-class-providers">Aliased class providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#aliased-class-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">假设某个旧组件依赖一个 <code>OldLogger</code> 类。
<code>OldLogger</code> 和 <code>NewLogger</code> 具有相同的接口，但是由于某些原因，
你不能升级这个旧组件并使用它。</p><p translation-origin="off">Suppose an old component depends upon an <code>OldLogger</code> class.
<code>OldLogger</code> has the same interface as the <code>NewLogger</code>, but for some reason
you can't update the old component to use it.</p>

<p translation-result="">当<em>旧</em>组件想使用 <code>OldLogger</code> 记录消息时，你希望改用 <code>NewLogger</code> 的单例对象来记录。</p><p translation-origin="off">When the <em>old</em> component logs a message with <code>OldLogger</code>,
you'd like the singleton instance of <code>NewLogger</code> to handle it instead.</p>

<p translation-result="">不管组件请求的是新的还是旧的日志服务，依赖注入器注入的都应该是同一个单例对象。
也就是说，<code>OldLogger</code> 应该是 <code>NewLogger</code> 的别名。</p><p translation-origin="off">The dependency injector should inject that singleton instance
when a component asks for either the new or the old logger.
The <code>OldLogger</code> should be an alias for <code>NewLogger</code>.</p>

<p translation-result="">你当然不会希望应用中有两个不同的 <code>NewLogger</code> 实例。
不幸的是，如果尝试通过 <code>useClass</code> 来把 <code>OldLogger</code> 作为 <code>NewLogger</code> 的别名，就会导致这样的后果。</p><p translation-origin="off">You certainly do not want two different <code>NewLogger</code> instances in your app.
Unfortunately, that's what you get if you try to alias <code>OldLogger</code> to <code>NewLogger</code> with <code>useClass</code>.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-6a" linenums="false" ng-version="6.0.0"><div style="display: none">
[ NewLogger,
  // Not aliased! Creates two instances of `NewLogger`
  { provide: OldLogger, useClass: NewLogger}]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[</span><span class="pln"> </span><span class="typ">NewLogger</span><span class="pun">,</span><span class="pln">
  </span><span class="com">// Not aliased! Creates two instances of `NewLogger`</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">OldLogger</span><span class="pun">,</span><span class="pln"> useClass</span><span class="pun">:</span><span class="pln"> </span><span class="typ">NewLogger</span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<p translation-result="">解决方案：使用 <code>useExisting</code> 选项指定别名。</p><p translation-origin="off">The solution: alias with the <code>useExisting</code> option.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-6b" linenums="false" ng-version="6.0.0"><div style="display: none">
[ NewLogger,
  // Alias OldLogger w/ reference to NewLogger
  { provide: OldLogger, useExisting: NewLogger}]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[</span><span class="pln"> </span><span class="typ">NewLogger</span><span class="pun">,</span><span class="pln">
  </span><span class="com">// Alias OldLogger w/ reference to NewLogger</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">OldLogger</span><span class="pun">,</span><span class="pln"> useExisting</span><span class="pun">:</span><span class="pln"> </span><span class="typ">NewLogger</span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<a id="value-provider"></a>
<h3 translation-result="" id="value-providers">值提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#value-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="value-providers">Value providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#value-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">有时，提供一个预先做好的对象会比请求注入器从类中创建它更容易。</p><p translation-origin="off">Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="silent-logger" linenums="false" ng-version="6.0.0"><div style="display: none">
// An object in the shape of the logger service
export function SilentLoggerFn() {}

const silentLogger = {
  logs: ['Silent logger says "Shhhhh!". Provided via "useValue"'],
  log: SilentLoggerFn
};

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// An object in the shape of the logger service</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">function</span><span class="pln"> </span><span class="typ">SilentLoggerFn</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> silentLogger </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  logs</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'Silent logger says "Shhhhh!". Provided via "useValue"'</span><span class="pun">],</span><span class="pln">
  log</span><span class="pun">:</span><span class="pln"> </span><span class="typ">SilentLoggerFn</span><span class="pln">
</span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<p translation-result="">于是可以通过 <code>useValue</code> 选项来注册提供商，它会让这个对象直接扮演 logger 的角色。</p><p translation-origin="off">Then you register a provider with the <code>useValue</code> option,
which makes this object play the logger role.</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-7" linenums="false" ng-version="6.0.0"><div style="display: none">
[{ provide: Logger, useValue: silentLogger }]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pun">[{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> useValue</span><span class="pun">:</span><span class="pln"> silentLogger </span><span class="pun">}]</span></code>
    </pre></aio-code></code-example>
<p translation-result="">查看更多 <code>useValue</code> 的例子，见<a href="https://angular.cn/guide/dependency-injection#non-class-dependencies">非类依赖</a>和 <a href="https://angular.cn/guide/dependency-injection#injection-token">InjectionToken</a>部分。</p><p translation-origin="off">See more <code>useValue</code> examples in the
<a href="https://angular.cn/guide/dependency-injection#non-class-dependencies">Non-class dependencies</a> and
<a href="https://angular.cn/guide/dependency-injection#injection-token">InjectionToken</a> sections.</p>

<a id="factory-provider"></a>
<h3 translation-result="" id="factory-providers">工厂提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#factory-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="factory-providers">Factory providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#factory-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">有时，你需要动态创建这个依赖值，因为它所需要的信息直到最后一刻才能确定。
也许这个信息会在浏览器的会话中不停地变化。</p><p translation-origin="off">Sometimes you need to create the dependent value dynamically,
based on information you won't have until the last possible moment.
Maybe the information changes repeatedly in the course of the browser session.</p>

<p translation-result="">还假设这个可注入的服务没法通过独立的源访问此信息。</p><p translation-origin="off">Suppose also that the injectable service has no independent access to the source of this information.</p>

<p translation-result="">这种情况下，请调用<strong>工厂提供商</strong>。</p><p translation-origin="off">This situation calls for a <strong>factory provider</strong>.</p>

<p translation-result="">下面通过添加新的业务需求来说明这一点：
<code>HeroService</code> 必须对普通用户隐藏掉<em>秘密</em>英雄。
只有授权用户才能看到秘密英雄。</p><p translation-origin="off">To illustrate the point, add a new business requirement:
the <code>HeroService</code> must hide <em>secret</em> heroes from normal users.
Only authorized users should see secret heroes.</p>

<p translation-result="">就像 <code>EvenBetterLogger</code> 那样，<code>HeroService</code> 需要了解此用户的身份。
它需要知道，这个用户是否有权看到隐藏英雄。
这个授权可能在单一的应用会话中被改变，例如，改用另一个用户的身份登录时。</p><p translation-origin="off">Like the <code>EvenBetterLogger</code>, the <code>HeroService</code> needs a fact about the user.
It needs to know if the user is authorized to see secret heroes.
That authorization can change during the course of a single application session,
as when you log in a different user.</p>

<p translation-result="">与 <code>EvenBetterLogger</code> 不同，不能把 <code>UserService</code> 注入到 <code>HeroService</code> 中。
<code>HeroService</code> 无权访问用户信息，来决定谁有授权谁没有授权。</p><p translation-origin="off">Unlike <code>EvenBetterLogger</code>, you can't inject the <code>UserService</code> into the <code>HeroService</code>.
The <code>HeroService</code> won't have direct access to the user information to decide
who is authorized and who is not.</p>

<p translation-result="">让 <code>HeroService</code> 的构造函数带上一个布尔型的标志，来控制是否显示隐藏的英雄。</p><p translation-origin="off">Instead, the <code>HeroService</code> constructor takes a boolean flag to control display of secret heroes.</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.ts" region="internals" title="src/app/heroes/hero.service.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
constructor(
  private logger: Logger,
  private isAuthorized: boolean) { }

getHeroes() {
  let auth = this.isAuthorized ? 'authorized ' : 'unauthorized';
  this.logger.log(`Getting heroes for ${auth} user.`);
  return HEROES.filter(hero =&gt; this.isAuthorized || !hero.isSecret);
}

</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> logger</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> isAuthorized</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">boolean</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

getHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">let</span><span class="pln"> auth </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isAuthorized </span><span class="pun">?</span><span class="pln"> </span><span class="str">'authorized '</span><span class="pln"> </span><span class="pun">:</span><span class="pln"> </span><span class="str">'unauthorized'</span><span class="pun">;</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">logger</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">`Getting heroes for ${auth} user.`</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> HEROES</span><span class="pun">.</span><span class="pln">filter</span><span class="pun">(</span><span class="pln">hero </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isAuthorized </span><span class="pun">||</span><span class="pln"> </span><span class="pun">!</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">isSecret</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你可以注入 <code>Logger</code>，但是不能注入逻辑型的 <code>isAuthorized</code>。
你不得不通过通过工厂提供商创建这个 <code>HeroService</code> 的新实例。</p><p translation-origin="off">You can inject the <code>Logger</code>, but you can't inject the  boolean <code>isAuthorized</code>.
You'll have to take over the creation of new instances of this <code>HeroService</code> with a factory provider.</p>

<p translation-result="">工厂提供商需要一个工厂方法：</p><p translation-origin="off">A factory provider needs a factory function:</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.provider.ts" region="factory" title="src/app/heroes/hero.service.provider.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
let heroServiceFactory = (logger: Logger, userService: UserService) =&gt; {
  return new HeroService(logger, userService.user.isAuthorized);
};

</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.provider.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.provider.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">let</span><span class="pln"> heroServiceFactory </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">logger</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> userService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">UserService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">(</span><span class="pln">logger</span><span class="pun">,</span><span class="pln"> userService</span><span class="pun">.</span><span class="pln">user</span><span class="pun">.</span><span class="pln">isAuthorized</span><span class="pun">);</span><span class="pln">
</span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<p translation-result="">虽然 <code>HeroService</code> 不能访问 <code>UserService</code>，但是工厂方法可以。</p><p translation-origin="off">Although the <code>HeroService</code> has no access to the <code>UserService</code>, the factory function does.</p>

<p translation-result="">同时把 <code>Logger</code> 和 <code>UserService</code> 注入到工厂提供商中，并且让注入器把它们传给工厂方法：</p><p translation-origin="off">You inject both the <code>Logger</code> and the <code>UserService</code> into the factory provider
and let the injector pass them along to the factory function:</p>

<code-example path="dependency-injection/src/app/heroes/hero.service.provider.ts" region="provider" title="src/app/heroes/hero.service.provider.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export let heroServiceProvider =
  { provide: HeroService,
    useFactory: heroServiceFactory,
    deps: [Logger, UserService]
  };

</div><!----><header class="ng-star-inserted">src/app/heroes/hero.service.provider.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service.provider.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">let</span><span class="pln"> heroServiceProvider </span><span class="pun">=</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">,</span><span class="pln">
    useFactory</span><span class="pun">:</span><span class="pln"> heroServiceFactory</span><span class="pun">,</span><span class="pln">
    deps</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Logger</span><span class="pun">,</span><span class="pln"> </span><span class="typ">UserService</span><span class="pun">]</span><span class="pln">
  </span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result=""><code>useFactory</code> 字段告诉 Angular：这个提供商是一个工厂方法，它的实现是 <code>heroServiceFactory</code>。</p><p translation-origin="off">The <code>useFactory</code> field tells Angular that the provider is a factory function
whose implementation is the <code>heroServiceFactory</code>.</p>

<p translation-result=""><code>deps</code> 属性是<a href="https://angular.cn/guide/dependency-injection#token">提供商令牌</a>数组。
<code>Logger</code> 和 <code>UserService</code> 类作为它们自身类提供商的令牌。
注入器解析这些令牌，把相应的服务注入到工厂函数中相应的参数中去。</p><p translation-origin="off">The <code>deps</code> property is an array of <a href="https://angular.cn/guide/dependency-injection#token">provider tokens</a>.
The <code>Logger</code> and <code>UserService</code> classes serve as tokens for their own class providers.
The injector resolves these tokens and injects the corresponding services into the matching factory function parameters.</p>

</div>
<p translation-result="">注意，你在一个导出的变量中捕获了这个工厂提供商：<code>heroServiceProvider</code>。
这个额外的步骤让工厂提供商可被复用。
无论哪里需要，都可以使用这个变量注册 <code>HeroService</code>。</p><p translation-origin="off">Notice that you captured the factory provider in an exported variable, <code>heroServiceProvider</code>.
This extra step makes the factory provider reusable.
You can register the <code>HeroService</code> with this variable wherever you need it.</p>

<p translation-result="">在这个例子中，只在 <code>HeroesComponent</code> 中需要它，
这里，它代替了元数据 <code>providers</code> 数组中原来的 <code>HeroService</code> 注册。
对比一下新的和旧的实现：</p><p translation-origin="off">In this sample, you need it only in the <code>HeroesComponent</code>,
where it replaces the previous <code>HeroService</code> registration in the metadata <code>providers</code> array.
Here you see the new and the old implementation side-by-side:</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/heroes/heroes.component (v3)" path="dependency-injection/src/app/heroes/heroes.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }          from '@angular/core';
import { heroServiceProvider } from './hero.service.provider';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-heroes',
  providers: [ heroServiceProvider ],
  template: `
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `
})
export class HeroesComponent { }


</code-pane>

  <code-pane title="src/app/heroes/heroes.component (v2)" path="dependency-injection/src/app/heroes/heroes.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';
import { HeroService } from './hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-heroes',
  providers: [ HeroService ],
  template: `
    &lt;h2&gt;Heroes&lt;/h2&gt;
    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
  `
})
export class HeroesComponent { }


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-4-0" tabindex="0" aria-controls="mat-tab-content-4-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/heroes.component (v3)</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-4-1" tabindex="-1" aria-controls="mat-tab-content-4-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/heroes.component (v2)</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 295px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-12 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-4-0" aria-labelledby="mat-tab-label-4-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/heroes.component (v3)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> heroServiceProvider </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service.provider'</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L4"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-heroes'</span><span class="pun">,</span></li><li class="L5"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> heroServiceProvider </span><span class="pun">],</span></li><li class="L6"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L7"><span class="str">    &lt;h2&gt;Heroes&lt;/h2&gt;</span></li><li class="L8"><span class="str">    &lt;app-hero-list&gt;&lt;/app-hero-list&gt;</span></li><li class="L9"><span class="str">  `</span></li><li class="L0"><span class="pun">})</span></li><li class="L1"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroesComponent</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-13 ng-star-inserted" role="tabpanel" id="mat-tab-content-4-1" aria-labelledby="mat-tab-label-4-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<a id="tree-shakable-provider"></a>
<h3 translation-result="" id="tree-shakable-providers">可以被摇树优化的提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#tree-shakable-providers"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="tree-shakable-providers">Tree-shakable providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#tree-shakable-providers"><i class="material-icons">link</i></a></h3>

<p translation-result="">摇树优化可以在最终打包时移除应用中从未引用过的代码。可摇树优化的提供商可以让 Angular 从结果中移除应用中那些从未使用过的服务。这可以显著减小打包体积。</p><p translation-origin="off">Tree shaking is the ability to remove code that is not referenced in an application from the final bundle. Tree-shakable providers give Angular the ability to remove services that are not used in your application from the final output. This significantly reduces the size of your bundles.</p>

<p translation-result="">理想情况下，如果应用没有注入过某个服务，它就不应该被包含在最终结果中。不过，问题在于 Angular 的编译器无法在构建期间识别出该服务是不是必要的。
因为总是可以使用 <code>injector.get(Service)</code> 的形式直接注入某个服务，而 Angular 不能从你的代码中识别出所有能够进行这种注入的地方。所以，Angular 别无选择，只能把这个服务包含到注入器中。因此，在模块中提供的服务也就无法进行摇树优化了。</p><p translation-origin="off">Ideally, if an application is not injecting a service, it should not be included in the final output. However, it turns out that the Angular compiler cannot identify at build time if the service will be required or not. Because it's always possible to inject a service directly using <code>injector.get(Service)</code>, Angular cannot identify all of the places in your code where this injection could happen, so it has no choice but to include the service in the injector regardless. Thus, services provided in modules are not tree-shakeable.</p>

<p translation-result="">来看一个 Angular 无法对提供商进行摇树优化的例子。</p><p translation-origin="off">Let us consider an example of non-tree-shakable providers in Angular.</p>

<p translation-result="">在这个例子中，为了在 Angular 中提供服务，你把它们都包含进了 <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code> 中：</p><p translation-origin="off">In this example, to provide services in Angular, you include them in an <code>@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a></code>:</p>

<code-example path="dependency-injection/src/app/tree-shaking/service-and-module.ts" title="src/app/tree-shaking/service-and-modules.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>, <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class Service {
  doSomething(): void {
  }
}

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  providers: [Service],
})
export class ServiceModule {
}


</div><!----><header class="ng-star-inserted">src/app/tree-shaking/service-and-modules.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/tree-shaking/service-and-modules.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Service</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  doSomething</span><span class="pun">():</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Service</span><span class="pun">],</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ServiceModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接着，该模块可以导入到你的应用模块中，以便让该服务在整个应用中可用：</p><p translation-origin="off">This module can then be imported into your application module, to make the service available for injection in your app:</p>

<code-example path="dependency-injection/src/app/tree-shaking/app.module.ts" title="src/app/tree-shaking/app.modules.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    RouterModule.forRoot([]),
    ServiceModule,
  ],
})
export class AppModule {
}


</div><!----><header class="ng-star-inserted">src/app/tree-shaking/app.modules.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/tree-shaking/app.modules.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span><span class="pln">
    </span><span class="typ">RouterModule</span><span class="pun">.</span><span class="pln">forRoot</span><span class="pun">([]),</span><span class="pln">
    </span><span class="typ">ServiceModule</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当运行 <code>ngc</code> 时，它会把 AppModule 编译进一个模块工厂里，该工厂中含有它包含的所有子模块中声明过的所有提供商。在运行期间，该工厂会编程一个用于实例化这些服务的注入器。</p><p translation-origin="off">When <code>ngc</code> runs, it compiles AppModule into a module factory, which contains definitions for all the providers declared in all the modules it includes. At runtime, this factory becomes an injector that instantiates these services.</p>

<p translation-result="">在这种方式下，摇树优化无法工作，因为 Angular 无法根据该代码（服务类）是否被其它代码块使用过（比如该服务的提供商就定义在了模块工厂里）来排除它。
要让这些服务可以被摇树优化，所有关于如何构建该服务的实例的信息（提供商定义）就应该是该服务类本身的一部分。</p><p translation-origin="off">Tree-shaking doesn't work in the method above because Angular cannot decide to exclude one chunk of code (the provider definition for the service within the module factory) based on whether another chunk of code (the service class) is used. To make services tree-shakeable, the information about how to construct an instance of the service (the provider definition) needs to be a part of the service class itself.</p>

<h4 translation-result="" id="creating-tree-shakable-providers">创建可摇树优化的服务提供商<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#creating-tree-shakable-providers"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="creating-tree-shakable-providers">Creating tree-shakable providers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#creating-tree-shakable-providers"><i class="material-icons">link</i></a></h4>

<p translation-result="">要想创建可摇树优化的服务提供商，那些原本要通过模块来指定的信息就要改为在服务自身的 <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 装饰器中提供。</p><p translation-origin="off">To create providers that are tree-shakable, the information that used to be specified in the module should be specified in the <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> decorator on the service itself.</p>

<p translation-result="">下面的例子展示了一个与上面的 <code>ServiceModule</code> 范例等价的可摇树的优化版本：</p><p translation-origin="off">The following example shows the tree-shakeable equivalent to the <code>ServiceModule</code> example above:</p>

<code-example path="dependency-injection/src/app/tree-shaking/service.ts" title="src/app/tree-shaking/service.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
})
export class Service {
}


</div><!----><header class="ng-star-inserted">src/app/tree-shaking/service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/tree-shaking/service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln">
  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Service</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">上面这个例子中，<code>providedIn</code> 允许你声明要由哪个注入器来注入该服务。除了一些特殊情况外，这个值应该始终是 root（根注入器）。把该值设置为 root 可以确保该服务的范围是根注入器，而不是该注入器所在的那个特定模块。</p><p translation-origin="off">In the example above, <code>providedIn</code> allows you to declare the injector which injects this service. Unless there is a special case, the value should always be root. Setting the value to root ensures that the service is scoped to the root injector, without naming a particular module that is present in that injector.</p>

<p translation-result="">该服务也可以通过配置一个工厂函数来实例化，例子如下：</p><p translation-origin="off">The service can be instantiated by configuring a factory function as shown below:</p>

<code-example path="dependency-injection/src/app/tree-shaking/service.0.ts" title="src/app/tree-shaking/service.0.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
  useFactory: () =&gt; new Service('dependency'),
})
export class Service {
  constructor(private dep: string) {
  }
}


</div><!----><header class="ng-star-inserted">src/app/tree-shaking/service.0.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/tree-shaking/service.0.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span><span class="pln">
  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln">
  useFactory</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Service</span><span class="pun">(</span><span class="str">'dependency'</span><span class="pun">),</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Service</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> dep</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">要想改写（override）一个可摇树优化的提供商，可以在任何支持 <code>providers: []</code> 数组的 Angular 装饰器中注册该提供商。</p><p translation-origin="off">To override tree-shakable providers, register the provider using the <code>providers: []</code> array syntax of any Angular decorator that supports it.</p>

</div>
<a id="injector-config"></a>
<a id="bootstrap"></a>
<h2 translation-result="" id="inject-a-service">注入某个服务<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#inject-a-service"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="inject-a-service">Inject a service<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#inject-a-service"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code>HeroListComponent</code> 应该从 <code>HeroService</code> 中获取这些英雄数据。</p><p translation-origin="off">The <code>HeroListComponent</code> should get heroes from the <code>HeroService</code>.</p>

<p translation-result="">该组件不应该使用 <code>new</code> 来创建 <code>HeroService</code>。
它应该要求注入 <code>HeroService</code>。</p><p translation-origin="off">The component shouldn't create the <code>HeroService</code> with <code>new</code>.
It should ask for the <code>HeroService</code> to be injected.</p>

<p translation-result="">你可以通过<strong>在构造函数中添加一个带有该依赖类型的参数</strong>来要求 Angular 把这个依赖注入到组件的构造函数中。
下面是 <code>HeroListComponent</code> 的构造函数，它要求注入 <code>HeroService</code>。</p><p translation-origin="off">You can tell Angular to inject a dependency in the component's constructor by specifying a <strong>constructor parameter with the dependency type</strong>.
Here's the <code>HeroListComponent</code> constructor, asking for the <code>HeroService</code> to be injected.</p>

<code-example title="src/app/heroes/hero-list.component (constructor signature)" path="dependency-injection/src/app/heroes/hero-list.component.ts" region="ctor-signature" ng-version="6.0.0"><div style="display: none">
constructor(heroService: HeroService)

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component (constructor signature)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component (constructor signature)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当然，<code>HeroListComponent</code> 还应该使用注入的这个 <code>HeroService</code> 做点什么。
下面输出修改过的组件，改用注入的服务，与前一个版本对比一下。</p><p translation-origin="off">Of course, the <code>HeroListComponent</code> should do something with the injected <code>HeroService</code>.
Here's the revised component, making use of the injected service, side-by-side with the previous version for comparison.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">
  <code-pane title="hero-list.component (with DI)" path="dependency-injection/src/app/heroes/hero-list.component.2.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }   from '@angular/core';
import { Hero }        from './hero';
import { HeroService } from './hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-list',
  template: `
    &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes"&gt;
      {{hero.id}} - {{hero.name}}
    &lt;/div&gt;
  `
})
export class HeroListComponent {
  heroes: Hero[];

  constructor(heroService: HeroService) {
    this.heroes = heroService.getHeroes();
  }
}


</code-pane>

  <code-pane title="hero-list.component (without DI)" path="dependency-injection/src/app/heroes/hero-list.component.1.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }   from '@angular/core';
import { HEROES }      from './mock-heroes';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-list',
  template: `
    &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes"&gt;
      {{hero.id}} - {{hero.name}}
    &lt;/div&gt;
  `
})
export class HeroListComponent {
  heroes = HEROES;
}


</code-pane>
</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-5-0" tabindex="0" aria-controls="mat-tab-content-5-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-list.component (with DI)</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-5-1" tabindex="-1" aria-controls="mat-tab-content-5-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">hero-list.component (without DI)</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 228px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-14 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-5-0" aria-labelledby="mat-tab-label-5-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-list.component (with DI)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L5"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-hero-list'</span><span class="pun">,</span></li><li class="L6"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L7"><span class="str">    &lt;div *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="str">ngFor</span></a><span class="str">="let hero of heroes"&gt;</span></li><li class="L8"><span class="str">      {{hero.id}} - {{hero.name}}</span></li><li class="L9"><span class="str">    &lt;/div&gt;</span></li><li class="L0"><span class="str">  `</span></li><li class="L1"><span class="pun">})</span></li><li class="L2"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">  heroes</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">[];</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L6"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes </span><span class="pun">=</span><span class="pln"> heroService</span><span class="pun">.</span><span class="pln">getHeroes</span><span class="pun">();</span></li><li class="L7"><span class="pln">  </span><span class="pun">}</span></li><li class="L8"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-15 ng-star-inserted" role="tabpanel" id="mat-tab-content-5-1" aria-labelledby="mat-tab-label-5-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result="">注意，<code>HeroListComponent</code> 并不知道 <code>HeroService</code> 来自哪里。
不过，<strong>你</strong>知道它来自其父组件 <code>HeroesComponent</code>。
如果你决定改为在 <code>AppModule</code> 中提供这个 <code>HeroService</code>，<code>HeroListComponent</code> 不需要做任何改动。
<strong>唯一需要关心的问题</strong>是，<code>HeroService</code> 是由某个父注入器提供的。</p><p translation-origin="off">Notice that the <code>HeroListComponent</code> doesn't know where the <code>HeroService</code> comes from.
<em>You</em> know that it comes from the parent <code>HeroesComponent</code>.
If you decided instead to provide the <code>HeroService</code> in the <code>AppModule</code>,
the <code>HeroListComponent</code> wouldn't change at all.
The <em>only thing that matters</em> is that the <code>HeroService</code> is provided in some parent injector.</p>

<a id="singleton-services"></a>
<h2 translation-result="" id="singleton-services">单例服务<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#singleton-services"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="singleton-services">Singleton services<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#singleton-services"><i class="material-icons">link</i></a></h2>

<p translation-result="">服务<em>在每个注入器的范围内</em>是单例的。
在任何一个注入器中，最多只会有同一个服务的一个实例。</p><p translation-origin="off">Services are singletons <em>within the scope of an injector</em>.
There is at most one instance of a service in a given injector.</p>

<p translation-result="">这里只有一个根注入器，而 <code>UserService</code> 就是在该注入器中注册的。
所以，在整个应用中只能有一个 <code>UserService</code> 实例，每个要求注入 <code>UserService</code> 的类都会得到这个服务实例。</p><p translation-origin="off">There is only one root injector, and the <code>UserService</code> is registered with that injector.
Therefore, there can be just one <code>UserService</code> instance in the entire app,
and every class that injects <code>UserService</code> get this service instance.</p>

<p translation-result="">不过，Angular DI 是一个 <a href="https://angular.cn/guide/hierarchical-dependency-injection">多级注入系统</a>，这意味着各级注入器都可以创建它们自己的服务实例。
Angular 总会创建多级注入器。</p><p translation-origin="off">However, Angular DI is a
<a href="https://angular.cn/guide/hierarchical-dependency-injection">hierarchical injection system</a>,
which means that nested injectors can create their own service instances.
Angular creates nested injectors all the time.</p>

<a id="component-child-injectors"></a>
<h2 translation-result="" id="component-child-injectors">组件的子注入器<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#component-child-injectors"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="component-child-injectors">Component child injectors<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#component-child-injectors"><i class="material-icons">link</i></a></h2>

<p translation-result="">组件注入器是彼此独立的，每一个都会为这些组件提供的服务创建单独的实例。</p><p translation-origin="off">Component injectors are independent of each other and
each of them creates its own instances of the component-provided services.</p>

<p translation-result="">例如，当 Angular 创建一个带有 <code>@Component.providers</code> 的组件实例时，也会同时为这个实例创建一个新的<em>子注入器</em>。</p><p translation-origin="off">For example, when Angular creates a new instance of a component that has <code>@Component.providers</code>,
it also creates a new <em>child injector</em> for that instance.</p>

<p translation-result="">当 Angular 销毁某个组件实例时，也会同时销毁该组件的注入器，以及该注入器中的服务实例。</p><p translation-origin="off">When Angular destroys one of these component instances, it also destroys the
component's injector and that injector's service instances. </p>

<p translation-result="">由于是<a href="https://angular.cn/guide/hierarchical-dependency-injection">多层注入器</a>，因此你仍然可以把全应用级的服务注入到这些组件中。
组件的注入器是其父组件注入器的孩子，也是其爷爷注入器的孙子，以此类推，直到该应用的<strong>根</strong>注入器。
Angular 可以注入这条线上的任何注入器所提供的服务。</p><p translation-origin="off">Because of <a href="https://angular.cn/guide/hierarchical-dependency-injection">injector inheritance</a>,
you can still inject application-wide services into these components.
A component's injector is a child of its parent component's injector,
and a descendent of its parent's parent's injector, and so on all the way back to the application's <em>root</em> injector.
Angular can inject a service provided by any injector in that lineage.</p>

<p translation-result="">比如，Angular 可以把由 <code>HeroComponent</code> 提供的 <code>HeroService</code> 和由 <code>AppModule</code> 提供的 <code>UserService</code> 注入到 <code>HeroService</code> 中。</p><p translation-origin="off">For example, Angular could inject a <code>HeroListComponent</code>
with both the <code>HeroService</code> provided in <code>HeroComponent</code>
and the <code>UserService</code> provided in <code>AppModule</code>.</p>

<a id="testing-the-component"></a>
<h2 translation-result="" id="testing-the-component">测试组件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#testing-the-component"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="testing-the-component">Testing the component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#testing-the-component"><i class="material-icons">link</i></a></h2>

<p translation-result="">前面强调过，设计一个适合依赖注入的类，可以让这个类更容易测试。
要有效的测试应用中的一部分，只需要在构造函数的参数中列出依赖。</p><p translation-origin="off">Earlier you saw that designing a class for dependency injection makes the class easier to test.
Listing dependencies as constructor parameters may be all you need to test application parts effectively.</p>

<p translation-result="">例如，新建的 <code>HeroListComponent</code> 实例使用一个模拟 (mock) 服务，以便可以在测试中操纵它：</p><p translation-origin="off">For example, you can create a new <code>HeroListComponent</code> with a mock service that you can manipulate
under test:</p>

<code-example path="dependency-injection/src/app/test.component.ts" region="spec" title="src/app/test.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
const expectedHeroes = [{name: 'A'}, {name: 'B'}]
const mockService = &lt;HeroService&gt; {getHeroes: () =&gt; expectedHeroes }

it('should have heroes when HeroListComponent created', () =&gt; {
  // Pass the mock to the constructor as the Angular injector would
  const component = new HeroListComponent(mockService);
  expect(component.heroes.length).toEqual(expectedHeroes.length);
});

</div><!----><header class="ng-star-inserted">src/app/test.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/test.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> expectedHeroes </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[{</span><span class="pln">name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'A'</span><span class="pun">},</span><span class="pln"> </span><span class="pun">{</span><span class="pln">name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'B'</span><span class="pun">}]</span><span class="pln">
</span><span class="kwd">const</span><span class="pln"> mockService </span><span class="pun">=</span><span class="pln"> </span><span class="pun">&lt;</span><span class="typ">HeroService</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">getHeroes</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> expectedHeroes </span><span class="pun">}</span><span class="pln">

it</span><span class="pun">(</span><span class="str">'should have heroes when HeroListComponent created'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="com">// Pass the mock to the constructor as the Angular injector would</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> component </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pun">(</span><span class="pln">mockService</span><span class="pun">);</span><span class="pln">
  expect</span><span class="pun">(</span><span class="pln">component</span><span class="pun">.</span><span class="pln">heroes</span><span class="pun">.</span><span class="pln">length</span><span class="pun">).</span><span class="pln">toEqual</span><span class="pun">(</span><span class="pln">expectedHeroes</span><span class="pun">.</span><span class="pln">length</span><span class="pun">);</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">要学习更多知识，参见<a href="https://angular.cn/guide/testing">测试</a>一章。</p><p translation-origin="off">Learn more in the <a href="https://angular.cn/guide/testing">Testing</a> guide.</p>

</div>
<a id="service-needs-service"></a>
<h2 translation-result="" id="when-the-service-needs-a-service">当服务需要别的服务时<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#when-the-service-needs-a-service"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="when-the-service-needs-a-service">When the service needs a service<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#when-the-service-needs-a-service"><i class="material-icons">link</i></a></h2>

<p translation-result="">这个 <code>HeroService</code> 非常简单。它本身不需要任何依赖。</p><p translation-origin="off">The <code>HeroService</code> is very simple. It doesn't have any dependencies of its own.</p>

<p translation-result="">如果它也有依赖，该怎么办呢？例如，它需要通过日志服务来汇报自己的活动。
你同样用<em>构造函数注入</em>模式，来添加一个带有 <code>Logger</code> 参数的构造函数。</p><p translation-origin="off">What if it had a dependency? What if it reported its activities through a logging service?
You'd apply the same <em>constructor injection</em> pattern,
adding a constructor that takes a <code>Logger</code> parameter.</p>

<p translation-result="">下面是修改后的 <code>HeroService</code>，它注入了 <code>Logger</code>，对比前后这两个版本：</p><p translation-origin="off">Here is the revised <code>HeroService</code> that injects the <code>Logger</code>, side-by-side with the previous service for comparison.</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/heroes/hero.service (v2)" path="dependency-injection/src/app/heroes/hero.service.2.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { HEROES }     from './mock-heroes';
import { Logger }     from '../logger.service';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
})
export class HeroService {

  constructor(private logger: Logger) {  }

  getHeroes() {
    this.logger.log('Getting heroes ...');
    return HEROES;
  }
}


</code-pane>

  <code-pane title="src/app/heroes/hero.service (v1)" path="dependency-injection/src/app/heroes/hero.service.1.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';
import { HEROES }     from './mock-heroes';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>({
  providedIn: 'root',
})
export class HeroService {
  getHeroes() { return HEROES; }
}


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-6-0" tabindex="0" aria-controls="mat-tab-content-6-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/hero.service (v2)</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-6-1" tabindex="-1" aria-controls="mat-tab-content-6-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/heroes/hero.service (v1)</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 254px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c9-16 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-6-0" aria-labelledby="mat-tab-label-6-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero.service (v2)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></li><li class="L1"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> HEROES </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./mock-heroes'</span><span class="pun">;</span></li><li class="L2"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> </span><span class="pun">}</span><span class="pln">     </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../logger.service'</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">({</span></li><li class="L5"><span class="pln">  providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span></li><li class="L6"><span class="pun">})</span></li><li class="L7"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> logger</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">  </span><span class="pun">}</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="pln">  getHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">logger</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Getting heroes ...'</span><span class="pun">);</span></li><li class="L3"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> HEROES</span><span class="pun">;</span></li><li class="L4"><span class="pln">  </span><span class="pun">}</span></li><li class="L5"><span class="pun">}</span></li></ol></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c9-17 ng-star-inserted" role="tabpanel" id="mat-tab-content-6-1" aria-labelledby="mat-tab-label-6-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result="">这个构造函数要求注入一个 <code>Logger</code> 类的实例，并把它存到名为 <code>logger</code> 的私有字段中。
当请求英雄数据时，<code>getHeroes()</code> 中就会记录一个消息。</p><p translation-origin="off">The constructor asks for an injected instance of a <code>Logger</code> and stores it in a private field called <code>logger</code>.
The <code>getHeroes()</code> method logs a message when asked to fetch heroes.</p>

<a id="logger-service"></a>
<h4 translation-result="" id="the-dependent-emloggerem-service">被依赖的 <code>Logger</code> 服务<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-dependent-emloggerem-service"><i class="material-icons">link</i></a></h4><h4 translation-origin="off" id="the-dependent-logger-service">The dependent <em>Logger</em> service<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#the-dependent-logger-service"><i class="material-icons">link</i></a></h4>

<p translation-result="">这个范例应用的 <code>Logger</code> 服务非常简单：</p><p translation-origin="off">The sample app's <code>Logger</code> service is quite simple:</p>

<code-example path="dependency-injection/src/app/logger.service.ts" title="src/app/logger.service.ts" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class Logger {
  logs: string[] = []; // capture logs for testing

  log(message: string) {
    this.logs.push(message);
    console.log(message);
  }
}


</div><!----><header class="ng-star-inserted">src/app/logger.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/logger.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Logger</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  logs</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln"> </span><span class="com">// capture logs for testing</span><span class="pln">

  log</span><span class="pun">(</span><span class="pln">message</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">logs</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
    console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">message</span><span class="pun">);</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果该应用没有提供这个 <code>Logger</code> 服务，当 Angular 试图把 <code>Logger</code> 注入到 <code>HeroService</code> 中时，就会抛出一个异常。</p><p translation-origin="off">If the app didn't provide this <code>Logger</code>,
Angular would throw an exception when it looked for a <code>Logger</code> to inject
into the <code>HeroService</code>.</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">
  ERROR Error: No provider for Logger!
</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ERROR </span><span class="typ">Error</span><span class="pun">:</span><span class="pln"> </span><span class="typ">No</span><span class="pln"> provider </span><span class="kwd">for</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">!</span></code>
    </pre></aio-code></code-example>
<p translation-result="">因为 <code>Logger</code> 服务的单例应该随处可用，所以要在根模块 <code>AppModule</code> 中提供它。</p><p translation-origin="off">Because a singleton logger service is useful everywhere,
it's provided in the root <code>AppModule</code>.</p>

<code-example path="dependency-injection/src/app/app.module.ts" linenums="false" title="src/app/app.module.ts (providers)" region="providers-2" ng-version="6.0.0"><div style="display: none">
providers: [
  Logger,
  UserService,
  { provide: APP_CONFIG, useValue: HERO_DI_CONFIG }
],

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (providers)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (providers)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="typ">Logger</span><span class="pun">,</span><span class="pln">
  </span><span class="typ">UserService</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> APP_CONFIG</span><span class="pun">,</span><span class="pln"> useValue</span><span class="pun">:</span><span class="pln"> HERO_DI_CONFIG </span><span class="pun">}</span><span class="pln">
</span><span class="pun">],</span></code>
    </pre></aio-code></code-example>
<a id="token"></a>
<h2 translation-result="" id="dependency-injection-tokens">依赖注入令牌<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#dependency-injection-tokens"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="dependency-injection-tokens">Dependency injection tokens<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#dependency-injection-tokens"><i class="material-icons">link</i></a></h2>

<p translation-result="">当向注入器注册提供商时，实际上是把这个提供商和一个 DI 令牌关联起来了。
注入器维护一个内部的<em>令牌-提供商</em>映射表，这个映射表会在请求依赖时被引用到。
令牌就是这个映射表中的键值。</p><p translation-origin="off">When you register a provider with an injector, you associate that provider with a dependency injection token.
The injector maintains an internal <em>token-provider</em> map that it references when
asked for a dependency. The token is the key to the map.</p>

<p translation-result="">在前面的所有例子中，依赖值都是一个类<em>实例</em>，并且类的<em>类型</em>作为它自己的查找键值。
在下面的代码中，<code>HeroService</code> 类型作为令牌，直接从注入器中获取 <code>HeroService</code> 实例：</p><p translation-origin="off">In all previous examples, the dependency value has been a class <em>instance</em>, and
the class <em>type</em> served as its own lookup key.
Here you get a <code>HeroService</code> directly from the injector by supplying the <code>HeroService</code> type as the token:</p>

<code-example path="dependency-injection/src/app/injector.component.ts" region="get-hero-service" title="src/app/injector.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
heroService: HeroService;

</div><!----><header class="ng-star-inserted">src/app/injector.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/injector.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">编写需要基于类的依赖注入的构造函数对你来说是很幸运的。
只要定义一个 <code>HeroService</code> 类型的构造函数参数，
Angular 就会知道把跟 <code>HeroService</code> 类令牌关联的服务注入进来：</p><p translation-origin="off">You have similar good fortune when you write a constructor that requires an injected class-based dependency.
When you define a constructor parameter with the <code>HeroService</code> class type,
Angular knows to inject the
service associated with that <code>HeroService</code> class token:</p>

<code-example path="dependency-injection/src/app/heroes/hero-list.component.ts" region="ctor-signature" title="src/app/heroes/hero-list.component.ts" ng-version="6.0.0"><div style="display: none">
constructor(heroService: HeroService)

</div><!----><header class="ng-star-inserted">src/app/heroes/hero-list.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/heroes/hero-list.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这是一个特殊的规约，因为大多数依赖值都是以类的形式提供的。</p><p translation-origin="off">This is especially convenient when you consider that most dependency values are provided by classes.</p>

<a id="non-class-dependencies"></a>
<h3 translation-result="" id="non-class-dependencies">非类依赖<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#non-class-dependencies"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="non-class-dependencies">Non-class dependencies<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#non-class-dependencies"><i class="material-icons">link</i></a></h3>

<p translation-result="">如果依赖值不是一个类呢？有时候想要注入的东西是一个字符串，函数或者对象。</p><p translation-origin="off">What if the dependency value isn't a class? Sometimes the thing you want to inject is a
string, function, or object.</p>

<p translation-result="">应用程序经常为很多很小的因素定义配置对象（例如应用程序的标题或网络 API 终点的地址）。
但是这些配置对象不总是类的实例，它们可能是对象，如下面这个：</p><p translation-origin="off">Applications often define configuration objects with lots of small facts
(like the title of the application or the address of a web API endpoint)
but these configuration objects aren't always instances of a class.
They can be object literals such as this one:</p>

<code-example path="dependency-injection/src/app/app.config.ts" region="config" title="src/app/app.config.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export const HERO_DI_CONFIG: AppConfig = {
  apiEndpoint: 'api.heroes.com',
  title: 'Dependency Injection'
};


</div><!----><header class="ng-star-inserted">src/app/app.config.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.config.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> HERO_DI_CONFIG</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  apiEndpoint</span><span class="pun">:</span><span class="pln"> </span><span class="str">'api.heroes.com'</span><span class="pun">,</span><span class="pln">
  title</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Dependency Injection'</span><span class="pln">
</span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果想让这个配置对象在注入时可用该怎么办？你知道你可以用<a href="https://angular.cn/guide/dependency-injection#value-provider">值提供商</a>来注册一个对象。</p><p translation-origin="off">What if you'd like to make this configuration object available for injection?
You know you can register an object with a <a href="https://angular.cn/guide/dependency-injection#value-provider">value provider</a>.</p>

<p translation-result="">但是，这种情况下用什么作令牌呢？
你没办法找一个类来当作令牌，因为没有 <code>Config</code> 类。</p><p translation-origin="off">But what should you use as the token?
You don't have a class to serve as a token.
There is no <code>AppConfig</code> class.</p>

<div class="l-sub-section">
<h3 translation-result="" id="typescript-interfaces-arent-valid-tokens">TypeScript 接口不是一个有效的令牌<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#typescript-interfaces-arent-valid-tokens"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="typescript-interfaces-arent-valid-tokens">TypeScript interfaces aren't valid tokens<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#typescript-interfaces-arent-valid-tokens"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>HERO_DI_CONFIG</code> 常量有一个接口：<code>AppConfig</code>。不幸的是，不能把 TypeScript 接口用作令牌：</p><p translation-origin="off">The <code>HERO_DI_CONFIG</code> constant conforms to the <code>AppConfig</code> interface.
Unfortunately, you cannot use a TypeScript interface as a token:</p>

<code-example path="dependency-injection/src/app/providers.component.ts" region="providers-9-interface" linenums="false" ng-version="6.0.0"><div style="display: none">
// FAIL! Can't use interface as provider token
[{ provide: AppConfig, useValue: HERO_DI_CONFIG })]

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// FAIL! Can't use interface as provider token</span><span class="pln">
</span><span class="pun">[{</span><span class="pln"> provide</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pun">,</span><span class="pln"> useValue</span><span class="pun">:</span><span class="pln"> HERO_DI_CONFIG </span><span class="pun">})]</span></code>
    </pre></aio-code></code-example>
<code-example path="dependency-injection/src/app/providers.component.ts" region="provider-9-ctor-interface" linenums="false" ng-version="6.0.0"><div style="display: none">
// FAIL! Can't inject using the interface as the parameter type
constructor(private config: AppConfig){ }

</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// FAIL! Can't inject using the interface as the parameter type</span><span class="pln">
</span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> config</span><span class="pun">:</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pun">){</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">对于习惯于在强类型的语言中使用依赖注入的开发人员，这会看起来很奇怪，
因为在强类型语言中，接口是首选的用于查找依赖的主键。</p><p translation-origin="off">That seems strange if you're used to dependency injection in strongly typed languages, where
an interface is the preferred dependency lookup key.</p>

<p translation-result="">这不是 Angular 的错。接口只是 TypeScript 设计时 (design-time) 的概念。JavaScript 没有接口。
TypeScript 接口不会出现在生成的 JavaScript 代码中。
在运行期，没有接口类型信息可供 Angular 查找。</p><p translation-origin="off">It's not Angular's doing. An interface is a TypeScript design-time artifact. JavaScript doesn't have interfaces.
The TypeScript interface disappears from the generated JavaScript.
There is no interface type information left for Angular to find at runtime.</p>

</div>
<a id="injection-token"></a>
<h3 translation-result="" id="eminjectiontokenem-1"><em>InjectionToken</em> 值<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#eminjectiontokenem-1"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="injectiontoken"><em>InjectionToken</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#injectiontoken"><i class="material-icons">link</i></a></h3>

<p translation-result="">解决方案是为非类依赖定义和使用<a href="https://angular.cn/api/core/InjectionToken"><b>InjectionToken</b></a>作为提供商令牌。
定义方式是这样的：</p><p translation-origin="off">One solution to choosing a provider token for non-class dependencies is
to define and use an <a href="https://angular.cn/api/core/InjectionToken"><em>InjectionToken</em></a>.
The definition of such a token looks like this:</p>

<code-example ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a> } from '@angular/core';
export const TOKEN = new <a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a>('desc');
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor"><span class="typ">InjectionToken</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> TOKEN </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor"><span class="typ">InjectionToken</span></a><span class="pun">(</span><span class="str">'desc'</span><span class="pun">);</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你可以在创建 <code><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a></code> 时直接配置一个提供商。该提供商的配置会决定由哪个注入器来提供这个令牌，以及如何创建它的值。
这和 <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code> 的用法很像，不过你没法用 <code><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a></code> 来定义标准提供商（比如 <code>useClass</code> 或 <code>useFactory</code>），而要指定一个工厂函数，该函数直接返回想要提供的值。</p><p translation-origin="off">You can directly configure a provider when creating an <code><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a></code>. The provider configuration determines which injector provides the token and how the value will be created.  This is similar to using <code>@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a></code>, except that you cannot define standard providers (such as <code>useClass</code> or <code>useFactory</code>) with <code><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a></code>. Instead, you specify a factory function which returns the value to be provided directly.</p>

<code-example ng-version="6.0.0"><div style="display: none">
export const TOKEN = 
  new <a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a>('desc', { providedIn: 'root', factory: () =&gt; new AppConfig(), })
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> TOKEN </span><span class="pun">=</span><span class="pln"> 
  </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor"><span class="typ">InjectionToken</span></a><span class="pun">(</span><span class="str">'desc'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln"> factory</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pun">(),</span><span class="pln"> </span><span class="pun">})</span></code>
    </pre></aio-code></code-example>
<p translation-result="">现在，在 <code>@<a href="https://angular.cn/api/core/Inject" class="code-anchor">Inject</a></code> 装饰器的帮助下，这个配置对象可以注入到任何需要它的构造函数中：</p><p translation-origin="off">Now you can inject the configuration object into any constructor that needs it, with
the help of an <code>@<a href="https://angular.cn/api/core/Inject" class="code-anchor">Inject</a></code> decorator:</p>

<code-example ng-version="6.0.0"><div style="display: none">
constructor(@<a href="https://angular.cn/api/core/Inject" class="code-anchor">Inject</a>(TOKEN));
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="lit">@</span><a href="https://angular.cn/api/core/Inject" class="code-anchor"><span class="lit">Inject</span></a><span class="pun">(</span><span class="pln">TOKEN</span><span class="pun">));</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果工厂函数需要访问其它的 DI 令牌，它可以使用来自 <code>@angular/core</code> 中的 <code>inject</code> 函数来申请它的依赖。</p><p translation-origin="off">If the factory function needs access to other DI tokens, it can use the inject function from <code>@angular/core</code> to request dependencies.</p>

<code-example ng-version="6.0.0"><div style="display: none">
const TOKEN = 
  new <a href="https://angular.cn/api/core/InjectionToken" class="code-anchor">InjectionToken</a>('tree-shakeable token', 
    { providedIn: 'root', factory: () =&gt; 
        new AppConfig(inject(Parameter1), inject(Paremeter2)), });
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> TOKEN </span><span class="pun">=</span><span class="pln"> 
  </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/core/InjectionToken" class="code-anchor"><span class="typ">InjectionToken</span></a><span class="pun">(</span><span class="str">'tree-shakeable token'</span><span class="pun">,</span><span class="pln"> 
    </span><span class="pun">{</span><span class="pln"> providedIn</span><span class="pun">:</span><span class="pln"> </span><span class="str">'root'</span><span class="pun">,</span><span class="pln"> factory</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> 
        </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">AppConfig</span><span class="pun">(</span><span class="pln">inject</span><span class="pun">(</span><span class="typ">Parameter1</span><span class="pun">),</span><span class="pln"> inject</span><span class="pun">(</span><span class="typ">Paremeter2</span><span class="pun">)),</span><span class="pln"> </span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<a id="optional"></a>
<h2 translation-result="" id="optional-dependencies">可选依赖<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#optional-dependencies"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="optional-dependencies">Optional dependencies<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#optional-dependencies"><i class="material-icons">link</i></a></h2>

<p translation-result="">可以把构造函数的参数标记为 <code>null</code> 来告诉 Angular 该依赖是可选的：</p><p translation-origin="off">You can tell Angular that the dependency is optional by annotating the constructor argument with null:</p>

<code-example ng-version="6.0.0"><div style="display: none">
constructor(@<a href="https://angular.cn/api/core/Inject" class="code-anchor">Inject</a>(Token, null));
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="lit">@</span><a href="https://angular.cn/api/core/Inject" class="code-anchor"><span class="lit">Inject</span></a><span class="pun">(</span><span class="typ">Token</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">));</span></code>
    </pre></aio-code></code-example>
<p translation-result="">如果要使用可选依赖，你的代码就必须准备好处理空值。</p><p translation-origin="off">When using optional dependencies, your code must be prepared for a null value.</p>

<h2 translation-result="" id="summary-2">小结<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#summary-2"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="summary">Summary<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#summary"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章，你学习了 Angular 依赖注入的基础知识。
你可以注册很多种类的提供商，知道如何通过添加构造函数的参数来请求一个注入对象（例如一个服务）。</p><p translation-origin="off">You learned the basics of Angular dependency injection in this page.
You can register various kinds of providers,
and you know how to ask for an injected object (such as a service) by
adding a parameter to a constructor.</p>

<p translation-result="">Angular 依赖注入比前面描述的更能干。
学习更多高级特性，如对嵌套注入器的支持，见<a href="https://angular.cn/guide/hierarchical-dependency-injection">多级依赖注入</a>一章。</p><p translation-origin="off">Angular dependency injection is more capable than this guide has described.
You can learn more about its advanced features, beginning with its support for
nested injectors, in
<a href="https://angular.cn/guide/hierarchical-dependency-injection">Hierarchical Dependency Injection</a>.</p>

<a id="explicit-injector"></a>
<h2 translation-result="" id="appendix-working-with-injectors-directly">附录：直接使用注入器<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#appendix-working-with-injectors-directly"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="appendix-working-with-injectors-directly">Appendix: Working with injectors directly<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#appendix-working-with-injectors-directly"><i class="material-icons">link</i></a></h2>

<p translation-result="">这里的 <code>InjectorComponent</code> 直接使用了注入器，
但开发者很少直接使用它。</p><p translation-origin="off">Developers rarely work directly with an injector, but
here's an <code>InjectorComponent</code> that does.</p>

<code-example path="dependency-injection/src/app/injector.component.ts" region="injector" title="src/app/injector.component.ts" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-injectors',
  template: `
  &lt;h2&gt;Other Injections&lt;/h2&gt;
  &lt;div id="car"&gt;{{car.drive()}}&lt;/div&gt;
  &lt;div id="hero"&gt;{{hero.name}}&lt;/div&gt;
  &lt;div id="rodent"&gt;{{rodent}}&lt;/div&gt;
  `,
  providers: [Car, Engine, Tires, heroServiceProvider, Logger]
})
export class InjectorComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  car: Car;

  heroService: HeroService;
  hero: Hero;

  constructor(private injector: <a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a>) { }

  ngOnInit() {
    this.car = this.injector.get(Car);
    this.heroService = this.injector.get(HeroService);
    this.hero = this.heroService.getHeroes()[0];
  }

  get rodent() {
    let rousDontExist = `R.O.U.S.'s? I don't think they exist!`;
    return this.injector.get(ROUS, rousDontExist);
  }
}

</div><!----><header class="ng-star-inserted">src/app/injector.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/injector.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span></li><li class="L1"><span class="pln">  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-injectors'</span><span class="pun">,</span></li><li class="L2"><span class="pln">  </span><span class="kwd">template</span><span class="pun">:</span><span class="pln"> </span><span class="str">`</span></li><li class="L3"><span class="str">  &lt;h2&gt;Other Injections&lt;/h2&gt;</span></li><li class="L4"><span class="str">  &lt;div id="car"&gt;{{car.drive()}}&lt;/div&gt;</span></li><li class="L5"><span class="str">  &lt;div id="hero"&gt;{{hero.name}}&lt;/div&gt;</span></li><li class="L6"><span class="str">  &lt;div id="rodent"&gt;{{rodent}}&lt;/div&gt;</span></li><li class="L7"><span class="str">  `</span><span class="pun">,</span></li><li class="L8"><span class="pln">  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="typ">Car</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Engine</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Tires</span><span class="pun">,</span><span class="pln"> heroServiceProvider</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Logger</span><span class="pun">]</span></li><li class="L9"><span class="pun">})</span></li><li class="L0"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">InjectorComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  car</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Car</span><span class="pun">;</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="pln">  heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">;</span></li><li class="L4"><span class="pln">  hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">;</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> injector</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injector" class="code-anchor"><span class="typ">Injector</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L9"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">car </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">injector</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="typ">Car</span><span class="pun">);</span></li><li class="L0"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">injector</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="typ">HeroService</span><span class="pun">);</span></li><li class="L1"><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">getHeroes</span><span class="pun">()[</span><span class="lit">0</span><span class="pun">];</span></li><li class="L2"><span class="pln">  </span><span class="pun">}</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">  </span><span class="kwd">get</span><span class="pln"> rodent</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">    </span><span class="kwd">let</span><span class="pln"> rousDontExist </span><span class="pun">=</span><span class="pln"> </span><span class="str">`R.O.U.S.'s? I don't think they exist!`</span><span class="pun">;</span></li><li class="L6"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">injector</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="pln">ROUS</span><span class="pun">,</span><span class="pln"> rousDontExist</span><span class="pun">);</span></li><li class="L7"><span class="pln">  </span><span class="pun">}</span></li><li class="L8"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result=""><code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> 本身是可注入的服务。</p><p translation-origin="off">An <code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> is itself an injectable service.</p>

<p translation-result="">在这个例子中，Angular 把组件自身的 <code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> 注入到了组件的构造函数中。
然后，组件在 <code>ngOnInit()</code> 中向注入的注入器请求它所需的服务。</p><p translation-origin="off">In this example, Angular injects the component's own <code><a href="https://angular.cn/api/core/Injector" class="code-anchor">Injector</a></code> into the component's constructor.
The component then asks the injected injector for the services it wants in <code>ngOnInit()</code>.</p>

<p translation-result="">注意，这些服务本身没有注入到组件，它们是通过调用 <code>injector.get()</code> 获得的。</p><p translation-origin="off">Note that the services themselves are not injected into the component.
They are retrieved by calling <code>injector.get()</code>.</p>

<p translation-result=""><code>get()</code> 方法如果不能解析所请求的服务，会抛出异常。
调用 <code>get()</code> 时，还可以使用第二个参数，一旦获取的服务没有在当前或任何祖先注入器中注册过，
就把它作为返回值。</p><p translation-origin="off">The <code>get()</code> method throws an error if it can't resolve the requested service.
You can call <code>get()</code> with a second parameter, which is the value to return if the service
is not found. Angular can't find the service if it's not registered with this or any ancestor injector.</p>

<div class="l-sub-section">
<p translation-result="">刚描述的这项技术是<a href="https://en.wikipedia.org/wiki/Service_locator_pattern">服务定位器模式</a>的一个范例。</p><p translation-origin="off">The technique is an example of the
<a href="https://en.wikipedia.org/wiki/Service_locator_pattern">service locator pattern</a>.</p>

<p translation-result="">要<strong>避免使用</strong>此技术，除非确实需要它。
它会鼓励鲁莽的方式，就像在这里看到的。
它难以解释、理解和测试。
仅通过阅读构造函数，没法知道这个类需要什么或者它将做什么。
它可以从任何祖先组件中获得服务，而不仅仅是它自己。
会迫使你深入它的实现，才可能明白它都做了啥。</p><p translation-origin="off"><strong>Avoid</strong> this technique unless you genuinely need it.
It encourages a careless grab-bag approach such as you see here.
It's difficult to explain, understand, and test.
You can't know by inspecting the constructor what this class requires or what it will do.
It could acquire services from any ancestor component, not just its own.
You're forced to spelunk the implementation to discover what it does.</p>

<p translation-result="">框架开发人员必须采用通用的或者动态的方式获取服务时，可能采用这个方法。</p><p translation-origin="off">Framework developers may take this approach when they
must acquire services generically and dynamically.</p>

</div>
<a id="one-class-per-file"></a>
<h2 translation-result="" id="appendix-one-class-per-file">附录：为什么建议每个文件只放一个类<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#appendix-one-class-per-file"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="appendix-one-class-per-file">Appendix: one class per file<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/dependency-injection#appendix-one-class-per-file"><i class="material-icons">link</i></a></h2>

<p translation-result="">在同一个文件中有多个类容易造成混淆，最好避免。
开发人员期望每个文件只放一个类。这会让它们开心点。</p><p translation-origin="off">Having multiple classes in the same file is confusing and best avoided.
Developers expect one class per file. Keep them happy.</p>

<p translation-result="">如果你把 <code>HeroService</code> 和 <code>HeroesComponent</code> 组合在同一个文件里，
<strong>就得把组件定义放在最后面！</strong>
如果把组件定义在了服务的前面，
在运行时抛出空指针错误。</p><p translation-origin="off">If you combine the <code>HeroService</code> class with
the <code>HeroesComponent</code> in the same file,
<strong>define the component last</strong>.
If you define the component before the service,
you'll get a runtime null reference error.</p>

<div class="l-sub-section">
<p translation-result="">在 <code><a href="https://angular.cn/api/core/forwardRef" class="code-anchor">forwardRef</a>()</code> 方法的帮助下，实际上也可以先定义组件，
具体说明见这篇<a href="http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html">博客</a>。</p><p translation-origin="off">You actually can define the component first with the help of the <code><a href="https://angular.cn/api/core/forwardRef" class="code-anchor">forwardRef</a>()</code> method as explained
in this <a href="http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html">blog post</a>.</p>

<p translation-result="">但是为什么要先给自己找麻烦呢？
还是通过在独立的文件中定义组件和服务，完全避免此问题吧。</p><p translation-origin="off">But it's best to avoid the problem altogether by defining components and services in separate files.</p>

</div>

</div>
<!-- links to this doc:
 - api/core/ClassProvider
 - api/core/ExistingProvider
 - api/core/FactoryProvider
 - api/core/Host
 - api/core/HostDecorator
 - api/core/Inject
 - api/core/InjectDecorator
 - api/core/Injectable
 - api/core/InjectableDecorator
 - api/core/Injector
 - api/core/Optional
 - api/core/OptionalDecorator
 - api/core/Provider
 - api/core/Self
 - api/core/SelfDecorator
 - api/core/SkipSelf
 - api/core/SkipSelfDecorator
 - api/core/StaticProvider
 - api/core/TypeProvider
 - api/core/ValueProvider
 - guide/architecture-services
 - guide/attribute-directives
 - guide/dependency-injection-in-action
 - guide/dependency-injection-pattern
 - guide/glossary
 - guide/hierarchical-dependency-injection
 - guide/http
 - guide/providers
 - guide/router
 - guide/sharing-ngmodules
 - guide/testing
 - guide/upgrade
 - tutorial/toh-pt4
-->
<!-- links from this doc:
 - ../api/core/InjectionToken
 - api/common/NgForOf
 - api/core/Component
 - api/core/Inject
 - api/core/Injectable
 - api/core/InjectionToken
 - api/core/Injector
 - api/core/NgModule
 - api/core/NgModule#providers
 - api/core/OnInit
 - api/core/forwardRef
 - api/platform-browser/BrowserModule
 - guide/bootstrapping
 - guide/dependency-injection#aliased-class-providers
 - guide/dependency-injection#alternative-class-providers
 - guide/dependency-injection#angular-dependency-injection
 - guide/dependency-injection#appendix-one-class-per-file
 - guide/dependency-injection#appendix-working-with-injectors-directly
 - guide/dependency-injection#class-provider-with-dependencies
 - guide/dependency-injection#component-child-injectors
 - guide/dependency-injection#component-providers
 - guide/dependency-injection#create-an-injectable-emheroserviceem
 - guide/dependency-injection#create-an-injectable-heroservice
 - guide/dependency-injection#creating-tree-shakable-providers
 - guide/dependency-injection#dependency-injection-tokens
 - guide/dependency-injection#di-by-example
 - guide/dependency-injection#emcomponentem-providers
 - guide/dependency-injection#eminjectiontokenem-1
 - guide/dependency-injection#emngmoduleem-providers
 - guide/dependency-injection#factory-providers
 - guide/dependency-injection#inject-a-service
 - guide/dependency-injection#injectable-emngmoduleem-or-emcomponentem
 - guide/dependency-injection#injectable-ngmodule-or-component
 - guide/dependency-injection#injectable-providers
 - guide/dependency-injection#injection-token
 - guide/dependency-injection#injectiontoken
 - guide/dependency-injection#injectors
 - guide/dependency-injection#ngmodule-providers
 - guide/dependency-injection#non-class-dependencies
 - guide/dependency-injection#one-class-per-file
 - guide/dependency-injection#optional-dependencies
 - guide/dependency-injection#providers
 - guide/dependency-injection#singleton-services
 - guide/dependency-injection#summary
 - guide/dependency-injection#summary-2
 - guide/dependency-injection#testing-the-component
 - guide/dependency-injection#the-class-as-its-own-provider
 - guide/dependency-injection#the-dependent-emloggerem-service
 - guide/dependency-injection#the-dependent-logger-service
 - guide/dependency-injection#the-emprovideem-object-literal-1
 - guide/dependency-injection#the-provide-object-literal
 - guide/dependency-injection#token
 - guide/dependency-injection#tree-shakable-providers
 - guide/dependency-injection#typescript-interfaces-arent-valid-tokens
 - guide/dependency-injection#value-provider
 - guide/dependency-injection#value-providers
 - guide/dependency-injection#when-the-service-needs-a-service
 - guide/dependency-injection-pattern
 - guide/hierarchical-dependency-injection
 - guide/lazy-loading-ngmodules
 - guide/testing
 - tutorial/
 - http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html
 - https://cli.angular.io/
 - https://en.wikipedia.org/wiki/Service_locator_pattern
--></div></aio-doc-viewer><aio-dt><!----></aio-dt></section></mat-sidenav-content></mat-sidenav-container><!----><div class="toc-container no-print ng-star-inserted"><aio-toc><!----><div class="toc-inner no-print collapsed ng-star-inserted"><!----><!----><ul class="toc-list"><!----><!----><!----><li title="Angular 依赖注入link" class="h1 active ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#angular-dependency-injection">Angular 依赖注入</a></li><!----><!----><!----><li title="DI 的例子link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#di-by-example">DI 的例子</a></li><!----><!----><!----><li title="创建一个可注入的 HeroServicelink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#create-an-injectable-emheroserviceem">创建一个可注入的 <code>HeroService</code></a></li><!----><!----><!----><li title="注入器link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#injectors">注入器</a></li><!----><!----><!----><li title="@Injectable 的 providers 数组link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#injectable-providers">@Injectable 的 providers 数组</a></li><!----><!----><!----><li title="@NgModule 中的 providerslink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#emngmoduleem-providers"><code>@NgModule</code> 中的 <code>providers</code></a></li><!----><!----><!----><li title="在组件中注册提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#emcomponentem-providers">在组件中注册提供商</a></li><!----><!----><!----><li title="@Injectable、@NgModule 还是 @Component ？link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#injectable-emngmoduleem-or-emcomponentem">@Injectable、<em>@NgModule</em> 还是 <em>@Component</em> ？</a></li><!----><!----><!----><li title="服务提供商们link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#providers">服务提供商们</a></li><!----><!----><!----><li title="把类作为它自己的提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#the-class-as-its-own-provider">把类作为它自己的提供商</a></li><!----><!----><!----><li title="provide 对象字面量link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#the-emprovideem-object-literal-1"><em>provide</em> 对象字面量</a></li><!----><!----><!----><li title="备选的类提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#alternative-class-providers">备选的类提供商</a></li><!----><!----><!----><li title="带依赖的类提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#class-provider-with-dependencies">带依赖的类提供商</a></li><!----><!----><!----><li title="别名类提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#aliased-class-providers">别名类提供商</a></li><!----><!----><!----><li title="值提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#value-providers">值提供商</a></li><!----><!----><!----><li title="工厂提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#factory-providers">工厂提供商</a></li><!----><!----><!----><li title="可以被摇树优化的提供商link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#tree-shakable-providers">可以被摇树优化的提供商</a></li><!----><!----><!----><li title="注入某个服务link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#inject-a-service">注入某个服务</a></li><!----><!----><!----><li title="单例服务link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#singleton-services">单例服务</a></li><!----><!----><!----><li title="组件的子注入器link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#component-child-injectors">组件的子注入器</a></li><!----><!----><!----><li title="测试组件link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#testing-the-component">测试组件</a></li><!----><!----><!----><li title="当服务需要别的服务时link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#when-the-service-needs-a-service">当服务需要别的服务时</a></li><!----><!----><!----><li title="依赖注入令牌link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#dependency-injection-tokens">依赖注入令牌</a></li><!----><!----><!----><li title="非类依赖link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#non-class-dependencies">非类依赖</a></li><!----><!----><!----><li title="TypeScript 接口不是一个有效的令牌link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#typescript-interfaces-arent-valid-tokens">TypeScript 接口不是一个有效的令牌</a></li><!----><!----><!----><li title="InjectionToken 值link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#eminjectiontokenem-1"><em>InjectionToken</em> 值</a></li><!----><!----><!----><li title="可选依赖link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#optional-dependencies">可选依赖</a></li><!----><!----><!----><li title="小结link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#summary-2">小结</a></li><!----><!----><!----><li title="附录：直接使用注入器link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#appendix-working-with-injectors-directly">附录：直接使用注入器</a></li><!----><!----><!----><li title="附录：为什么建议每个文件只放一个类link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/dependency-injection#appendix-one-class-per-file">附录：为什么建议每个文件只放一个类</a></li><!----></ul><!----></div></aio-toc></div><footer class="no-print"><aio-footer><div class="grid-fluid"><!----><div class="footer-block ng-star-inserted"><h3>资源</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/about" title="Angular 贡献者。">关于</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/resources" title="网络上的 Angular 工具、培训、博客等">资源列表</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/presskit" title="我们的联系方式、LOGO 和品牌">宣传资料</a></li><li class="ng-star-inserted"><a class="link" href="https://blog.angular.io/" title="Angular 官方博客">博客</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>帮助</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://stackoverflow.com/questions/tagged/angular" title="Stack Overflow: 这里的社区会回答你关于 Angular 的技术问题">Stack Overflow</a></li><li class="ng-star-inserted"><a class="link" href="https://gitter.im/angular/angular" title="和老鸟聊 Angular">Gitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular/issues" title="在 github 上报告问题和建议。">报告问题</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md" title="让我们彼此尊重">行为规范</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>社区</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/events" title="Post issues and suggestions on github.">活动</a></li><li class="ng-star-inserted"><a class="link" href="http://www.meetup.com/topics/angularjs/" title="参加聚会，向别的开发人员学习">聚会</a></li><li class="ng-star-inserted"><a class="link" href="https://twitter.com/angular" title="Twitter">Twitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular" title="GitHub">GitHub</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/contribute" title="向 Angular 做贡献">做贡献</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>多语言</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.io/" title="English Version.">English Version</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.jp/" title="日本語版">日本語版</a></li></ul></div></div><p> Powered by Google ©2010-2018. 代码授权方式：<a href="https://angular.cn/license" title="License text">MIT-style License</a>. 文档授权方式：<a href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>. </p><p><span class="text-caption">本网站由第三方公司洛阳永欣维护 &nbsp;<a href="http://www.miitbeian.gov.cn/">豫ICP备16019859号-1</a></span></p><p> 当前版本：6.0.1-build.180+sha.8494cf4. </p></aio-footer></footer></aio-shell>

  <noscript>
    &lt;div class="background-sky hero"&gt;&lt;/div&gt;
    &lt;section id="intro"&gt;
      &lt;div class="hero-logo"&gt;
        &lt;img src="assets/images/logos/angular/angular.svg" width="250" height="250"&gt;
      &lt;/div&gt;
      &lt;div class="homepage-container"&gt;
        &lt;div class="hero-headline"&gt;一套框架，多种平台&lt;br&gt;移动 &amp;amp; 桌面&lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
    &lt;h2 style="color: red; text-align: center; margin-top: -50px;"&gt;
      &lt;b&gt;&lt;i&gt;该网站需要浏览器支持 JavaScript &lt;/i&gt;&lt;/b&gt;
    &lt;/h2&gt;
  </noscript>


<script type="text/javascript" src="./Angular - Angular 依赖注入_files/runtime.e7e60529879ffb07e28e.js.下载"></script><script type="text/javascript" src="./Angular - Angular 依赖注入_files/polyfills.56dafdd128abda80a86c.js.下载"></script><script type="text/javascript" src="./Angular - Angular 依赖注入_files/main.e580488e21fdad9d749c.js.下载"></script><div class="cdk-visually-hidden" aria-atomic="true" aria-live="polite"></div></body></html>