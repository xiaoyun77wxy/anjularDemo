<!DOCTYPE html>
<!-- saved from url=(0036)https://angular.cn/guide/observables -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Angular - 可观察对象（Observable）</title>
  <!--<base href="/">--><base href=".">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/x-icon" href="https://angular.cn/favicon.ico">
  <link rel="icon" type="image/x-icon" href="https://angular.cn/assets/images/favicons/favicon.ico">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-194x194.png" sizes="194x194">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-16x16.png" sizes="16x16">
  <link rel="apple-touch-icon" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">

  <!-- NOTE: These need to be kept in sync with `ngsw-manifest.json`. -->
  <link href="./Angular - 可观察对象（Observable）_files/Material_Icons.css" rel="stylesheet">
  <link href="./Angular - 可观察对象（Observable）_files/Droid_Sans_Mono.css" rel="stylesheet">
  <link href="./Angular - 可观察对象（Observable）_files/font-awesome.min.css" rel="stylesheet">
  <!-- -->

  <link rel="manifest" href="https://angular.cn/pwa-manifest.json">
  <meta name="theme-color" content="#1976d2">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="translucent">

  <script async="" src="./Angular - 可观察对象（Observable）_files/analytics.js.下载"></script><script>
    // Dynamically, pre-emptively, add `noindex`, which will be removed when the doc is ready and valid
    tag = document.createElement('meta'); tag.name = 'robots'; tag.content = 'noindex';
    document.head.appendChild(tag);
  </script>

  <!-- Google Analytics -->
  <script>
  // Note this is a customised version of the GA tracking snippet
  // See the comments below for more info
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;
  ~i.name.indexOf('NG_DEFER_BOOTSTRAP')|| // only load library if not running e2e tests
  m.parentNode.insertBefore(a,m)
  })(window,document,'script','assets/js/analytics.js','ga');
  </script>
  <!-- End Google Analytics -->

  <script>
    // Report fatal errors to Google Analytics
    window.onerror = function() {
      ga('send', 'exception', {exDescription: formatError.apply(null, arguments), exFatal: true});

      function formatError(msg, url, line, col, e) {
        var stack;
        msg = msg.replace(/^Error: /, '');
        if (e) {
          stack = e.stack
              // strip the leading "Error: " from the stack trace
              .replace(/^Error: /, '')
              // strip the message from the stack trace, if present
              .replace(msg + '\n', '')
              // strip leading spaces
              .replace(/^ +/gm, '')
              // strip all leading "at " for each frame
              .replace(/^at /gm, '')
              // replace long urls with just the last segment: `filename:line:column`
              .replace(/(?: \(|@)http.+\/([^/)]+)\)?(?:\n|$)/gm, '@$1\n')
              // replace "eval code" in Edge
              .replace(/ *\(eval code(:\d+:\d+)\)(?:\n|$)/gm, '@???$1\n')
        } else {
          line = line || '?';
          col = col || '?';
          stack = url + ':' + line + ':' + col;
        }
        return (msg + '\n' + stack).substr(0, 150);
      }
    };
  </script>

  <script>
    if (window.document.documentMode) {
      // polyfill IE11 in a blocking way
      var s = document.createElement('script');
      s.src = 'generated/ie-polyfills.min.js';
      document.head.appendChild(s);
    } else if (!Object.assign) {
      // polyfill other non-evergreen browsers in a blocking way
      var polyfillUrl = "https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.find&flags=gated&unknown=polyfill";

      // send a blocking XHR to fetch the polyfill
      // then append it to the document so that its eval-ed synchronously
      // this is required because the method used for IE is not reliable with other non-evergreen browsers
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        var code = this.responseText;
        s.appendChild(document.createTextNode(code));
        document.head.appendChild(s);
      });
      xhr.open("GET", polyfillUrl, false);
      xhr.send();
    }
  </script>

  <script>
    //load CE polyfill
    //HACK: webpack's html plugin mangles the document.write calls if we don't trick it.

    //load the ES5 shim for browsers with native CE support
    function loadCustomElementsShim(){
      document.write('<scri' + 'pt src="assets/js/native-shim.js"><' + '/script>');
    }

    //load the full custom elements polyfill for browsers without support
    function loadCustomElementsPolyfill(){
      document.write('<scri' + 'pt src="assets/js/custom-elements.min.js"><' + '/script>');
    }
    //detect if we have native CE support
    if(!window.customElements){
      loadCustomElementsPolyfill();
    }
    else {
      loadCustomElementsShim();
    }
  </script><script src="./Angular - 可观察对象（Observable）_files/native-shim.js.下载"></script>

<link rel="stylesheet" href="./Angular - 可观察对象（Observable）_files/styles.613b7c8de73e274bd4c6.css"><style>@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}</style><style>.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:1}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]{box-shadow:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-flat-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-fab::-moz-focus-inner{border:0}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-fab[disabled]{box-shadow:none}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-mini-fab[disabled]{box-shadow:none}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}</style><style>.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}</style><style>.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}</style><script charset="utf-8" src="./Angular - 可观察对象（Observable）_files/live-example-live-example-module-ngfactory.76888e8a441aab262101.js.下载"></script><style>.mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}</style><script charset="utf-8" src="./Angular - 可观察对象（Observable）_files/code-code-example-module-ngfactory_code-code-tabs-module-ngfactory.6a5aabadc81dbdfa0f4e.js.下载"></script><script charset="utf-8" src="./Angular - 可观察对象（Observable）_files/code-code-tabs-module-ngfactory.8315a94f020cd25fe92d.js.下载"></script><script charset="utf-8" src="./Angular - 可观察对象（Observable）_files/code-code-example-module-ngfactory.d0ec50584c7428d1d6ed.js.下载"></script><script charset="utf-8" src="./Angular - 可观察对象（Observable）_files/12.50857b4475720140b255.js.下载"></script><style>.mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}</style><style>.mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}</style><style>.mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}</style></head>
<body>

  <aio-shell ng-version="6.0.0" class="mode-stable sidenav-open page-guide-observables folder-guide view-SideNav aio-notification-hide "><div id="top-of-page"></div><!----><mat-toolbar class="app-toolbar no-print mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary"><mat-toolbar-row class="notification-container mat-toolbar-row"><aio-notification actionurl="https://bit.ly/angular-survey-2018" buttontext="Go to survey" expirationdate="2018-01-19" icon="insert_comment" iconlabel="Survey" notificationid="survey-january-2018" class="ng-tns-c2-0 ng-trigger ng-trigger-hideAnimation" style="height: 0px;"><a class="content" href="https://bit.ly/angular-survey-2018"><mat-icon class="icon mat-icon" role="img" aria-hidden="true" aria-label="Survey"><svg fill="#FFFFFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon><span class="message"> Help Angular by taking a <b>1 minute survey</b>! </span><span class="action-button">Go to survey</span></a><button class="close-button mat-icon-button" aria-label="Close" mat-icon-button=""><span class="mat-button-wrapper"><mat-icon aria-label="Dismiss notification" class="mat-icon ng-tns-c2-0" role="img" svgicon="close" aria-hidden="true"><svg fill="#ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple mat-button-ripple-round" matripple=""></div><div class="mat-button-focus-overlay"></div></button></aio-notification></mat-toolbar-row><mat-toolbar-row class="mat-toolbar-row"><button class="hamburger mat-button" mat-button="" title="Docs menu"><span class="mat-button-wrapper"><mat-icon class="mat-icon" role="img" svgicon="menu" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple" matripple=""></div><div class="mat-button-focus-overlay"></div></button><a class="nav-link home" href="https://angular.cn/"><!----><img alt="Home" height="40" src="./Angular - 可观察对象（Observable）_files/logo-nav@2x.png" title="Home" width="150" class="ng-star-inserted"><!----></a><!----><aio-top-menu class="ng-star-inserted"><ul role="navigation"><!----><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/features" title="特性">特性</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/docs" title="文档">文档</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/resources" title="资源">资源</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/events" title="会议">会议</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://blog.angular.io/" title="博客">博客</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/translations/cn/home" title="关于中文版">关于中文版</a></li></ul></aio-top-menu><aio-search-box class="search-container"><input aria-label="search" placeholder="搜索" type="search"></aio-search-box></mat-toolbar-row></mat-toolbar><!----><mat-sidenav-container class="sidenav-container mat-drawer-container mat-sidenav-container mat-drawer-transition has-floating-toc" role="main"><!----><div class="mat-drawer-backdrop ng-star-inserted"></div><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><mat-sidenav class="sidenav mat-drawer mat-sidenav ng-tns-c6-1 ng-trigger ng-trigger-transform mat-drawer-side ng-star-inserted" tabindex="-1" style="transform: translate3d(0px, 0px, 0px); visibility: visible;"><!----><aio-nav-menu><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/guide/quickstart" title="Angular 破冰"> 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded" type="button" title="此《英雄指南》教程会带你用 TypeScript 一步步创建一个 Angular 应用。" aria-pressed="true"> 教程 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial" title="第一部分：《英雄指南》教程简介"> 1. 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt0" title="第二部分：创建应用的外壳"> 2. 应用的“外壳” </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt1" title="第三部分：构建一个简单的英雄编辑器"> 3. 英雄编辑器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt2" title="第四部分：构建一个主从结构的页面，用于展现英雄列表"> 4. 显示英雄列表 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt3" title="第五部分：把主从结构的页面重构成多个组件"> 5. 主从组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt4" title="第六部分：创建一个可复用的服务来管理英雄数据"> 6. 服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt5" title="第七部分：添加 Angular 路由器，并且学习在视图之间导航"> 7. 路由 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt6" title="第八部分：通过 HTTP 来获取并保存英雄数据"> 8. HTTP </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded selected" type="button" title="学习 Angular 的核心知识" aria-pressed="true"> 核心知识 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="Angular 应用的基本构造块。" aria-pressed="true"> 架构 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture" title="Angular 应用的基本构造块"> 架构概览 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-modules" title="关于模块。"> 模块（NgModule）简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-components" title="关于组件、模板和视图。"> 组件简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-services" title="关于服务与依赖注入。"> 服务与 DI 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-next-steps" title="学完基础知识之后……"> 后续步骤 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="使用数据绑定构建动态视图" aria-pressed="true"> 组件与模板 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/displaying-data" title="属性绑定可以帮助应用把数据显示在界面上"> 显示数据 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/template-syntax" title="学习如何写模板，以便借助数据绑定机制显示数据并响应事件。"> 模板语法 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/lifecycle-hooks" title="Angular 调用指令和组件的生命周期钩子函数，包括它的创建、变更和销毁时。"> 生命周期钩子 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/component-interaction" title="在不同的指令和组件之间共享信息"> 组件交互 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/component-styles" title="添加专属于某个组件的样式"> 组件样式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/elements" title="把组件转换成自定义元素。"> Angular 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/dynamic-component-loader" title="动态加载组件"> 动态组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/attribute-directives" title="属性型指令把行为添加到现有元素上。"> 属性型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/structural-directives" title="结构型指令可以操纵页面的布局"> 结构型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/pipes" title="管道可以在模板中转换显示的内容。"> 管道 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/animations" title="Angular 动画体系指南"> 动画 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="Angular 的表单" aria-pressed="true"> 表单 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/user-input" title="用户输入触发 DOM 事件。我们通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。"> 用户输入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/forms" title="表单可以创建集中、高效、引人注目的输入体验。Angular 表单可以协调一组数据绑定控件，跟踪变更，验证输入，并表达错误信息。"> 模板驱动表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/form-validation" title="验证用户的表单输入"> 表单验证 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/reactive-forms" title="使用 FormBuilder 、分组和数组创建响应式表单。"> 响应式表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/dynamic-form" title="使用FormGroup渲染动态表单"> 动态表单 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded selected" type="button" title="Observable 与 RxJS" aria-pressed="true"> Observable 与 RxJS <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded selected" href="https://angular.cn/guide/observables" title=""> 可观察对象(Observable) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/rx-library" title=""> RxJS 库 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables-in-angular" title=""> Angular 中的可观察对象 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/practical-observable-usage" title=""> 用法实战 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/comparing-observables" title=""> 与其它技术的比较 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/bootstrapping" title="在应用的根模块（AppModule）中告诉 Angular 如何构造并引导引用。"> 引导启动 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 中的模块" aria-pressed="false"> Angular 模块 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodules" title="使用 NgModule 让你的应用更高效"> NgModule 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-vs-jsmodule" title="JavaScript 模块和 NgModule 之间的差异"> JS 模块 vs NgModule </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/frequent-ngmodules" title="介绍最常用的 Angular 模块"> 常用模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/module-types" title="介绍特性模块的几种类型"> 特性模块的分类 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/entry-components" title="关于 Angular 中入口组件的一切"> 入口组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/feature-modules" title="创建特性模块，以组织你的代码"> 特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/providers" title="服务提供商与 Angular 模块"> 服务提供商 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/singleton-services" title="创建单例应用"> 单例应用 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lazy-loading-ngmodules" title="惰性加载模块，以提高应用的性能"> 惰性加载的特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/sharing-ngmodules" title="共享 Angular 模块让你的应用现代化。"> 共享 Angular 模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-api" title="理解 NgModule 的那些细节。"> NgModule API </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-faq" title="回答关于 NgModules 的常见问题。"> NgModule 常见问题 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="依赖注入：创建并注入各种服务。" aria-pressed="false"> 依赖注入 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-pattern" title="学习 Angular 依赖注入系统背后的依赖注入模式"> 依赖注入模式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection" title="Angular 的依赖注入系统能够为 Angular 创建的类创建并交付它们所依赖的服务。"> Angular 依赖注入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/hierarchical-dependency-injection" title="Angular 的多级注入体系会建立与组件平行的注入器树。"> 多级注入器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-in-action" title="依赖注入的使用技巧"> DI 实用技巧 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/http" title="通过 HTTP 协议与远程服务器对话。"> HttpClient </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/router" title="揭示如何通过 Angular 路由进行基本的屏幕导航。"> 路由与导航 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/testing" title="测试 Angular 应用的技巧与实践。"> 测试 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/cheatsheet" title="关于 Angular 常用编码技术的快速指南。"> 速查表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="把 Angular 用到你的实际工作中的一些技巧" aria-pressed="false"> 其它技术 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/i18n" title="把应用模板中的文本翻译成多种语言。"> 国际化 (i18n) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/language-service" title="使用 Angular 语言服务来为开发提速。"> 语言服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/security" title="Angular 应用开发中的安全技术。"> 安全 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="环境准备与部署" aria-pressed="false"> 环境准备与部署 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup" title="在你自己的机器上安装 Angular QuickStart 种子，以便更快、更高效的开发。"> 搭建本地开发环境 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup-systemjs-anatomy" title="基于 SystemJS 的本地开发环境内幕。"> 搭建方式剖析 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/browser-support" title="浏览器支持与 Polyfills 指南"> 浏览器支持 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/npm-packages" title="建议的 npm 包，以及如何指定包的依赖。"> npm 包 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/typescript-configuration" title="给 Angular 开发者的 TypeScript 配置。"> TypeScript 配置 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/aot-compiler" title="学习如何使用 AOT 预编译器。"> 预先（AOT）编译 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/deployment" title="学习如何部署你的 Angular 应用。"> 部署 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/custom-elements" title="把 Angular 组件用作自定义元素。"> 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的 Service Worker：控制应用的资源缓存。" aria-pressed="false"> Service Worker <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-intro" title="Angular 对 Service Worker 的实现提升了慢速或不稳定的网络连接下的用户体验。"> 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-getting-started" title="在 CLI 项目中启用 Service Worker，并在浏览器中查看效果。"> 快速起步 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-communications" title="那些能让你和 Angular 的 Service Worker 通讯的服务类。"> 与 Service Worker 通讯 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-devops" title="使用 Service Worker 运行应用、管理应用更新、调试以及杀掉正在运行的应用。"> 生产环境下的 Service Worker </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-config" title="配置 Service Worker 的缓存行为。"> Service Worker 配置 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的发布实践，更新计划以及与更新有关的资源。" aria-pressed="false"> 保持最新 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/updating" title="关于如何把 Angular 应用升级到最新版的信息。"> 更新你的项目 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/releases" title="Angular 的版本、发布、支持与弃用策略。"> Angular 的版本发布 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="把 AngularJS 应用增量式的升级到 Angular。" aria-pressed="false"> 从 AngularJS 升级 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/upgrade" title="把 AngularJS 应用增量式的升级到 Angular。"> 升级步骤 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ajs-quick-reference" title="学习如何把 AngularJS 的概念映射到 Angular 中。"> AngularJS 与 Angular 的概念对照 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/universal" title="使用 Angular Universal 在服务端渲染 HTML。">  服务端渲染 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/visual-studio-2015" title="在 Visual Studio 2015 中使用快速起步中的文件"> Visual Studio 2015 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/styleguide" title="写出 Angular 风格的程序"> 风格指南 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/glossary" title="Angular 中最重要的词汇的简要定义。"> 词汇表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/api" title="关于 Angular 中类和值的详细信息。"> API 参考手册 </a></div><!----></aio-nav-item></aio-nav-menu><div class="doc-version"><aio-select><div class="form-select-menu"><button class="form-select-button"><strong></strong><!---->stable (v6.0.0) </button><!----></div></aio-select></div></mat-sidenav><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><!----><mat-sidenav-content cdkscrollable="" class="mat-drawer-content mat-sidenav-content ng-star-inserted" style="margin-left: 262px; margin-right: 0px;"><section class="sidenav-content" role="content" id="guide-observables"><aio-mode-banner><!----></aio-mode-banner><aio-doc-viewer class=""><div style="opacity: 1; transition: all 200ms ease-in-out;">
<div class="content">
<h1 translation-result="" id="observables">可观察对象（Observable）<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#observables"><i class="material-icons">link</i></a></h1><aio-toc class="embedded"></aio-toc><h1 translation-origin="off" id="observables">Observables<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#observables"><i class="material-icons">link</i></a></h1>

<p translation-result="">可观察对象支持在应用中的发布者和订阅者之间传递消息。
在需要进行事件处理、异步编程和处理多个值的时候，可观察对象相对其它技术有着显著的优点。</p><p translation-origin="off">Observables provide support for passing messages between publishers and subscribers in your application. Observables offer significant benefits over other techniques for event handling, asynchronous programming, and handling multiple values.</p>

<p translation-result="">可观察对象是声明式的 —— 也就是说，虽然你定义了一个用于发布值的函数，但是在有消费者订阅它之前，这个函数并不会实际执行。
订阅之后，当这个函数执行完或取消订阅时，订阅者就会收到通知。</p><p translation-origin="off">Observables are declarative—that is, you define a function for publishing values, but it is not executed until a consumer subscribes to it. The subscribed consumer then receives notifications until the function completes, or until they unsubscribe.</p>

<p translation-result="">可观察对象可以发送多个任意类型的值 —— 字面量、消息、事件。无论这些值是同步发送的还是异步发送的，接收这些值的 API 都是一样的。
由于准备（setup）和清场（teardown）的逻辑都是由可观察对象自己处理的，因此你的应用代码只管订阅并消费这些值就可以了，做完之后，取消订阅。无论这个流是击键流、HTTP 响应流还是定时器，对这些值进行监听和停止监听的接口都是一样的。</p><p translation-origin="off">An observable can deliver multiple values of any type—literals, messages, or events, depending on the context. The API for receiving values is the same whether the values are delivered synchronously or asynchronously. Because setup and teardown logic are both handled by the observable, your application code only needs to worry about subscribing to consume values, and when done, unsubscribing. Whether the stream was keystrokes, an HTTP response, or an interval timer, the interface for listening to values and stopping listening is the same.</p>

<p translation-result="">由于这些优点，可观察对象在 Angular 中得到广泛使用，也同样建议应用开发者好好使用它。</p><p translation-origin="off">Because of these advantages, observables are used extensively within Angular, and are recommended for app development as well.</p>

<h2 translation-result="" id="basic-usage-and-terms">基本用法和词汇<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#basic-usage-and-terms"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="basic-usage-and-terms">Basic usage and terms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#basic-usage-and-terms"><i class="material-icons">link</i></a></h2>

<p translation-result="">作为发布者，你创建一个 <code>Observable</code> 的实例，其中定义了一个<em>订阅者（subscriber）</em>函数。
当有消费者调用 <code>subscribe()</code> 方法时，这个函数就会执行。
订阅者函数用于定义“如何获取或生成那些要发布的值或消息”。</p><p translation-origin="off">As a publisher, you create an <code>Observable</code> instance that defines a <em>subscriber</em> function. This is the function that is executed when a consumer calls the <code>subscribe()</code> method. The subscriber function defines how to obtain or generate values or messages to be published.</p>

<p translation-result="">要执行所创建的可观察对象，并开始从中接收通知，你就要调用它的 <code>subscribe()</code> 方法，并传入一个<em>观察者（observer）</em>。
这是一个 JavaScript 对象，它定义了你收到的这些消息的处理器（handler）。
<code>subscribe()</code> 调用会返回一个 <code>Subscription</code> 对象，该对象具有一个 <code>unsubscribe()</code> 方法。
当调用该方法时，你就会停止接收通知。</p><p translation-origin="off">To execute the observable you have created and begin receiving notifications, you call its <code>subscribe()</code> method, passing an <em>observer</em>.  This is a JavaScript object that defines the handlers for the notifications you receive. The <code>subscribe()</code> call returns a <code>Subscription</code> object that has an <code>unsubscribe()</code> method, which you call to stop receiving notifications.</p>

<p translation-result="">下面这个例子中示范了这种基本用法，它展示了如何使用可观察对象来对当前地理位置进行更新。</p><p translation-origin="off">Here's an example that demonstrates the basic usage model by showing how an observable could be used to provide geolocation updates.</p>

<code-example path="observables/src/geolocation.ts" title="Observe geolocation updates" ng-version="6.0.0"><div style="display: none">

// Create an Observable that will start listening to geolocation updates
// when <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> consumer subscribes.
const locations = new Observable((observer) =&gt; {
  // Get the next and error callbacks. These will be passed in when
  // the consumer subscribes.
  const {next, error} = observer;
  let watchId;

  // Simple geolocation API check provides values to publish
  if ('geolocation' in navigator) {
    watchId = navigator.geolocation.watchPosition(next, error);
  } else {
    error('Geolocation not available');
  }

  // When the consumer unsubscribes, clean up data ready for next subscription.
  return {unsubscribe() { navigator.geolocation.clearWatch(watchId); }};
});

// Call subscribe() to start listening for updates.
const locationsSubscription = locations.subscribe({
  next(position) { console.log('Current Position: ', position); },
  error(msg) { console.log('Error Getting <a href="https://angular.cn/api/common/Location" class="code-anchor">Location</a>: ', msg); }
});

// Stop listening for location after 10 seconds
setTimeout(() =&gt; { locationsSubscription.unsubscribe(); }, 10000);

</div><!----><header class="ng-star-inserted">Observe geolocation updates</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Observe geolocation updates">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="com">// Create an Observable that will start listening to geolocation updates</span></li><li class="L1"><span class="com">// when </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> consumer subscribes.</span></li><li class="L2"><span class="kwd">const</span><span class="pln"> locations </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">((</span><span class="pln">observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">  </span><span class="com">// Get the next and error callbacks. These will be passed in when</span></li><li class="L4"><span class="pln">  </span><span class="com">// the consumer subscribes.</span></li><li class="L5"><span class="pln">  </span><span class="kwd">const</span><span class="pln"> </span><span class="pun">{</span><span class="kwd">next</span><span class="pun">,</span><span class="pln"> error</span><span class="pun">}</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> observer</span><span class="pun">;</span></li><li class="L6"><span class="pln">  </span><span class="kwd">let</span><span class="pln"> watchId</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="com">// Simple geolocation API check provides values to publish</span></li><li class="L9"><span class="pln">  </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="str">'geolocation'</span><span class="pln"> </span><span class="kwd">in</span><span class="pln"> navigator</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">    watchId </span><span class="pun">=</span><span class="pln"> navigator</span><span class="pun">.</span><span class="pln">geolocation</span><span class="pun">.</span><span class="pln">watchPosition</span><span class="pun">(</span><span class="kwd">next</span><span class="pun">,</span><span class="pln"> error</span><span class="pun">);</span></li><li class="L1"><span class="pln">  </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">    error</span><span class="pun">(</span><span class="str">'Geolocation not available'</span><span class="pun">);</span></li><li class="L3"><span class="pln">  </span><span class="pun">}</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="pln">  </span><span class="com">// When the consumer unsubscribes, clean up data ready for next subscription.</span></li><li class="L6"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span><span class="pln">unsubscribe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> navigator</span><span class="pun">.</span><span class="pln">geolocation</span><span class="pun">.</span><span class="pln">clearWatch</span><span class="pun">(</span><span class="pln">watchId</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}};</span></li><li class="L7"><span class="pun">});</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="com">// Call subscribe() to start listening for updates.</span></li><li class="L0"><span class="kwd">const</span><span class="pln"> locationsSubscription </span><span class="pun">=</span><span class="pln"> locations</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L1"><span class="pln">  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">position</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Current Position: '</span><span class="pun">,</span><span class="pln"> position</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L2"><span class="pln">  error</span><span class="pun">(</span><span class="pln">msg</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Error Getting </span><a href="https://angular.cn/api/common/Location" class="code-anchor"><span class="str">Location</span></a><span class="str">: '</span><span class="pun">,</span><span class="pln"> msg</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L3"><span class="pun">});</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="com">// Stop listening for location after 10 seconds</span></li><li class="L6"><span class="pln">setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> locationsSubscription</span><span class="pun">.</span><span class="pln">unsubscribe</span><span class="pun">();</span><span class="pln"> </span><span class="pun">},</span><span class="pln"> </span><span class="lit">10000</span><span class="pun">);</span></li></ol></code>
    </pre></aio-code></code-example>
<h2 translation-result="" id="defining-observers">定义观察者<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#defining-observers"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="defining-observers">Defining observers<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#defining-observers"><i class="material-icons">link</i></a></h2>

<p translation-result="">用于接收可观察对象通知的处理器要实现 <code>Observer</code> 接口。这个对象定义了一些回调函数来处理可观察对象可能会发来的三种通知：</p><p translation-origin="off">A handler for receiving observable notifications implements the <code>Observer</code> interface. It is an object that defines callback methods to handle the three types of notifications that an observable can send:</p>

<table>
<thead>
<tr>
<th align="left"><t translation-result="">
通知类型
</t><t translation-origin="off">
Notification type
</t>
</th>
<th align="left"><t translation-result="">
说明
</t><t translation-origin="off">
Description
</t>
</th>
</tr>
</thead>
<tbody>
<tr>
<td align="left"><code>next</code></td>
<td align="left"><t translation-result="">
必要。用来处理每个送达值。在开始执行后可能执行零次或多次。
</t><t translation-origin="off">
Required. A handler for each delivered value. Called zero or more times after execution starts.
</t>
</td>
</tr>
<tr>
<td align="left"><code>error</code></td>
<td align="left"><t translation-result="">
 可选。用来处理错误通知。错误会中断这个可观察对象实例的执行过程。 
</t><t translation-origin="off">
Optional. A handler for an error notification. An error halts execution of the observable instance.
</t>
</td>
</tr>
<tr>
<td align="left"><code>complete</code></td>
<td align="left"><t translation-result="">
 可选。用来处理执行完毕（complete）通知。当执行完毕后，这些值就会继续传给下一个处理器。 
</t><t translation-origin="off">
Optional. A handler for the execution-complete notification. Delayed values can continue to be delivered to the next handler after execution is complete.
</t>
</td>
</tr>
</tbody>
</table>
<p translation-result="">观察者对象可以定义这三种处理器的任意组合。如果你不为某种通知类型提供处理器，这个观察者就会忽略相应类型的通知。</p><p translation-origin="off">An observer object can define any combination of these handlers. If you don't supply a handler for a notification type, the observer ignores notifications of that type.</p>

<h2 translation-result="" id="subscribing">订阅<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#subscribing"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="subscribing">Subscribing<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#subscribing"><i class="material-icons">link</i></a></h2>

<p translation-result="">只有当有人订阅 <code>Observable</code> 的实例时，它才会开始发布值。
订阅时要先调用该实例的 <code>subscribe()</code> 方法，并把一个观察者对象传给它，用来接收通知。</p><p translation-origin="off">An <code>Observable</code> instance begins publishing values only when someone subscribes to it. You subscribe by calling the <code>subscribe()</code> method of the instance, passing an observer object to receive the notifications.</p>

<div class="l-sub-section">
<p translation-result="">   为了展示订阅的原理，我们需要创建新的可观察对象。它有一个构造函数可以用来创建新实例，但是为了更简明，也可以使用 <code>Observable</code> 上定义的一些静态方法来创建一些常用的简单可观察对象：</p><p translation-origin="off">   In order to show how subscribing works, we need to create a new observable. There is a  constructor that you use to create new instances, but for illustration, we can use some static methods on the <code>Observable</code> class that create simple observables of frequently used types:</p>

<ul>
<li>
<p translation-result=""> <code>Observable.of(...items)</code> —— 返回一个 <code>Observable</code> 实例，它用同步的方式把参数中提供的这些值发送出来。</p><p translation-origin="off"><code>Observable.of(...items)</code>—Returns an <code>Observable</code> instance that synchronously delivers the values provided as arguments.</p>

</li>
<li>
<p translation-result=""> <code>Observable.from(iterable)</code> —— 把它的参数转换成一个 <code>Observable</code> 实例。
该方法通常用于把一个数组转换成一个（发送多个值的）可观察对象。</p><p translation-origin="off"><code>Observable.from(iterable)</code>—Converts its argument to an <code>Observable</code> instance. This method is commonly used to convert an array to an observable.</p>

</li>
</ul>
</div>
<p translation-result="">下面的例子会创建并订阅一个简单的可观察对象，它的观察者会把接收到的消息记录到控制台中：</p><p translation-origin="off">Here's an example of creating and subscribing to a simple observable, with an observer that logs the received message to the console:</p>

<code-example path="observables/src/subscribing.ts" region="observer" title="Subscribe using observer" ng-version="6.0.0"><div style="display: none">

// Create simple observable that emits three values
const myObservable = Observable.of(1, 2, 3);

// Create observer object
const myObserver = {
  next: x =&gt; console.log('Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> next value: ' + x),
  error: err =&gt; console.error('Observer got an error: ' + err),
  complete: () =&gt; console.log('Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> complete notification'),
};

// Execute with the observer object
myObservable.subscribe(myObserver);
// Logs:
// Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> next value: 1
// Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> next value: 2
// Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> next value: 3
// Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> complete notification


</div><!----><header class="ng-star-inserted">Subscribe using observer</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Subscribe using observer">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="com">// Create simple observable that emits three values</span></li><li class="L1"><span class="kwd">const</span><span class="pln"> myObservable </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">.</span><span class="pln">of</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">);</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="com">// Create observer object</span></li><li class="L4"><span class="kwd">const</span><span class="pln"> myObserver </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">  </span><span class="kwd">next</span><span class="pun">:</span><span class="pln"> x </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> next value: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> x</span><span class="pun">),</span></li><li class="L6"><span class="pln">  error</span><span class="pun">:</span><span class="pln"> err </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="str">'Observer got an error: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> err</span><span class="pun">),</span></li><li class="L7"><span class="pln">  complete</span><span class="pun">:</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> complete notification'</span><span class="pun">),</span></li><li class="L8"><span class="pun">};</span></li><li class="L9"><span class="pln">&nbsp;</span></li><li class="L0"><span class="com">// Execute with the observer object</span></li><li class="L1"><span class="pln">myObservable</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">(</span><span class="pln">myObserver</span><span class="pun">);</span></li><li class="L2"><span class="com">// Logs:</span></li><li class="L3"><span class="com">// Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> next value: 1</span></li><li class="L4"><span class="com">// Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> next value: 2</span></li><li class="L5"><span class="com">// Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> next value: 3</span></li><li class="L6"><span class="com">// Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> complete notification</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">另外，<code>subscribe()</code> 方法还可以接收定义在同一行中的回调函数，无论 <code>next</code>、<code>error</code> 还是 <code>complete</code> 处理器。比如，下面的 <code>subscribe()</code> 调用和前面指定预定义观察者的例子是等价的。</p><p translation-origin="off">Alternatively, the <code>subscribe()</code> method can accept callback function definitions in line, for <code>next</code>, <code>error</code>, and <code>complete</code> handlers. For example, the following <code>subscribe()</code> call is the same as the one that specifies the predefined observer:</p>

<code-example path="observables/src/subscribing.ts" region="sub_fn" title="Subscribe with positional arguments" ng-version="6.0.0"><div style="display: none">
myObservable.subscribe(
  x =&gt; console.log('Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> next value: ' + x),
  err =&gt; console.error('Observer got an error: ' + err),
  () =&gt; console.log('Observer got <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> complete notification')
);

</div><!----><header class="ng-star-inserted">Subscribe with positional arguments</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Subscribe with positional arguments">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">myObservable</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">(</span><span class="pln">
  x </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> next value: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> x</span><span class="pun">),</span><span class="pln">
  err </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">error</span><span class="pun">(</span><span class="str">'Observer got an error: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> err</span><span class="pun">),</span><span class="pln">
  </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Observer got </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="str">a</span></a><span class="str"> complete notification'</span><span class="pun">)</span><span class="pln">
</span><span class="pun">);</span></code>
    </pre></aio-code></code-example>
<p translation-result="">无论哪种情况，<code>next</code> 处理器都是必要的，而 <code>error</code> 和 <code>complete</code> 处理器是可选的。</p><p translation-origin="off">In either case, a <code>next</code> handler is required. The <code>error</code> and <code>complete</code> handlers are optional.</p>

<p translation-result="">注意，<code>next()</code> 函数可以接受消息字符串、事件对象、数字值或各种结构，具体类型取决于上下文。
为了更通用一点，我们把由可观察对象发布出来的数据统称为<em>流</em>。任何类型的值都可以表示为可观察对象，而这些值会被发布为一个流。</p><p translation-origin="off">Note that a <code>next()</code> function could receive, for instance, message strings, or event objects, numeric values, or structures, depending on context. As a general term, we refer to data published by an observable as a <em>stream</em>. Any type of value can be represented with an observable, and the values are published as a stream.</p>

<h2 translation-result="" id="creating-observables">创建可观察对象<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#creating-observables"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="creating-observables">Creating observables<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#creating-observables"><i class="material-icons">link</i></a></h2>

<p translation-result="">使用 <code>Observable</code> 构造函数可以创建任何类型的可观察流。
当执行可观察对象的 <code>subscribe()</code> 方法时，这个构造函数就会把它接收到的参数作为订阅函数来运行。
订阅函数会接收一个 <code>Observer</code> 对象，并把值发布给观察者的 <code>next()</code> 方法。</p><p translation-origin="off">Use the <code>Observable</code> constructor to create an observable stream of any type. The constructor takes as its argument the subscriber function to run when the observable’s <code>subscribe()</code> method executes. A subscriber function receives an <code>Observer</code> object, and can publish values to the observer's <code>next()</code> method.</p>

<p translation-result="">比如，要创建一个与前面的 <code>Observable.of(1, 2, 3)</code> 等价的可观察对象，你可以这样做：</p><p translation-origin="off">For example, to create an observable equivalent to the <code>Observable.of(1, 2, 3)</code> above, you could do something like this:</p>

<code-example path="observables/src/creating.ts" region="subscriber" title="Create observable with constructor" ng-version="6.0.0"><div style="display: none">

// This function runs when subscribe() is called
function sequenceSubscriber(observer) {
  // synchronously deliver 1, 2, and 3, then complete
  observer.next(1);
  observer.next(2);
  observer.next(3);
  observer.complete();

  // unsubscribe function doesn't need to do anything in this
  // because values are delivered synchronously
  return {unsubscribe() {}};
}

// Create <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new Observable that will deliver the above <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>
const <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> = new Observable(sequenceSubscriber);

// execute the Observable and print the result of each notification
sequence.subscribe({
  next(num) { console.log(num); },
  complete() { console.log('Finished <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>'); }
});

// Logs:
// 1
// 2
// 3
// Finished <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>


</div><!----><header class="ng-star-inserted">Create observable with constructor</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Create observable with constructor">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="com">// This function runs when subscribe() is called</span></li><li class="L1"><span class="kwd">function</span><span class="pln"> sequenceSubscriber</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">  </span><span class="com">// synchronously deliver 1, 2, and 3, then complete</span></li><li class="L3"><span class="pln">  observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="lit">1</span><span class="pun">);</span></li><li class="L4"><span class="pln">  observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="lit">2</span><span class="pun">);</span></li><li class="L5"><span class="pln">  observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="lit">3</span><span class="pun">);</span></li><li class="L6"><span class="pln">  observer</span><span class="pun">.</span><span class="pln">complete</span><span class="pun">();</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="com">// unsubscribe function doesn't need to do anything in this</span></li><li class="L9"><span class="pln">  </span><span class="com">// because values are delivered synchronously</span></li><li class="L0"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span><span class="pln">unsubscribe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{}};</span></li><li class="L1"><span class="pun">}</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="com">// Create </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new Observable that will deliver the above </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li><li class="L4"><span class="kwd">const</span><span class="pln"> </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="pln">sequence</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">(</span><span class="pln">sequenceSubscriber</span><span class="pun">);</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="com">// execute the Observable and print the result of each notification</span></li><li class="L7"><span class="pln">sequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L8"><span class="pln">  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L9"><span class="pln">  complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Finished </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str">'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L0"><span class="pun">});</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="com">// Logs:</span></li><li class="L3"><span class="com">// 1</span></li><li class="L4"><span class="com">// 2</span></li><li class="L5"><span class="com">// 3</span></li><li class="L6"><span class="com">// Finished </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">如果要略微加强这个例子，我们可以创建一个用来发布事件的可观察对象。在这个例子中，订阅函数是用内联方式定义的。</p><p translation-origin="off">To take this example a little further, we can create an observable that publishes events. In this example, the subscriber function is defined inline.</p>

<code-example path="observables/src/creating.ts" region="fromevent" title="Create with custom fromEvent function" ng-version="6.0.0"><div style="display: none">

function fromEvent(target, eventName) {
  return new Observable((observer) =&gt; {
    const handler = (e) =&gt; observer.next(e);

    // Add the event handler to the target
    target.addEventListener(eventName, handler);

    return () =&gt; {
      // Detach the event handler from the target
      target.removeEventListener(eventName, handler);
    };
  });
}


</div><!----><header class="ng-star-inserted">Create with custom fromEvent function</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Create with custom fromEvent function">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">function</span><span class="pln"> fromEvent</span><span class="pun">(</span><span class="pln">target</span><span class="pun">,</span><span class="pln"> eventName</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">((</span><span class="pln">observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> handler </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">e</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">e</span><span class="pun">);</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">    </span><span class="com">// Add the event handler to the target</span></li><li class="L5"><span class="pln">    target</span><span class="pun">.</span><span class="pln">addEventListener</span><span class="pun">(</span><span class="pln">eventName</span><span class="pun">,</span><span class="pln"> handler</span><span class="pun">);</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">      </span><span class="com">// Detach the event handler from the target</span></li><li class="L9"><span class="pln">      target</span><span class="pun">.</span><span class="pln">removeEventListener</span><span class="pun">(</span><span class="pln">eventName</span><span class="pun">,</span><span class="pln"> handler</span><span class="pun">);</span></li><li class="L0"><span class="pln">    </span><span class="pun">};</span></li><li class="L1"><span class="pln">  </span><span class="pun">});</span></li><li class="L2"><span class="pun">}</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">现在，你就可以使用这个函数来创建可发布 <code>keydown</code> 事件的可观察对象了：</p><p translation-origin="off">Now you can use this function to create an observable that publishes keydown events:</p>

<code-example path="observables/src/creating.ts" region="fromevent_use" title="Use custom fromEvent function" ng-version="6.0.0"><div style="display: none">

const ESC_KEY = 27;
const nameInput = document.getElementById('name') as HTMLInputElement;

const subscription = fromEvent(nameInput, 'keydown')
  .subscribe((e: KeyboardEvent) =&gt; {
    if (e.keyCode === ESC_KEY) {
      nameInput.value = '';
    }
  });


</div><!----><header class="ng-star-inserted">Use custom fromEvent function</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Use custom fromEvent function">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">const</span><span class="pln"> ESC_KEY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">27</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">const</span><span class="pln"> nameInput </span><span class="pun">=</span><span class="pln"> document</span><span class="pun">.</span><span class="pln">getElementById</span><span class="pun">(</span><span class="str">'name'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><span class="typ">HTMLInputElement</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">const</span><span class="pln"> subscription </span><span class="pun">=</span><span class="pln"> fromEvent</span><span class="pun">(</span><span class="pln">nameInput</span><span class="pun">,</span><span class="pln"> </span><span class="str">'keydown'</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">((</span><span class="pln">e</span><span class="pun">:</span><span class="pln"> </span><span class="typ">KeyboardEvent</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">e</span><span class="pun">.</span><span class="pln">keyCode </span><span class="pun">===</span><span class="pln"> ESC_KEY</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
      nameInput</span><span class="pun">.</span><span class="kwd">value</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
    </span><span class="pun">}</span><span class="pln">
  </span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<h2 translation-result="" id="multicasting">多播<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#multicasting"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="multicasting">Multicasting<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#multicasting"><i class="material-icons">link</i></a></h2>

<p translation-result="">典型的可观察对象会为每一个观察者创建一次新的、独立的执行。
当观察者进行订阅时，该可观察对象会连上一个事件处理器，并且向那个观察者发送一些值。当第二个观察者订阅时，这个可观察对象就会连上一个新的事件处理器，并独立执行一次，把这些值发送给第二个可观察对象。</p><p translation-origin="off">A typical observable creates a new, independent execution for each subscribed observer. When an observer subscribes, the observable wires up an event handler and delivers values to that observer. When a second observer subscribes, the observable then wires up a new event handler and delivers values to that second observer in a separate execution. </p>

<p translation-result="">有时候，不应该对每一个订阅者都独立执行一次，你可能会希望每次订阅都得到同一批值 —— 即使是那些你已经发送过的。这在某些情况下有用，比如用来发送 <code>document</code> 上的点击事件的可观察对象。</p><p translation-origin="off">Sometimes, instead of starting an independent execution for each subscriber, you want each subscription to get the same values—even if values have already started emitting. This might be the case with something like an observable of clicks on the document object.</p>

<p translation-result=""><em>多播</em>用来让可观察对象在一次执行中同时广播给多个订阅者。借助支持多播的可观察对象，你不必注册多个监听器，而是复用第一个（<code>next</code>）监听器，并且把值发送给各个订阅者。</p><p translation-origin="off"><em>Multicasting</em> is the practice of broadcasting to a list of multiple subscribers in a single execution. With a multicasting observable, you don't register multiple listeners on the document, but instead re-use the first listener and send values out to each subscriber.</p>

<p translation-result="">当创建可观察对象时，你要决定你希望别人怎么用这个对象以及是否对它的值进行多播。</p><p translation-origin="off">When creating an observable you should determine how you want that observable to be used and whether or not you want to multicast its values. </p>

<p translation-result="">来看一个从 1 到 3 进行计数的例子，它每发出一个数字就会等待 1 秒。</p><p translation-origin="off">Let’s look at an example that counts from 1 to 3, with a one-second delay after each number emitted.</p>

<code-example path="observables/src/multicasting.ts" region="delay_sequence" title="Create a delayed sequence" ng-version="6.0.0"><div style="display: none">

function sequenceSubscriber(observer) {
  const seq = [1, 2, 3];
  let timeoutId;

  // Will run through an array of numbers, emitting one value
  // per second until it gets to the end of the array.
  function doSequence(arr, idx) {
    timeoutId = setTimeout(() =&gt; {
      observer.next(arr[idx]);
      if (idx === arr.length - 1) {
        observer.complete();
      } else {
        doSequence(arr, idx++);
      }
    }, 1000);
  }

  doSequence(seq, 0);

  // Unsubscribe should clear the timeout to stop execution
  return {unsubscribe() {
    clearTimeout(timeoutId);
  }};
}

// Create <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new Observable that will deliver the above <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>
const <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> = new Observable(sequenceSubscriber);

sequence.subscribe({
  next(num) { console.log(num); },
  complete() { console.log('Finished <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>'); }
});

// Logs:
// (at 1 second): 1
// (at 2 seconds): 2
// (at 3 seconds): 3
// (at 3 seconds): Finished <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>


</div><!----><header class="ng-star-inserted">Create a delayed sequence</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Create a delayed sequence">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">function</span><span class="pln"> sequenceSubscriber</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  </span><span class="kwd">const</span><span class="pln"> seq </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">];</span></li><li class="L2"><span class="pln">  </span><span class="kwd">let</span><span class="pln"> timeoutId</span><span class="pun">;</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="pln">  </span><span class="com">// Will run through an array of numbers, emitting one value</span></li><li class="L5"><span class="pln">  </span><span class="com">// per second until it gets to the end of the array.</span></li><li class="L6"><span class="pln">  </span><span class="kwd">function</span><span class="pln"> doSequence</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">,</span><span class="pln"> idx</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">    timeoutId </span><span class="pun">=</span><span class="pln"> setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">      observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">idx</span><span class="pun">]);</span></li><li class="L9"><span class="pln">      </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">idx </span><span class="pun">===</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">        observer</span><span class="pun">.</span><span class="pln">complete</span><span class="pun">();</span></li><li class="L1"><span class="pln">      </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">        doSequence</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">,</span><span class="pln"> idx</span><span class="pun">++);</span></li><li class="L3"><span class="pln">      </span><span class="pun">}</span></li><li class="L4"><span class="pln">    </span><span class="pun">},</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">);</span></li><li class="L5"><span class="pln">  </span><span class="pun">}</span></li><li class="L6"><span class="pln">&nbsp;</span></li><li class="L7"><span class="pln">  doSequence</span><span class="pun">(</span><span class="pln">seq</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="pln">  </span><span class="com">// Unsubscribe should clear the timeout to stop execution</span></li><li class="L0"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span><span class="pln">unsubscribe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    clearTimeout</span><span class="pun">(</span><span class="pln">timeoutId</span><span class="pun">);</span></li><li class="L2"><span class="pln">  </span><span class="pun">}};</span></li><li class="L3"><span class="pun">}</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="com">// Create </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new Observable that will deliver the above </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li><li class="L6"><span class="kwd">const</span><span class="pln"> </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="pln">sequence</span></a><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">(</span><span class="pln">sequenceSubscriber</span><span class="pun">);</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">sequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L9"><span class="pln">  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="pln">num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L0"><span class="pln">  complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Finished </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str">'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L1"><span class="pun">});</span></li><li class="L2"><span class="pln">&nbsp;</span></li><li class="L3"><span class="com">// Logs:</span></li><li class="L4"><span class="com">// (at 1 second): 1</span></li><li class="L5"><span class="com">// (at 2 seconds): 2</span></li><li class="L6"><span class="com">// (at 3 seconds): 3</span></li><li class="L7"><span class="com">// (at 3 seconds): Finished </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，如果你订阅了两次，就会有两个独立的流，每个流都会每秒发出一个数字。代码如下：</p><p translation-origin="off">Notice that if you subscribe twice, there will be two separate streams, each emitting values every second. It looks something like this:</p>

<code-example path="observables/src/multicasting.ts" region="subscribe_twice" title="Two subscriptions" ng-version="6.0.0"><div style="display: none">

// Subscribe starts the clock, and will emit after 1 second
sequence.subscribe({
  next(num) { console.log('1st subscribe: ' + num); },
  complete() { console.log('1st <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished.'); }
});

// After 1/2 second, subscribe again.
setTimeout(() =&gt; {
  sequence.subscribe({
    next(num) { console.log('2nd subscribe: ' + num); },
    complete() { console.log('2nd <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished.'); }
  });
}, 500);

// Logs:
// (at 1 second): 1st subscribe: 1
// (at 1.5 seconds): 2nd subscribe: 1
// (at 2 seconds): 1st subscribe: 2
// (at 2.5 seconds): 2nd subscribe: 2
// (at 3 seconds): 1st subscribe: 3
// (at 3 seconds): 1st <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished
// (at 3.5 seconds): 2nd subscribe: 3
// (at 3.5 seconds): 2nd <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished


</div><!----><header class="ng-star-inserted">Two subscriptions</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Two subscriptions">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="com">// Subscribe starts the clock, and will emit after 1 second</span></li><li class="L1"><span class="pln">sequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L2"><span class="pln">  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'1st subscribe: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L3"><span class="pln">  complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'1st </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str"> finished.'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L4"><span class="pun">});</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="com">// After 1/2 second, subscribe again.</span></li><li class="L7"><span class="pln">setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">  sequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L9"><span class="pln">    </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'2nd subscribe: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L0"><span class="pln">    complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'2nd </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str"> finished.'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L1"><span class="pln">  </span><span class="pun">});</span></li><li class="L2"><span class="pun">},</span><span class="pln"> </span><span class="lit">500</span><span class="pun">);</span></li><li class="L3"><span class="pln">&nbsp;</span></li><li class="L4"><span class="com">// Logs:</span></li><li class="L5"><span class="com">// (at 1 second): 1st subscribe: 1</span></li><li class="L6"><span class="com">// (at 1.5 seconds): 2nd subscribe: 1</span></li><li class="L7"><span class="com">// (at 2 seconds): 1st subscribe: 2</span></li><li class="L8"><span class="com">// (at 2.5 seconds): 2nd subscribe: 2</span></li><li class="L9"><span class="com">// (at 3 seconds): 1st subscribe: 3</span></li><li class="L0"><span class="com">// (at 3 seconds): 1st </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a><span class="com"> finished</span></li><li class="L1"><span class="com">// (at 3.5 seconds): 2nd subscribe: 3</span></li><li class="L2"><span class="com">// (at 3.5 seconds): 2nd </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a><span class="com"> finished</span></li></ol></code>
    </pre></aio-code></code-example>
<p translation-result=""> 修改这个可观察对象以支持多播，代码如下：</p><p translation-origin="off"> Changing the observable to be multicasting could look something like this:</p>

<code-example path="observables/src/multicasting.ts" region="multicast_sequence" title="Create a multicast subscriber" ng-version="6.0.0"><div style="display: none">

function multicastSequenceSubscriber() {
  const seq = [1, 2, 3];
  // Keep track of each observer (one for every active subscription)
  const observers = [];
  // Still <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> single timeoutId because there will only ever be one
  // set of values being generated, multicasted to each subscriber
  let timeoutId;

  // Return the subscriber function (runs when subscribe()
  // function is invoked)
  return (observer) =&gt; {
    observers.push(observer);
    // When this is the first subscription, start the <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>
    if (observers.length === 1) {
      timeoutId = doSequence({
        next(val) {
          // Iterate through observers and notify all subscriptions
          observers.forEach(obs =&gt; obs.next(val));
        },
        complete() {
          // Notify all complete callbacks
          observers.forEach(obs =&gt; obs.complete());
        }
      }, seq, 0);
    }

    return {
      unsubscribe() {
        // Remove from the observers array so it's no longer notified
        observers.splice(observers.indexOf(observer), 1);
        // If there's no more listeners, do cleanup
        if (observers.length === 0) {
          clearTimeout(timeoutId);
        }
      }
    };
  };
}

// Run through an array of numbers, emitting one value
// per second until it gets to the end of the array.
function doSequence(observer, arr, idx) {
  return setTimeout(() =&gt; {
    observer.next(arr[idx]);
    if (idx === arr.length - 1) {
      observer.complete();
    } else {
      doSequence(observer, arr, idx++);
    }
  }, 1000);
}

// Create <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new Observable that will deliver the above <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a>
const multicastSequence = new Observable(multicastSequenceSubscriber);

// Subscribe starts the clock, and begins to emit after 1 second
multicastSequence.subscribe({
  next(num) { console.log('1st subscribe: ' + num); },
  complete() { console.log('1st <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished.'); }
});

// After 1 1/2 seconds, subscribe again (should "miss" the first value).
setTimeout(() =&gt; {
  multicastSequence.subscribe({
    next(num) { console.log('2nd subscribe: ' + num); },
    complete() { console.log('2nd <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished.'); }
  });
}, 1500);

// Logs:
// (at 1 second): 1st subscribe: 1
// (at 2 seconds): 1st subscribe: 2
// (at 2 seconds): 2nd subscribe: 2
// (at 3 seconds): 1st subscribe: 3
// (at 3 seconds): 1st <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished
// (at 3 seconds): 2nd subscribe: 3
// (at 3 seconds): 2nd <a href="https://angular.cn/api/animations/sequence" class="code-anchor">sequence</a> finished


</div><!----><header class="ng-star-inserted">Create a multicast subscriber</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from Create a multicast subscriber">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="kwd">function</span><span class="pln"> multicastSequenceSubscriber</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">  </span><span class="kwd">const</span><span class="pln"> seq </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="lit">3</span><span class="pun">];</span></li><li class="L2"><span class="pln">  </span><span class="com">// Keep track of each observer (one for every active subscription)</span></li><li class="L3"><span class="pln">  </span><span class="kwd">const</span><span class="pln"> observers </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span></li><li class="L4"><span class="pln">  </span><span class="com">// Still </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> single timeoutId because there will only ever be one</span></li><li class="L5"><span class="pln">  </span><span class="com">// set of values being generated, multicasted to each subscriber</span></li><li class="L6"><span class="pln">  </span><span class="kwd">let</span><span class="pln"> timeoutId</span><span class="pun">;</span></li><li class="L7"><span class="pln">&nbsp;</span></li><li class="L8"><span class="pln">  </span><span class="com">// Return the subscriber function (runs when subscribe()</span></li><li class="L9"><span class="pln">  </span><span class="com">// function is invoked)</span></li><li class="L0"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln">observer</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L1"><span class="pln">    observers</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">);</span></li><li class="L2"><span class="pln">    </span><span class="com">// When this is the first subscription, start the </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li><li class="L3"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">observers</span><span class="pun">.</span><span class="pln">length </span><span class="pun">===</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L4"><span class="pln">      timeoutId </span><span class="pun">=</span><span class="pln"> doSequence</span><span class="pun">({</span></li><li class="L5"><span class="pln">        </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">val</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L6"><span class="pln">          </span><span class="com">// Iterate through observers and notify all subscriptions</span></li><li class="L7"><span class="pln">          observers</span><span class="pun">.</span><span class="pln">forEach</span><span class="pun">(</span><span class="pln">obs </span><span class="pun">=&gt;</span><span class="pln"> obs</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">val</span><span class="pun">));</span></li><li class="L8"><span class="pln">        </span><span class="pun">},</span></li><li class="L9"><span class="pln">        complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L0"><span class="pln">          </span><span class="com">// Notify all complete callbacks</span></li><li class="L1"><span class="pln">          observers</span><span class="pun">.</span><span class="pln">forEach</span><span class="pun">(</span><span class="pln">obs </span><span class="pun">=&gt;</span><span class="pln"> obs</span><span class="pun">.</span><span class="pln">complete</span><span class="pun">());</span></li><li class="L2"><span class="pln">        </span><span class="pun">}</span></li><li class="L3"><span class="pln">      </span><span class="pun">},</span><span class="pln"> seq</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">);</span></li><li class="L4"><span class="pln">    </span><span class="pun">}</span></li><li class="L5"><span class="pln">&nbsp;</span></li><li class="L6"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">      unsubscribe</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></li><li class="L8"><span class="pln">        </span><span class="com">// Remove from the observers array so it's no longer notified</span></li><li class="L9"><span class="pln">        observers</span><span class="pun">.</span><span class="pln">splice</span><span class="pun">(</span><span class="pln">observers</span><span class="pun">.</span><span class="pln">indexOf</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">),</span><span class="pln"> </span><span class="lit">1</span><span class="pun">);</span></li><li class="L0"><span class="pln">        </span><span class="com">// If there's no more listeners, do cleanup</span></li><li class="L1"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">observers</span><span class="pun">.</span><span class="pln">length </span><span class="pun">===</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">          clearTimeout</span><span class="pun">(</span><span class="pln">timeoutId</span><span class="pun">);</span></li><li class="L3"><span class="pln">        </span><span class="pun">}</span></li><li class="L4"><span class="pln">      </span><span class="pun">}</span></li><li class="L5"><span class="pln">    </span><span class="pun">};</span></li><li class="L6"><span class="pln">  </span><span class="pun">};</span></li><li class="L7"><span class="pun">}</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="com">// Run through an array of numbers, emitting one value</span></li><li class="L0"><span class="com">// per second until it gets to the end of the array.</span></li><li class="L1"><span class="kwd">function</span><span class="pln"> doSequence</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">,</span><span class="pln"> arr</span><span class="pun">,</span><span class="pln"> idx</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L2"><span class="pln">  </span><span class="kwd">return</span><span class="pln"> setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">    observer</span><span class="pun">.</span><span class="kwd">next</span><span class="pun">(</span><span class="pln">arr</span><span class="pun">[</span><span class="pln">idx</span><span class="pun">]);</span></li><li class="L4"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">idx </span><span class="pun">===</span><span class="pln"> arr</span><span class="pun">.</span><span class="pln">length </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></li><li class="L5"><span class="pln">      observer</span><span class="pun">.</span><span class="pln">complete</span><span class="pun">();</span></li><li class="L6"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></li><li class="L7"><span class="pln">      doSequence</span><span class="pun">(</span><span class="pln">observer</span><span class="pun">,</span><span class="pln"> arr</span><span class="pun">,</span><span class="pln"> idx</span><span class="pun">++);</span></li><li class="L8"><span class="pln">    </span><span class="pun">}</span></li><li class="L9"><span class="pln">  </span><span class="pun">},</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">);</span></li><li class="L0"><span class="pun">}</span></li><li class="L1"><span class="pln">&nbsp;</span></li><li class="L2"><span class="com">// Create </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new Observable that will deliver the above </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a></li><li class="L3"><span class="kwd">const</span><span class="pln"> multicastSequence </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">(</span><span class="pln">multicastSequenceSubscriber</span><span class="pun">);</span></li><li class="L4"><span class="pln">&nbsp;</span></li><li class="L5"><span class="com">// Subscribe starts the clock, and begins to emit after 1 second</span></li><li class="L6"><span class="pln">multicastSequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L7"><span class="pln">  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'1st subscribe: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L8"><span class="pln">  complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'1st </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str"> finished.'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L9"><span class="pun">});</span></li><li class="L0"><span class="pln">&nbsp;</span></li><li class="L1"><span class="com">// After 1 1/2 seconds, subscribe again (should "miss" the first value).</span></li><li class="L2"><span class="pln">setTimeout</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></li><li class="L3"><span class="pln">  multicastSequence</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span></li><li class="L4"><span class="pln">    </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'2nd subscribe: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> num</span><span class="pun">);</span><span class="pln"> </span><span class="pun">},</span></li><li class="L5"><span class="pln">    complete</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'2nd </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="str">sequence</span></a><span class="str"> finished.'</span><span class="pun">);</span><span class="pln"> </span><span class="pun">}</span></li><li class="L6"><span class="pln">  </span><span class="pun">});</span></li><li class="L7"><span class="pun">},</span><span class="pln"> </span><span class="lit">1500</span><span class="pun">);</span></li><li class="L8"><span class="pln">&nbsp;</span></li><li class="L9"><span class="com">// Logs:</span></li><li class="L0"><span class="com">// (at 1 second): 1st subscribe: 1</span></li><li class="L1"><span class="com">// (at 2 seconds): 1st subscribe: 2</span></li><li class="L2"><span class="com">// (at 2 seconds): 2nd subscribe: 2</span></li><li class="L3"><span class="com">// (at 3 seconds): 1st subscribe: 3</span></li><li class="L4"><span class="com">// (at 3 seconds): 1st </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a><span class="com"> finished</span></li><li class="L5"><span class="com">// (at 3 seconds): 2nd subscribe: 3</span></li><li class="L6"><span class="com">// (at 3 seconds): 2nd </span><a href="https://angular.cn/api/animations/sequence" class="code-anchor"><span class="com">sequence</span></a><span class="com"> finished</span></li></ol></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">   虽然支持多播的可观察对象需要做更多的准备工作，但对某些应用来说，这非常有用。稍后我们会介绍一些简化多播的工具，它们让你能接收任何可观察对象，并把它变成支持多播的。</p><p translation-origin="off">   Multicasting observables take a bit more setup, but they can be useful for certain applications. Later we will look at tools that simplify the process of multicasting, allowing you to take any observable and make it multicasting.</p>

</div>
<h2 translation-result="" id="error-handling-2">错误处理<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#error-handling-2"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="error-handling">Error handling<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/observables#error-handling"><i class="material-icons">link</i></a></h2>

<p translation-result="">由于可观察对象会异步生成值，所以用 <code>try/catch</code> 是无法捕获错误的。你应该在观察者中指定一个 <code>error</code> 回调来处理错误。发生错误时还会导致可观察对象清理现有的订阅，并且停止生成值。可观察对象可以生成值（调用 <code>next</code> 回调），也可以调用 <code>complete</code> 或 <code>error</code> 回调来主动结束。</p><p translation-origin="off">Because observables produce values asynchronously, try/catch will not effectively catch errors. Instead, you handle errors by specifying an <code>error</code> callback on the observer. Producing an error also causes the observable to clean up subscriptions and stop producing values. An observable can  either produce values (calling the <code>next</code> callback), or it can complete, calling either the <code>complete</code> or <code>error</code> callback.</p>

<code-example ng-version="6.0.0"><div style="display: none">
myObservable.subscribe({
  next(num) { console.log('Next num: ' + num)},
  error(err) { console.log('Received an errror: ' + err)}
});
</div><!----><aio-code><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">myObservable</span><span class="pun">.</span><span class="pln">subscribe</span><span class="pun">({</span><span class="pln">
  </span><span class="kwd">next</span><span class="pun">(</span><span class="pln">num</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Next num: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> num</span><span class="pun">)},</span><span class="pln">
  error</span><span class="pun">(</span><span class="pln">err</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> console</span><span class="pun">.</span><span class="pln">log</span><span class="pun">(</span><span class="str">'Received an errror: '</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> err</span><span class="pun">)}</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在稍后的小节中会对错误处理（特别是从错误中的恢复）做更详细的讲解。</p><p translation-origin="off">Error handling (and specifically recovering from an error) is covered in more detail in a later section.</p>


</div>
<!-- links to this doc:
 - guide/architecture-next-steps
-->
<!-- links from this doc:
 - api/animations/sequence
 - api/common/Location
 - api/router/RouterLinkWithHref
 - guide/observables#basic-usage-and-terms
 - guide/observables#creating-observables
 - guide/observables#defining-observers
 - guide/observables#error-handling
 - guide/observables#error-handling-2
 - guide/observables#multicasting
 - guide/observables#observables
 - guide/observables#subscribing
--></div></aio-doc-viewer><aio-dt><!----></aio-dt></section></mat-sidenav-content></mat-sidenav-container><!----><div class="toc-container no-print ng-star-inserted" style="max-height: 3682px;"><aio-toc><!----><div class="toc-inner no-print collapsed ng-star-inserted"><!----><!----><ul class="toc-list"><!----><!----><!----><li title="可观察对象（Observable）link" class="h1 active ng-star-inserted"><a href="https://angular.cn/guide/observables#observables">可观察对象（Observable）</a></li><!----><!----><!----><li title="基本用法和词汇link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#basic-usage-and-terms">基本用法和词汇</a></li><!----><!----><!----><li title="定义观察者link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#defining-observers">定义观察者</a></li><!----><!----><!----><li title="订阅link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#subscribing">订阅</a></li><!----><!----><!----><li title="创建可观察对象link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#creating-observables">创建可观察对象</a></li><!----><!----><!----><li title="多播link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#multicasting">多播</a></li><!----><!----><!----><li title="错误处理link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/observables#error-handling-2">错误处理</a></li><!----></ul><!----></div></aio-toc></div><footer class="no-print"><aio-footer><div class="grid-fluid"><!----><div class="footer-block ng-star-inserted"><h3>资源</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/about" title="Angular 贡献者。">关于</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/resources" title="网络上的 Angular 工具、培训、博客等">资源列表</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/presskit" title="我们的联系方式、LOGO 和品牌">宣传资料</a></li><li class="ng-star-inserted"><a class="link" href="https://blog.angular.io/" title="Angular 官方博客">博客</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>帮助</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://stackoverflow.com/questions/tagged/angular" title="Stack Overflow: 这里的社区会回答你关于 Angular 的技术问题">Stack Overflow</a></li><li class="ng-star-inserted"><a class="link" href="https://gitter.im/angular/angular" title="和老鸟聊 Angular">Gitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular/issues" title="在 github 上报告问题和建议。">报告问题</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md" title="让我们彼此尊重">行为规范</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>社区</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/events" title="Post issues and suggestions on github.">活动</a></li><li class="ng-star-inserted"><a class="link" href="http://www.meetup.com/topics/angularjs/" title="参加聚会，向别的开发人员学习">聚会</a></li><li class="ng-star-inserted"><a class="link" href="https://twitter.com/angular" title="Twitter">Twitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular" title="GitHub">GitHub</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/contribute" title="向 Angular 做贡献">做贡献</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>多语言</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.io/" title="English Version.">English Version</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.jp/" title="日本語版">日本語版</a></li></ul></div></div><p> Powered by Google ©2010-2018. 代码授权方式：<a href="https://angular.cn/license" title="License text">MIT-style License</a>. 文档授权方式：<a href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>. </p><p><span class="text-caption">本网站由第三方公司洛阳永欣维护 &nbsp;<a href="http://www.miitbeian.gov.cn/">豫ICP备16019859号-1</a></span></p><p> 当前版本：6.0.1-build.180+sha.8494cf4. </p></aio-footer></footer></aio-shell>

  <noscript>
    &lt;div class="background-sky hero"&gt;&lt;/div&gt;
    &lt;section id="intro"&gt;
      &lt;div class="hero-logo"&gt;
        &lt;img src="assets/images/logos/angular/angular.svg" width="250" height="250"&gt;
      &lt;/div&gt;
      &lt;div class="homepage-container"&gt;
        &lt;div class="hero-headline"&gt;一套框架，多种平台&lt;br&gt;移动 &amp;amp; 桌面&lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
    &lt;h2 style="color: red; text-align: center; margin-top: -50px;"&gt;
      &lt;b&gt;&lt;i&gt;该网站需要浏览器支持 JavaScript &lt;/i&gt;&lt;/b&gt;
    &lt;/h2&gt;
  </noscript>


<script type="text/javascript" src="./Angular - 可观察对象（Observable）_files/runtime.e7e60529879ffb07e28e.js.下载"></script><script type="text/javascript" src="./Angular - 可观察对象（Observable）_files/polyfills.56dafdd128abda80a86c.js.下载"></script><script type="text/javascript" src="./Angular - 可观察对象（Observable）_files/main.e580488e21fdad9d749c.js.下载"></script><div class="cdk-visually-hidden" aria-atomic="true" aria-live="polite"></div></body></html>