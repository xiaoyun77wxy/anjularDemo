<!DOCTYPE html>
<!-- saved from url=(0039)https://angular.cn/guide/reactive-forms -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  
  <title>Angular - 响应式表单</title>
  <!--<base href="/">--><base href=".">

  <meta name="viewport" content="width=device-width, initial-scale=1">

  <link rel="icon" type="image/x-icon" href="https://angular.cn/favicon.ico">
  <link rel="icon" type="image/x-icon" href="https://angular.cn/assets/images/favicons/favicon.ico">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-32x32.png" sizes="32x32">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-194x194.png" sizes="194x194">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-96x96.png" sizes="96x96">
  <link rel="icon" type="image/png" href="https://angular.cn/assets/images/favicons/favicon-16x16.png" sizes="16x16">
  <link rel="apple-touch-icon" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">
  <link rel="apple-touch-icon-precomposed" sizes="144x144" href="https://angular.cn/assets/images/favicons/apple-touch-icon-144x144.png">

  <!-- NOTE: These need to be kept in sync with `ngsw-manifest.json`. -->
  <link href="./Angular - 响应式表单_files/Material_Icons.css" rel="stylesheet">
  <link href="./Angular - 响应式表单_files/Droid_Sans_Mono.css" rel="stylesheet">
  <link href="./Angular - 响应式表单_files/font-awesome.min.css" rel="stylesheet">
  <!-- -->

  <link rel="manifest" href="https://angular.cn/pwa-manifest.json">
  <meta name="theme-color" content="#1976d2">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="translucent">

  <script async="" src="./Angular - 响应式表单_files/analytics.js.下载"></script><script>
    // Dynamically, pre-emptively, add `noindex`, which will be removed when the doc is ready and valid
    tag = document.createElement('meta'); tag.name = 'robots'; tag.content = 'noindex';
    document.head.appendChild(tag);
  </script>

  <!-- Google Analytics -->
  <script>
  // Note this is a customised version of the GA tracking snippet
  // See the comments below for more info
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;
  ~i.name.indexOf('NG_DEFER_BOOTSTRAP')|| // only load library if not running e2e tests
  m.parentNode.insertBefore(a,m)
  })(window,document,'script','assets/js/analytics.js','ga');
  </script>
  <!-- End Google Analytics -->

  <script>
    // Report fatal errors to Google Analytics
    window.onerror = function() {
      ga('send', 'exception', {exDescription: formatError.apply(null, arguments), exFatal: true});

      function formatError(msg, url, line, col, e) {
        var stack;
        msg = msg.replace(/^Error: /, '');
        if (e) {
          stack = e.stack
              // strip the leading "Error: " from the stack trace
              .replace(/^Error: /, '')
              // strip the message from the stack trace, if present
              .replace(msg + '\n', '')
              // strip leading spaces
              .replace(/^ +/gm, '')
              // strip all leading "at " for each frame
              .replace(/^at /gm, '')
              // replace long urls with just the last segment: `filename:line:column`
              .replace(/(?: \(|@)http.+\/([^/)]+)\)?(?:\n|$)/gm, '@$1\n')
              // replace "eval code" in Edge
              .replace(/ *\(eval code(:\d+:\d+)\)(?:\n|$)/gm, '@???$1\n')
        } else {
          line = line || '?';
          col = col || '?';
          stack = url + ':' + line + ':' + col;
        }
        return (msg + '\n' + stack).substr(0, 150);
      }
    };
  </script>

  <script>
    if (window.document.documentMode) {
      // polyfill IE11 in a blocking way
      var s = document.createElement('script');
      s.src = 'generated/ie-polyfills.min.js';
      document.head.appendChild(s);
    } else if (!Object.assign) {
      // polyfill other non-evergreen browsers in a blocking way
      var polyfillUrl = "https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.find&flags=gated&unknown=polyfill";

      // send a blocking XHR to fetch the polyfill
      // then append it to the document so that its eval-ed synchronously
      // this is required because the method used for IE is not reliable with other non-evergreen browsers
      var xhr = new XMLHttpRequest();
      xhr.addEventListener("load", function() {
        var s = document.createElement('script');
        s.type = 'text/javascript';
        var code = this.responseText;
        s.appendChild(document.createTextNode(code));
        document.head.appendChild(s);
      });
      xhr.open("GET", polyfillUrl, false);
      xhr.send();
    }
  </script>

  <script>
    //load CE polyfill
    //HACK: webpack's html plugin mangles the document.write calls if we don't trick it.

    //load the ES5 shim for browsers with native CE support
    function loadCustomElementsShim(){
      document.write('<scri' + 'pt src="assets/js/native-shim.js"><' + '/script>');
    }

    //load the full custom elements polyfill for browsers without support
    function loadCustomElementsPolyfill(){
      document.write('<scri' + 'pt src="assets/js/custom-elements.min.js"><' + '/script>');
    }
    //detect if we have native CE support
    if(!window.customElements){
      loadCustomElementsPolyfill();
    }
    else {
      loadCustomElementsShim();
    }
  </script><script src="./Angular - 响应式表单_files/native-shim.js.下载"></script>

<link rel="stylesheet" href="./Angular - 响应式表单_files/styles.613b7c8de73e274bd4c6.css"><style>@media screen and (-ms-high-contrast:active){.mat-toolbar{outline:solid 1px}}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%}.mat-toolbar-multiple-rows{min-height:64px}.mat-toolbar-row,.mat-toolbar-single-row{height:64px}@media (max-width:599px){.mat-toolbar-multiple-rows{min-height:56px}.mat-toolbar-row,.mat-toolbar-single-row{height:56px}}</style><style>.mat-button,.mat-flat-button,.mat-icon-button,.mat-stroked-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible}.mat-button[disabled],.mat-flat-button[disabled],.mat-icon-button[disabled],.mat-stroked-button[disabled]{cursor:default}.mat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-button.cdk-program-focused .mat-button-focus-overlay,.mat-flat-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-flat-button.cdk-program-focused .mat-button-focus-overlay,.mat-icon-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-icon-button.cdk-program-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-stroked-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-button::-moz-focus-inner,.mat-flat-button::-moz-focus-inner,.mat-icon-button::-moz-focus-inner,.mat-stroked-button::-moz-focus-inner{border:0}.mat-button .mat-button-focus-overlay,.mat-icon-button .mat-button-focus-overlay{transition:none;opacity:0}.mat-button:hover .mat-button-focus-overlay,.mat-stroked-button:hover .mat-button-focus-overlay{opacity:1}.mat-raised-button{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1)}.mat-raised-button[disabled]{cursor:default}.mat-raised-button.cdk-keyboard-focused .mat-button-focus-overlay,.mat-raised-button.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-raised-button::-moz-focus-inner{border:0}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]{box-shadow:none}.mat-stroked-button{border:1px solid currentColor;padding:0 15px;line-height:34px}.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-flat-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:56px;height:56px;padding:0;flex-shrink:0}.mat-fab[disabled]{cursor:default}.mat-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-fab::-moz-focus-inner{border:0}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-fab[disabled]{box-shadow:none}.mat-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab .mat-button-wrapper{padding:16px 0;display:inline-block;line-height:24px}.mat-mini-fab{box-sizing:border-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:pointer;outline:0;border:none;-webkit-tap-highlight-color:transparent;display:inline-block;white-space:nowrap;text-decoration:none;vertical-align:baseline;text-align:center;margin:0;min-width:88px;line-height:36px;padding:0 16px;border-radius:2px;overflow:visible;transform:translate3d(0,0,0);transition:background .4s cubic-bezier(.25,.8,.25,1),box-shadow 280ms cubic-bezier(.4,0,.2,1);min-width:0;border-radius:50%;width:40px;height:40px;padding:0;flex-shrink:0}.mat-mini-fab[disabled]{cursor:default}.mat-mini-fab.cdk-keyboard-focused .mat-button-focus-overlay,.mat-mini-fab.cdk-program-focused .mat-button-focus-overlay{opacity:1}.mat-mini-fab::-moz-focus-inner{border:0}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-mini-fab[disabled]{box-shadow:none}.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-mini-fab .mat-button-wrapper{padding:8px 0;display:inline-block;line-height:24px}.mat-icon-button{padding:0;min-width:0;width:40px;height:40px;flex-shrink:0;line-height:40px;border-radius:50%}.mat-icon-button .mat-icon,.mat-icon-button i{line-height:24px}.mat-button-focus-overlay,.mat-button-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-button-focus-overlay{background-color:rgba(0,0,0,.12);border-radius:inherit;opacity:0;transition:opacity .2s cubic-bezier(.35,0,.25,1),background-color .2s cubic-bezier(.35,0,.25,1)}@media screen and (-ms-high-contrast:active){.mat-button-focus-overlay{background-color:rgba(255,255,255,.5)}}.mat-button-ripple-round{border-radius:50%;z-index:1}.mat-button .mat-button-wrapper>*,.mat-fab .mat-button-wrapper>*,.mat-flat-button .mat-button-wrapper>*,.mat-icon-button .mat-button-wrapper>*,.mat-mini-fab .mat-button-wrapper>*,.mat-raised-button .mat-button-wrapper>*,.mat-stroked-button .mat-button-wrapper>*{vertical-align:middle}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button{display:block;font-size:inherit;width:2.5em;height:2.5em}@media screen and (-ms-high-contrast:active){.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button{outline:solid 1px}}</style><style>.mat-icon{background-repeat:no-repeat;display:inline-block;fill:currentColor;height:24px;width:24px}.mat-icon.mat-icon-inline{font-size:inherit;height:inherit;line-height:inherit;width:inherit}[dir=rtl] .mat-icon-rtl-mirror{transform:scale(-1,1)}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon{display:block}.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field:not(.mat-form-field-appearance-legacy) .mat-form-field-suffix .mat-icon-button .mat-icon{margin:auto}</style><style>.mat-drawer-container{position:relative;z-index:1;box-sizing:border-box;-webkit-overflow-scrolling:touch;display:block;overflow:hidden}.mat-drawer-container[fullscreen]{top:0;left:0;right:0;bottom:0;position:absolute}.mat-drawer-container[fullscreen].mat-drawer-opened{overflow:hidden}.mat-drawer-container.mat-drawer-container-explicit-backdrop .mat-drawer-side{z-index:3}.mat-drawer-backdrop{top:0;left:0;right:0;bottom:0;position:absolute;display:block;z-index:3;visibility:hidden}.mat-drawer-backdrop.mat-drawer-shown{visibility:visible}.mat-drawer-transition .mat-drawer-backdrop{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:background-color,visibility}@media screen and (-ms-high-contrast:active){.mat-drawer-backdrop{opacity:.5}}.mat-drawer-content{position:relative;z-index:1;display:block;height:100%;overflow:auto}.mat-drawer-transition .mat-drawer-content{transition-duration:.4s;transition-timing-function:cubic-bezier(.25,.8,.25,1);transition-property:transform,margin-left,margin-right}.mat-drawer{position:relative;z-index:4;display:block;position:absolute;top:0;bottom:0;z-index:3;outline:0;box-sizing:border-box;overflow-y:auto;transform:translate3d(-100%,0,0)}@media screen and (-ms-high-contrast:active){.mat-drawer,[dir=rtl] .mat-drawer.mat-drawer-end{border-right:solid 1px currentColor}}@media screen and (-ms-high-contrast:active){.mat-drawer.mat-drawer-end,[dir=rtl] .mat-drawer{border-left:solid 1px currentColor;border-right:none}}.mat-drawer.mat-drawer-side{z-index:2}.mat-drawer.mat-drawer-end{right:0;transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer{transform:translate3d(100%,0,0)}[dir=rtl] .mat-drawer.mat-drawer-end{left:0;right:auto;transform:translate3d(-100%,0,0)}.mat-drawer:not(.mat-drawer-side){box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-sidenav-fixed{position:fixed}</style><script charset="utf-8" src="./Angular - 响应式表单_files/live-example-live-example-module-ngfactory.76888e8a441aab262101.js.下载"></script><style>.mat-progress-bar{display:block;height:5px;overflow:hidden;position:relative;transition:opacity 250ms linear;width:100%}.mat-progress-bar .mat-progress-bar-element,.mat-progress-bar .mat-progress-bar-fill::after{height:100%;position:absolute;width:100%}.mat-progress-bar .mat-progress-bar-background{width:calc(100% + 10px)}.mat-progress-bar .mat-progress-bar-buffer{transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-secondary{display:none}.mat-progress-bar .mat-progress-bar-fill{animation:none;transform-origin:top left;transition:transform 250ms ease}.mat-progress-bar .mat-progress-bar-fill::after{animation:none;content:'';display:inline-block;left:0}.mat-progress-bar[dir=rtl],[dir=rtl] .mat-progress-bar{transform:rotateY(180deg)}.mat-progress-bar[mode=query]{transform:rotateZ(180deg)}.mat-progress-bar[mode=query][dir=rtl],[dir=rtl] .mat-progress-bar[mode=query]{transform:rotateZ(180deg) rotateY(180deg)}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-fill,.mat-progress-bar[mode=query] .mat-progress-bar-fill{transition:none}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary,.mat-progress-bar[mode=query] .mat-progress-bar-primary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-translate 2s infinite linear;left:-145.166611%}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-primary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-primary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-primary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary,.mat-progress-bar[mode=query] .mat-progress-bar-secondary{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-translate 2s infinite linear;left:-54.888891%;display:block}.mat-progress-bar[mode=indeterminate] .mat-progress-bar-secondary.mat-progress-bar-fill::after,.mat-progress-bar[mode=query] .mat-progress-bar-secondary.mat-progress-bar-fill::after{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-secondary-indeterminate-scale 2s infinite linear}.mat-progress-bar[mode=buffer] .mat-progress-bar-background{-webkit-backface-visibility:hidden;backface-visibility:hidden;animation:mat-progress-bar-background-scroll 250ms infinite linear}@keyframes mat-progress-bar-primary-indeterminate-translate{0%{transform:translateX(0)}20%{animation-timing-function:cubic-bezier(.5,0,.70173,.49582);transform:translateX(0)}59.15%{animation-timing-function:cubic-bezier(.30244,.38135,.55,.95635);transform:translateX(83.67142%)}100%{transform:translateX(200.61106%)}}@keyframes mat-progress-bar-primary-indeterminate-scale{0%{transform:scaleX(.08)}36.65%{animation-timing-function:cubic-bezier(.33473,.12482,.78584,1);transform:scaleX(.08)}69.15%{animation-timing-function:cubic-bezier(.06,.11,.6,1);transform:scaleX(.66148)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-secondary-indeterminate-translate{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:translateX(0)}25%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:translateX(37.65191%)}48.35%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:translateX(84.38617%)}100%{transform:translateX(160.27778%)}}@keyframes mat-progress-bar-secondary-indeterminate-scale{0%{animation-timing-function:cubic-bezier(.15,0,.51506,.40969);transform:scaleX(.08)}19.15%{animation-timing-function:cubic-bezier(.31033,.28406,.8,.73371);transform:scaleX(.4571)}44.15%{animation-timing-function:cubic-bezier(.4,.62704,.6,.90203);transform:scaleX(.72796)}100%{transform:scaleX(.08)}}@keyframes mat-progress-bar-background-scroll{to{transform:translateX(-10px)}}</style><script charset="utf-8" src="./Angular - 响应式表单_files/code-code-example-module-ngfactory_code-code-tabs-module-ngfactory.6a5aabadc81dbdfa0f4e.js.下载"></script><script charset="utf-8" src="./Angular - 响应式表单_files/code-code-tabs-module-ngfactory.8315a94f020cd25fe92d.js.下载"></script><script charset="utf-8" src="./Angular - 响应式表单_files/code-code-example-module-ngfactory.d0ec50584c7428d1d6ed.js.下载"></script><script charset="utf-8" src="./Angular - 响应式表单_files/12.50857b4475720140b255.js.下载"></script><style>.mat-tab-group{display:flex;flex-direction:column}.mat-tab-group.mat-tab-group-inverted-header{flex-direction:column-reverse}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{padding:0 12px}}@media (max-width:959px){.mat-tab-label{padding:0 12px}}.mat-tab-group[mat-stretch-tabs] .mat-tab-label{flex-basis:0;flex-grow:1}.mat-tab-body-wrapper{position:relative;overflow:hidden;display:flex;transition:height .5s cubic-bezier(.35,0,.25,1)}.mat-tab-body{top:0;left:0;right:0;bottom:0;position:absolute;display:block;overflow:hidden;flex-basis:100%}.mat-tab-body.mat-tab-body-active{position:relative;overflow-x:hidden;overflow-y:auto;z-index:1;flex-grow:1}.mat-tab-group.mat-tab-group-dynamic-height .mat-tab-body.mat-tab-body-active{overflow-y:hidden}</style><style>.mat-tab-header{display:flex;overflow:hidden;position:relative;flex-shrink:0}.mat-tab-label{height:48px;padding:0 24px;cursor:pointer;box-sizing:border-box;opacity:.6;min-width:160px;text-align:center;display:inline-flex;justify-content:center;align-items:center;white-space:nowrap;position:relative}.mat-tab-label:focus{outline:0}.mat-tab-label:focus:not(.mat-tab-disabled){opacity:1}.mat-tab-label.mat-tab-disabled{cursor:default}.mat-tab-label.mat-tab-label-content{display:inline-flex;justify-content:center;align-items:center;white-space:nowrap}@media (max-width:599px){.mat-tab-label{min-width:72px}}.mat-ink-bar{position:absolute;bottom:0;height:2px;transition:.5s cubic-bezier(.35,0,.25,1)}.mat-tab-group-inverted-header .mat-ink-bar{bottom:auto;top:0}@media screen and (-ms-high-contrast:active){.mat-ink-bar{outline:solid 2px;height:0}}.mat-tab-header-pagination{position:relative;display:none;justify-content:center;align-items:center;min-width:32px;cursor:pointer;z-index:2}.mat-tab-header-pagination-controls-enabled .mat-tab-header-pagination{display:flex}.mat-tab-header-pagination-before,.mat-tab-header-rtl .mat-tab-header-pagination-after{padding-left:4px}.mat-tab-header-pagination-before .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-after .mat-tab-header-pagination-chevron{transform:rotate(-135deg)}.mat-tab-header-pagination-after,.mat-tab-header-rtl .mat-tab-header-pagination-before{padding-right:4px}.mat-tab-header-pagination-after .mat-tab-header-pagination-chevron,.mat-tab-header-rtl .mat-tab-header-pagination-before .mat-tab-header-pagination-chevron{transform:rotate(45deg)}.mat-tab-header-pagination-chevron{border-style:solid;border-width:2px 2px 0 0;content:'';height:8px;width:8px}.mat-tab-header-pagination-disabled{box-shadow:none;cursor:default}.mat-tab-label-container{display:flex;flex-grow:1;overflow:hidden;z-index:1}.mat-tab-list{flex-grow:1;position:relative;transition:transform .5s cubic-bezier(.35,0,.25,1)}.mat-tab-labels{display:flex}</style><style>.mat-tab-body-content{height:100%;overflow:auto}.mat-tab-group-dynamic-height .mat-tab-body-content{overflow:hidden}</style></head>
<body>

  <aio-shell ng-version="6.0.0" class="mode-stable sidenav-open page-guide-reactive-forms folder-guide view-SideNav aio-notification-hide "><div id="top-of-page"></div><!----><mat-toolbar class="app-toolbar no-print mat-toolbar mat-primary mat-toolbar-multiple-rows" color="primary"><mat-toolbar-row class="notification-container mat-toolbar-row"><aio-notification actionurl="https://bit.ly/angular-survey-2018" buttontext="Go to survey" expirationdate="2018-01-19" icon="insert_comment" iconlabel="Survey" notificationid="survey-january-2018" class="ng-tns-c2-0 ng-trigger ng-trigger-hideAnimation" style="height: 0px;"><a class="content" href="https://bit.ly/angular-survey-2018"><mat-icon class="icon mat-icon" role="img" aria-hidden="true" aria-label="Survey"><svg fill="#FFFFFF" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-2 12H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon><span class="message"> Help Angular by taking a <b>1 minute survey</b>! </span><span class="action-button">Go to survey</span></a><button class="close-button mat-icon-button" aria-label="Close" mat-icon-button=""><span class="mat-button-wrapper"><mat-icon aria-label="Dismiss notification" class="mat-icon ng-tns-c2-0" role="img" svgicon="close" aria-hidden="true"><svg fill="#ffffff" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"></path><path d="M0 0h24v24H0z" fill="none"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple mat-button-ripple-round" matripple=""></div><div class="mat-button-focus-overlay"></div></button></aio-notification></mat-toolbar-row><mat-toolbar-row class="mat-toolbar-row"><button class="hamburger mat-button" mat-button="" title="Docs menu"><span class="mat-button-wrapper"><mat-icon class="mat-icon" role="img" svgicon="menu" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"></path></svg></mat-icon></span><div class="mat-button-ripple mat-ripple" matripple=""></div><div class="mat-button-focus-overlay"></div></button><a class="nav-link home" href="https://angular.cn/"><!----><img alt="Home" height="40" src="./Angular - 响应式表单_files/logo-nav@2x.png" title="Home" width="150" class="ng-star-inserted"><!----></a><!----><aio-top-menu class="ng-star-inserted"><ul role="navigation"><!----><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/features" title="特性">特性</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/docs" title="文档">文档</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/resources" title="资源">资源</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/events" title="会议">会议</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://blog.angular.io/" title="博客">博客</a></li><li class="ng-star-inserted"><a class="nav-link" href="https://angular.cn/translations/cn/home" title="关于中文版">关于中文版</a></li></ul></aio-top-menu><aio-search-box class="search-container"><input aria-label="search" placeholder="搜索" type="search"></aio-search-box></mat-toolbar-row></mat-toolbar><!----><mat-sidenav-container class="sidenav-container mat-drawer-container mat-sidenav-container mat-drawer-transition has-floating-toc" role="main"><!----><div class="mat-drawer-backdrop ng-star-inserted"></div><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><mat-sidenav class="sidenav mat-drawer mat-sidenav ng-tns-c6-1 ng-trigger ng-trigger-transform mat-drawer-side ng-star-inserted" tabindex="-1" style="transform: translate3d(0px, 0px, 0px); visibility: visible;"><!----><aio-nav-menu><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/guide/quickstart" title="Angular 破冰"> 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded" type="button" title="此《英雄指南》教程会带你用 TypeScript 一步步创建一个 Angular 应用。" aria-pressed="true"> 教程 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial" title="第一部分：《英雄指南》教程简介"> 1. 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt0" title="第二部分：创建应用的外壳"> 2. 应用的“外壳” </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt1" title="第三部分：构建一个简单的英雄编辑器"> 3. 英雄编辑器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt2" title="第四部分：构建一个主从结构的页面，用于展现英雄列表"> 4. 显示英雄列表 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt3" title="第五部分：把主从结构的页面重构成多个组件"> 5. 主从组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt4" title="第六部分：创建一个可复用的服务来管理英雄数据"> 6. 服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt5" title="第七部分：添加 Angular 路由器，并且学习在视图之间导航"> 7. 路由 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 expanded" href="https://angular.cn/tutorial/toh-pt6" title="第八部分：通过 HTTP 来获取并保存英雄数据"> 8. HTTP </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 expanded selected" type="button" title="学习 Angular 的核心知识" aria-pressed="true"> 核心知识 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="Angular 应用的基本构造块。" aria-pressed="true"> 架构 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture" title="Angular 应用的基本构造块"> 架构概览 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-modules" title="关于模块。"> 模块（NgModule）简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-components" title="关于组件、模板和视图。"> 组件简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-services" title="关于服务与依赖注入。"> 服务与 DI 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/architecture-next-steps" title="学完基础知识之后……"> 后续步骤 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded" type="button" title="使用数据绑定构建动态视图" aria-pressed="true"> 组件与模板 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/displaying-data" title="属性绑定可以帮助应用把数据显示在界面上"> 显示数据 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/template-syntax" title="学习如何写模板，以便借助数据绑定机制显示数据并响应事件。"> 模板语法 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/lifecycle-hooks" title="Angular 调用指令和组件的生命周期钩子函数，包括它的创建、变更和销毁时。"> 生命周期钩子 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/component-interaction" title="在不同的指令和组件之间共享信息"> 组件交互 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/component-styles" title="添加专属于某个组件的样式"> 组件样式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/elements" title="把组件转换成自定义元素。"> Angular 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/dynamic-component-loader" title="动态加载组件"> 动态组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/attribute-directives" title="属性型指令把行为添加到现有元素上。"> 属性型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/structural-directives" title="结构型指令可以操纵页面的布局"> 结构型指令 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/pipes" title="管道可以在模板中转换显示的内容。"> 管道 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/animations" title="Angular 动画体系指南"> 动画 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 expanded selected" type="button" title="Angular 的表单" aria-pressed="true"> 表单 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 expanded selected"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/user-input" title="用户输入触发 DOM 事件。我们通过事件绑定来监听它们，把更新过的数据导入回我们的组件和 model。"> 用户输入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/forms" title="表单可以创建集中、高效、引人注目的输入体验。Angular 表单可以协调一组数据绑定控件，跟踪变更，验证输入，并表达错误信息。"> 模板驱动表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded" href="https://angular.cn/guide/form-validation" title="验证用户的表单输入"> 表单验证 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 expanded selected" href="https://angular.cn/guide/reactive-forms" title="使用 FormBuilder 、分组和数组创建响应式表单。"> 响应式表单 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dynamic-form" title="使用FormGroup渲染动态表单"> 动态表单 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Observable 与 RxJS" aria-pressed="false"> Observable 与 RxJS <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables" title=""> 可观察对象(Observable) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/rx-library" title=""> RxJS 库 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/observables-in-angular" title=""> Angular 中的可观察对象 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/practical-observable-usage" title=""> 用法实战 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/comparing-observables" title=""> 与其它技术的比较 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/bootstrapping" title="在应用的根模块（AppModule）中告诉 Angular 如何构造并引导引用。"> 引导启动 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 中的模块" aria-pressed="false"> Angular 模块 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodules" title="使用 NgModule 让你的应用更高效"> NgModule 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-vs-jsmodule" title="JavaScript 模块和 NgModule 之间的差异"> JS 模块 vs NgModule </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/frequent-ngmodules" title="介绍最常用的 Angular 模块"> 常用模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/module-types" title="介绍特性模块的几种类型"> 特性模块的分类 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/entry-components" title="关于 Angular 中入口组件的一切"> 入口组件 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/feature-modules" title="创建特性模块，以组织你的代码"> 特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/providers" title="服务提供商与 Angular 模块"> 服务提供商 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/singleton-services" title="创建单例应用"> 单例应用 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/lazy-loading-ngmodules" title="惰性加载模块，以提高应用的性能"> 惰性加载的特性模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/sharing-ngmodules" title="共享 Angular 模块让你的应用现代化。"> 共享 Angular 模块 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-api" title="理解 NgModule 的那些细节。"> NgModule API </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ngmodule-faq" title="回答关于 NgModules 的常见问题。"> NgModule 常见问题 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="依赖注入：创建并注入各种服务。" aria-pressed="false"> 依赖注入 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-pattern" title="学习 Angular 依赖注入系统背后的依赖注入模式"> 依赖注入模式 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection" title="Angular 的依赖注入系统能够为 Angular 创建的类创建并交付它们所依赖的服务。"> Angular 依赖注入 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/hierarchical-dependency-injection" title="Angular 的多级注入体系会建立与组件平行的注入器树。"> 多级注入器 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/dependency-injection-in-action" title="依赖注入的使用技巧"> DI 实用技巧 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/http" title="通过 HTTP 协议与远程服务器对话。"> HttpClient </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/router" title="揭示如何通过 Angular 路由进行基本的屏幕导航。"> 路由与导航 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/testing" title="测试 Angular 应用的技巧与实践。"> 测试 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/cheatsheet" title="关于 Angular 常用编码技术的快速指南。"> 速查表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-1 collapsed" type="button" title="把 Angular 用到你的实际工作中的一些技巧" aria-pressed="false"> 其它技术 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-1 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/i18n" title="把应用模板中的文本翻译成多种语言。"> 国际化 (i18n) </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/language-service" title="使用 Angular 语言服务来为开发提速。"> 语言服务 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/security" title="Angular 应用开发中的安全技术。"> 安全 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="环境准备与部署" aria-pressed="false"> 环境准备与部署 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup" title="在你自己的机器上安装 Angular QuickStart 种子，以便更快、更高效的开发。"> 搭建本地开发环境 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/setup-systemjs-anatomy" title="基于 SystemJS 的本地开发环境内幕。"> 搭建方式剖析 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/browser-support" title="浏览器支持与 Polyfills 指南"> 浏览器支持 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/npm-packages" title="建议的 npm 包，以及如何指定包的依赖。"> npm 包 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/typescript-configuration" title="给 Angular 开发者的 TypeScript 配置。"> TypeScript 配置 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/aot-compiler" title="学习如何使用 AOT 预编译器。"> 预先（AOT）编译 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/deployment" title="学习如何部署你的 Angular 应用。"> 部署 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/custom-elements" title="把 Angular 组件用作自定义元素。"> 自定义元素 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的 Service Worker：控制应用的资源缓存。" aria-pressed="false"> Service Worker <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-intro" title="Angular 对 Service Worker 的实现提升了慢速或不稳定的网络连接下的用户体验。"> 简介 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-getting-started" title="在 CLI 项目中启用 Service Worker，并在浏览器中查看效果。"> 快速起步 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-communications" title="那些能让你和 Angular 的 Service Worker 通讯的服务类。"> 与 Service Worker 通讯 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-devops" title="使用 Service Worker 运行应用、管理应用更新、调试以及杀掉正在运行的应用。"> 生产环境下的 Service Worker </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/service-worker-config" title="配置 Service Worker 的缓存行为。"> Service Worker 配置 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="Angular 的发布实践，更新计划以及与更新有关的资源。" aria-pressed="false"> 保持最新 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/updating" title="关于如何把 Angular 应用升级到最新版的信息。"> 更新你的项目 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/releases" title="Angular 的版本、发布、支持与弃用策略。"> Angular 的版本发布 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><!----><div class="ng-star-inserted"><!----><!----><button class="vertical-menu-item heading ng-star-inserted level-2 collapsed" type="button" title="把 AngularJS 应用增量式的升级到 Angular。" aria-pressed="false"> 从 AngularJS 升级 <mat-icon class="rotating-icon mat-icon" role="img" svgicon="keyboard_arrow_right" aria-hidden="true"><svg xmlns="http://www.w3.org/2000/svg" focusable="false" viewBox="0 0 24 24"><path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path></svg></mat-icon></button><div class="heading-children level-2 collapsed"><!----><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/upgrade" title="把 AngularJS 应用增量式的升级到 Angular。"> 升级步骤 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-3 collapsed" href="https://angular.cn/guide/ajs-quick-reference" title="学习如何把 AngularJS 的概念映射到 Angular 中。"> AngularJS 与 Angular 的概念对照 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/universal" title="使用 Angular Universal 在服务端渲染 HTML。">  服务端渲染 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/visual-studio-2015" title="在 Visual Studio 2015 中使用快速起步中的文件"> Visual Studio 2015 快速上手 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/styleguide" title="写出 Angular 风格的程序"> 风格指南 </a></div><!----></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-2 collapsed" href="https://angular.cn/guide/glossary" title="Angular 中最重要的词汇的简要定义。"> 词汇表 </a></div><!----></aio-nav-item></div></div></aio-nav-item><aio-nav-item class="ng-star-inserted"><!----><div class="ng-star-inserted"><a class="vertical-menu-item level-1 collapsed" href="https://angular.cn/api" title="关于 Angular 中类和值的详细信息。"> API 参考手册 </a></div><!----></aio-nav-item></aio-nav-menu><div class="doc-version"><aio-select><div class="form-select-menu"><button class="form-select-button"><strong></strong><!---->stable (v6.0.0) </button><!----></div></aio-select></div></mat-sidenav><div tabindex="-1" class="cdk-visually-hidden cdk-focus-trap-anchor"></div><!----><mat-sidenav-content cdkscrollable="" class="mat-drawer-content mat-sidenav-content ng-star-inserted" style="margin-left: 262px; margin-right: 0px;"><section class="sidenav-content" role="content" id="guide-reactive-forms"><aio-mode-banner><!----></aio-mode-banner><aio-doc-viewer class=""><div style="opacity: 1; transition: all 200ms ease-in-out;">
<div class="content">
<h1 translation-result="" id="reactive-forms-2">响应式表单<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reactive-forms-2"><i class="material-icons">link</i></a></h1><aio-toc class="embedded"></aio-toc><h1 translation-origin="off" id="reactive-forms">Reactive Forms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reactive-forms"><i class="material-icons">link</i></a></h1>

<p translation-result=""><em>响应式表单</em>是 Angular 中用<em>响应式</em>风格创建表单的技术。
本章会在构建“英雄详情编辑器”的过程中，逐步讲解响应式表单的概念。</p><p translation-origin="off"><em>Reactive forms</em> is an Angular technique for creating forms in a <em>reactive</em> style.
This guide explains reactive forms as you follow the steps to build a "Hero Detail Editor" form.</p>

<a id="toc"></a>
<p translation-result="">试试<live-example stackblitz="final" title="Reactive Forms (final) in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/final.stackblitz.html" title="Reactive Forms (final) in Stackblitz">Reactive Forms (final) in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/final.reactive-forms.zip">下载范例</a></span></span></span></live-example>。</p><p translation-origin="off">Try the <live-example stackblitz="final" title="Reactive Forms (final) in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/final.stackblitz.html" title="Reactive Forms (final) in Stackblitz">Reactive Forms (final) in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/final.reactive-forms.zip">下载范例</a></span></span></span></live-example>.</p>

<p translation-result="">你还可以运行<live-example title="Reactive Forms Demo in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/stackblitz.html" title="Reactive Forms Demo in Stackblitz">Reactive Forms Demo in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/reactive-forms.zip">下载范例</a></span></span></span></live-example>，并从顶部选取一个中间步骤。</p><p translation-origin="off">You can also run the <live-example title="Reactive Forms Demo in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/stackblitz.html" title="Reactive Forms Demo in Stackblitz">Reactive Forms Demo in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/reactive-forms.zip">下载范例</a></span></span></span></live-example> version
and choose one of the intermediate steps from the "demo picker" at the top.</p>

<a id="intro"></a>
<h2 translation-result="" id="introduction-to-reactive-forms">响应式表单简介<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#introduction-to-reactive-forms"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="introduction-to-reactive-forms">Introduction to Reactive Forms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#introduction-to-reactive-forms"><i class="material-icons">link</i></a></h2>

<p translation-result="">Angular 提供了两种构建表单的技术：<em>响应式</em>表单和<em>模板驱动</em>表单。
这两项技术都属于 <code>@angular/forms</code> 库，并且共享一组公共的表单控件类。</p><p translation-origin="off">Angular offers two form-building technologies: <em>reactive</em> forms and <em>template-driven</em> forms.
The two technologies belong to the <code>@angular/forms</code> library
and share a common set of form control classes.</p>

<p translation-result="">但是它们在设计哲学、编程风格和具体技术上有显著区别。
所以，它们都有自己的模块：<code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> 和 <code><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a></code>。</p><p translation-origin="off">But they diverge markedly in philosophy, programming style, and technique.
They even have their own modules: the <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> and the <code><a href="https://angular.cn/api/forms/FormsModule" class="code-anchor">FormsModule</a></code>.</p>

<h3 translation-result="" id="reactive-forms-3">响应式表单<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reactive-forms-3"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="reactive-forms-1">Reactive forms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reactive-forms-1"><i class="material-icons">link</i></a></h3>

<p translation-result="">Angular 的<em>响应式</em>表单能让实现<em>响应式编程风格</em>更容易，这种编程风格更倾向于在非 UI 的<em>数据模型</em>（通常接收自服务器）之间显式的管理数据流，
并且用一个 UI 导向的<em>表单模型</em>来保存屏幕上 HTML 控件的状态和值。
响应式表单可以让使用响应式编程模式、测试和校验变得更容易。</p><p translation-origin="off">Angular <em>reactive</em> forms facilitate a <em>reactive style</em> of programming
that favors explicit management of the data flowing between
a non-UI <em>data model</em> (typically retrieved from a server) and a
UI-oriented <em>form model</em> that retains the states
and values of the HTML controls on screen. Reactive forms offer the ease
of using reactive patterns, testing, and validation.</p>

<p translation-result="">使用<em>响应式</em>表单，你可以在组件中创建表单控件的对象树，并使用本章中传授的技巧把它们绑定到组件模板中的原生表单控件元素上。</p><p translation-origin="off">With <em>reactive</em> forms, you create a tree of Angular form control objects
in the component class and bind them to native form control elements in the
component template, using techniques described in this guide.</p>

<p translation-result="">你可以在组件类中直接创建和维护表单控件对象。由于组件类可以同时访问数据模型和表单控件结构，
因此你可以把表单模型值的变化推送到表单控件中，并把变化后的值拉取回来。
组件可以监听表单控件状态的变化，并对此做出响应。</p><p translation-origin="off">You create and manipulate form control objects directly in the
component class. As the component class has immediate access to both the data
model and the form control structure, you can push data model values into
the form controls and pull user-changed values back out. The component can
observe changes in form control state and react to those changes.</p>

<p translation-result="">直接使用表单控件对象的优点之一是值和有效性状态的更新<a href="https://angular.cn/guide/reactive-forms#async-vs-sync" title="Async vs sync">总是同步的，并且在你的控制之下</a>。
你不会遇到时序问题，这个问题有时在模板驱动表单中会成为灾难。而且响应式表单更容易进行单元测试。</p><p translation-origin="off">One advantage of working with form control objects directly is that value and validity updates
are <a href="https://angular.cn/guide/reactive-forms#async-vs-sync" title="Async vs sync">always synchronous and under your control</a>.
You won't encounter the timing issues that sometimes plague a template-driven form
and reactive forms can be easier to unit test.</p>

<p translation-result="">在响应式编程范式中，组件会负责维护<em>数据模型</em>的不可变性，把模型当做纯粹的原始数据源。
组件不会直接更新数据模型，而是把用户的修改提取出来，把它们转发给外部的组件或服务，外部程序才会使用这些进行处理（比如保存它们），
并且给组件返回一个新的<em>数据模型</em>，以反映模型状态的变化。</p><p translation-origin="off">In keeping with the reactive paradigm, the component
preserves the immutability of the <em>data model</em>,
treating it as a pure source of original values.
Rather than update the data model directly,
the component extracts user changes and forwards them to an external component or service,
which does something with them (such as saving them)
and returns a new <em>data model</em> to the component that reflects the updated model state.</p>

<p translation-result="">使用响应式表单的指令，并不要求你遵循所有的响应式编程原则，但它能让你更容易使用响应式编程方法，从而更愿意使用它。</p><p translation-origin="off">Using reactive form directives does not require you to follow all reactive priniciples,
but it does facilitate the reactive programming approach should you choose to use it.</p>

<h3 translation-result="" id="template-driven-forms-2">模板驱动表单<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#template-driven-forms-2"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="template-driven-forms">Template-driven forms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#template-driven-forms"><i class="material-icons">link</i></a></h3>

<p translation-result="">在<a href="https://angular.cn/guide/forms">模板</a>一章中介绍过的<em>模板驱动</em>表单，是一种完全不同的方式。</p><p translation-origin="off"><em>Template-driven</em> forms, introduced in the <a href="https://angular.cn/guide/forms">Template guide</a>, take a completely different approach.</p>

<p translation-result="">你把 HTML 表单控件（比如 <code>&lt;input&gt;</code> 和 <code>&lt;select&gt;</code>）放进组件模板中，并用 <code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code> 等指令把它们绑定到组件中<em>数据模型</em>的属性上。</p><p translation-origin="off">You place HTML form controls (such as <code>&lt;input&gt;</code> and <code>&lt;select&gt;</code>) in the component template and
bind them to <em>data model</em> properties in the component, using directives
like <code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code>.</p>

<p translation-result="">你不用自己创建 Angular 表单控件对象。Angular 指令会使用数据绑定中的信息创建它们。
你不用自己推送和拉取数据。Angular 使用 <code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code> 来替你管理它们。
当用户做出修改时，Angular 会据此更新可变的<em>数据模型</em>。</p><p translation-origin="off">You don't create Angular form control objects. Angular directives
create them for you, using the information in your data bindings.
You don't push and pull data values. Angular handles that for you with <code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code>.
Angular updates the mutable <em>data model</em> with user changes as they happen.</p>

<p translation-result="">因此，<code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code> 并不是 <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> 模块的一部分。</p><p translation-origin="off">For this reason, the <code><a href="https://angular.cn/api/forms/NgModel" class="code-anchor">ngModel</a></code> directive is not part of the ReactiveFormsModule.</p>

<p translation-result="">虽然这意味着组件中的代码更少，但是<a href="https://angular.cn/guide/reactive-forms#async-vs-sync" title="Async vs sync">模板驱动表单是异步工作的</a>，这可能在更高级的场景中让开发复杂化。</p><p translation-origin="off">While this means less code in the component class,
<a href="https://angular.cn/guide/reactive-forms#async-vs-sync" title="Async vs sync">template-driven forms are asynchronous</a>
which may complicate development in more advanced scenarios.</p>

<a id="async-vs-sync"></a>
<h3 translation-result="" id="async-vs-sync">异步 vs. 同步<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#async-vs-sync"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="async-vs-sync">Async vs. sync<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#async-vs-sync"><i class="material-icons">link</i></a></h3>

<p translation-result="">响应式表单是同步的而模板驱动表单是异步的。</p><p translation-origin="off">Reactive forms are synchronous while template-driven forms are asynchronous.</p>

<p translation-result="">使用响应式表单，你会在代码中创建整个表单控件树。
你可以立即更新一个值或者深入到表单中的任意节点，因为所有的控件都始终是可用的。</p><p translation-origin="off">In reactive forms, you create the entire form control tree in code.
You can immediately update a value or drill down through the descendants of the parent form
because all controls are always available.</p>

<p translation-result="">模板驱动表单会委托指令来创建它们的表单控件。
为了消除“检查完后又变化了”的错误，这些指令需要消耗一个以上的变更检测周期来构建整个控件树。
这意味着在从组件类中操纵任何控件之前，你都必须先等待一个节拍。</p><p translation-origin="off">Template-driven forms delegate creation of their form controls to directives.
To avoid "<em>changed after checked</em>" errors,
these directives take more than one cycle to build the entire control tree.
That means you must wait a tick before manipulating any of the controls
from within the component class.</p>

<p translation-result="">比如，如果你用 <code>@<a href="https://angular.cn/api/core/ViewChild" class="code-anchor">ViewChild</a>(<a href="https://angular.cn/api/forms/NgForm" class="code-anchor">NgForm</a>)</code> 查询来注入表单控件，并在<a href="https://angular.cn/guide/lifecycle-hooks#afterview" title="Lifecycle hooks guide: AfterView">生命周期钩子 <code>ngAfterViewInit</code></a>中检查它，就会发现它没有子控件。
你必须使用 <code>setTimeout</code> 等待一个节拍才能从控件中提取值、测试有效性，或把它设置为新值。</p><p translation-origin="off">For example, if you inject the form control with a <code>@<a href="https://angular.cn/api/core/ViewChild" class="code-anchor">ViewChild</a>(<a href="https://angular.cn/api/forms/NgForm" class="code-anchor">NgForm</a>)</code> query and examine it in the
<a href="https://angular.cn/guide/lifecycle-hooks#afterview" title="Lifecycle hooks guide: AfterView"><code>ngAfterViewInit</code> lifecycle hook</a>,
you'll discover that it has no children.
You must wait a tick, using <code>setTimeout</code>, before you can
extract a value from a control, test its validity, or set it to a new value.</p>

<p translation-result="">模板驱动表单的异步性让单元测试也变得复杂化了。
你必须把测试代码包裹在 <code><a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>()</code> 或 <code><a href="https://angular.cn/api/core/testing/fakeAsync" class="code-anchor">fakeAsync</a>()</code> 中来解决要查阅的值尚不存在的情况。
使用响应式表单，在所期望的时机一切都是可用的。</p><p translation-origin="off">The asynchrony of template-driven forms also complicates unit testing.
You must wrap your test block in <code><a href="https://angular.cn/api/core/testing/async" class="code-anchor">async</a>()</code> or <code><a href="https://angular.cn/api/core/testing/fakeAsync" class="code-anchor">fakeAsync</a>()</code> to
avoid looking for values in the form that aren't there yet.
With reactive forms, everything is available when you expect it to be.</p>

<h3 translation-result="" id="choosing-reactive-or-template-driven-forms">选择响应式表单还是模板驱动表单？<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#choosing-reactive-or-template-driven-forms"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="choosing-reactive-or-template-driven-forms">Choosing reactive or template-driven forms<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#choosing-reactive-or-template-driven-forms"><i class="material-icons">link</i></a></h3>

<p translation-result="">响应式表单和模板驱动表单是两种架构范式，各有优缺点。
请自行选择更合适的方法，甚至可以在同一个应用中同时使用它们。</p><p translation-origin="off">Reactive and template-driven forms are
two different architectural paradigms,
with their own strengths and weaknesses.
Choose the approach that works best for you.
You may decide to use both in the same application.</p>

<p translation-result="">本章其余的部分只专注于<em>响应式</em>范式以及响应式表单技术的详情。
要了解关于<em>模板驱动表单</em>的更多信息，参见<a href="https://angular.cn/guide/forms">表单</a>一章。</p><p translation-origin="off">The rest of this page explores the <em>reactive</em> paradigm and
concentrates exclusively on reactive forms techniques.
For information on <em>template-driven forms</em>, see the <a href="https://angular.cn/guide/forms"><em>Forms</em></a> guide.</p>

<p translation-result="">在下一节，你要先准备一个响应式表单范例的项目，然后就可以开始学习<a href="https://angular.cn/guide/reactive-forms#essentials">Angular 表单类</a>，并在响应式表单中使用它们了。</p><p translation-origin="off">In the next section, you'll set up your project for the reactive form demo.
Then you'll learn about the <a href="https://angular.cn/guide/reactive-forms#essentials">Angular form classes</a> and how to use them in a reactive form.</p>

<a id="setup"></a>
<h2 translation-result="" id="setup-4">准备工作<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#setup-4"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="setup">Setup<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#setup"><i class="material-icons">link</i></a></h2>

<p translation-result="">创建一个名叫<code>angular-reactive-forms</code>的新项目：</p><p translation-origin="off">Create a new project named <code>angular-reactive-forms</code>:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng new angular-reactive-forms

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng new angular</span><span class="pun">-</span><span class="pln">reactive</span><span class="pun">-</span><span class="pln">forms</span></code>
    </pre></aio-code></code-example>
<a id="data-model"></a>
<h2 translation-result="" id="create-a-data-model">创建数据模型<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-a-data-model"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="create-a-data-model">Create a data model<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-a-data-model"><i class="material-icons">link</i></a></h2>

<p translation-result="">本章的焦点是响应式表单组件以及编辑一个英雄。
你需要一个 <code>Hero</code> 类和一些英雄数据。</p><p translation-origin="off">The focus of this guide is a reactive forms component that edits a hero.
You'll need a <code>hero</code> class and some hero data.</p>

<p translation-result="">使用 CLI 创建一个名叫 <code>data-model</code> 的新类：</p><p translation-origin="off">Using the CLI, generate a new class named <code>data-model</code>:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng generate class data-model

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate class data</span><span class="pun">-</span><span class="pln">model</span></code>
    </pre></aio-code></code-example>
<p translation-result="">并把下列内容复制到 <code>data-model.ts</code> 中：</p><p translation-origin="off">And copy the following into <code>data-model.ts</code>:</p>

<code-example path="reactive-forms/src/app/data-model.ts" title="src/app/data-model.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
export class Hero {
  id = 0;
  name = '';
  addresses: Address[];
}

export class Address {
  street = '';
  city   = '';
  <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>  = '';
  zip    = '';
}

export const heroes: Hero[] = [
  {
    id: 1,
    name: 'Whirlwind',
    addresses: [
      {street: '123 Main',  city: 'Anywhere', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'CA',  zip: '94801'},
      {street: '456 Maple', city: 'Somewhere', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'VA', zip: '23226'},
    ]
  },
  {
    id: 2,
    name: 'Bombastic',
    addresses: [
      {street: '789 Elm',  city: 'Smallville', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'OH',  zip: '04501'},
    ]
  },
  {
    id: 3,
    name: 'Magneta',
    addresses: [ ]
  },
];

export const states = ['CA', 'MD', 'OH', 'VA'];


</div><!----><header class="ng-star-inserted">src/app/data-model.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/data-model.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  id </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
  name </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  addresses</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">[];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Address</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  street </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  city   </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pln">  </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  zip    </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> heroes</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Whirlwind'</span><span class="pun">,</span><span class="pln">
    addresses</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">street</span><span class="pun">:</span><span class="pln"> </span><span class="str">'123 Main'</span><span class="pun">,</span><span class="pln">  city</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Anywhere'</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">'CA'</span><span class="pun">,</span><span class="pln">  zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">'94801'</span><span class="pun">},</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">street</span><span class="pun">:</span><span class="pln"> </span><span class="str">'456 Maple'</span><span class="pun">,</span><span class="pln"> city</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Somewhere'</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">'VA'</span><span class="pun">,</span><span class="pln"> zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">'23226'</span><span class="pun">},</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Bombastic'</span><span class="pun">,</span><span class="pln">
    addresses</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
      </span><span class="pun">{</span><span class="pln">street</span><span class="pun">:</span><span class="pln"> </span><span class="str">'789 Elm'</span><span class="pun">,</span><span class="pln">  city</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Smallville'</span><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">'OH'</span><span class="pun">,</span><span class="pln">  zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">'04501'</span><span class="pun">},</span><span class="pln">
    </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
  </span><span class="pun">{</span><span class="pln">
    id</span><span class="pun">:</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="str">'Magneta'</span><span class="pun">,</span><span class="pln">
    addresses</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
  </span><span class="pun">},</span><span class="pln">
</span><span class="pun">];</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">const</span><span class="pln"> states </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="str">'CA'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'MD'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'OH'</span><span class="pun">,</span><span class="pln"> </span><span class="str">'VA'</span><span class="pun">];</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这个文件导出两个类和两个常量。<code>Address</code> 和 <code>Hero</code> 类定义应用的<em>数据模型</em>。
<code>heroes</code> 和 <code>states</code> 常量提供测试数据。</p><p translation-origin="off">The file exports two classes and two constants. The <code>Address</code>
and <code>Hero</code> classes define the application <em>data model</em>.
The <code>heroes</code> and <code>states</code> constants supply the test data.</p>

<a id="create-component"></a>
<h2 translation-result="" id="create-a-emreactive-formsem-component">创建<em>响应式表单</em>组件<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-a-emreactive-formsem-component"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="create-a-reactive-forms-component">Create a <em>reactive forms</em> component<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-a-reactive-forms-component"><i class="material-icons">link</i></a></h2>

<p translation-result="">生成一个名叫 <code>HeroDetail</code> 的新组件：</p><p translation-origin="off">Generate a new component named <code>HeroDetail</code>:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng generate component HeroDetail

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate component </span><span class="typ">HeroDetail</span></code>
    </pre></aio-code></code-example>
<p translation-result="">并导入：</p><p translation-origin="off">And import:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-1.component.ts" region="import" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a> } from '@angular/forms';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="typ">FormControl</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接下来，创建并导出一个带 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的 <code>HeroDetailComponent</code> 类。
<code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 是一个指令，它允许你直接创建并管理一个 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 实例。</p><p translation-origin="off">Next, update the <code>HeroDetailComponent</code> class with a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>.
<code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> is a directive that allows you to create and manage
a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> instance directly.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-1.component.ts" region="v1" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent1 {
  name = new <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>();
}


</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent1</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  name </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="typ">FormControl</span></a><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里创建了一个名叫 <code>name</code> 的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>。
它将会绑定到模板中的一个 <code>&lt;input&gt;</code> 元素，表示英雄的名字。</p><p translation-origin="off">This creates a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> called <code>name</code>.
It will be bound in the template to an HTML <code>&lt;input&gt;</code> element for the hero name.</p>

<p translation-result=""><code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 构造函数接收三个可选参数：
初始值、验证器数组和异步验证器数组。</p><p translation-origin="off">A <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> constructor accepts three, optional arguments:
the initial data value, an array of validators, and an array of async validators.</p>

<div class="l-sub-section">
<p translation-result="">最简单的控件并不需要数据或验证器，但是在实际应用中，大部分表单控件都会同时具备它们。
要想深入了解 <code><a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a></code>，参见<a href="https://angular.cn/guide/form-validation">表单验证</a>一章。</p><p translation-origin="off">This simple control doesn't have data or validators.
In real apps, most form controls have both. For in-depth information on
<code><a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a></code>, see the <a href="https://angular.cn/guide/form-validation">Form Validation</a> guide.</p>

</div>
<a id="create-template"></a>
<h2 translation-result="" id="create-the-template">创建模板<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-the-template"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="create-the-template">Create the template<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-the-template"><i class="material-icons">link</i></a></h2>

<p translation-result="">现在，把组件的模板文件 <code>src/app/hero-detail.component.html</code> 修改为如下内容：</p><p translation-origin="off">Now update the component's template with the following markup.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-1.component.html" region="simple-control" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h2&gt;Hero Detail&lt;/h2&gt;
&lt;h3&gt;&lt;i&gt;Just <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>&lt;/i&gt;&lt;/h3&gt;
&lt;label class="center-block"&gt;Name:
  &lt;input class="form-control" [formControl]="name"&gt;
&lt;/label&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h2&gt;</span><span class="pln">Hero Detail</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
</span><span class="tag">&lt;h3&gt;&lt;i&gt;</span><span class="pln">Just </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="pln">FormControl</span></a><span class="tag">&lt;/i&gt;&lt;/h3&gt;</span><span class="pln">
</span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Name:
  </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> [</span><span class="atn">formControl</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"name"</span><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;/label&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">要让 Angular 知道你希望把这个输入框关联到类中的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 型属性 <code>name</code>，就要在模板中的 <code>&lt;input&gt;</code> 上加一句 <code>[formControl]="name"</code>。</p><p translation-origin="off">To let Angular know that this is the input that you want to
associate to the <code>name</code> <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> in the class,
you need <code>[formControl]="name"</code> in the template on the <code>&lt;input&gt;</code>.</p>

<div class="l-sub-section">
<p translation-result="">请忽略 CSS 类 <code>form-control</code>，它属于<a href="http://getbootstrap.com/" target="_blank" title="Bootstrap CSS">Bootstrap CSS library</a>而不是 Angular。
它会为表单添加样式，但是对表单的逻辑毫无影响。</p><p translation-origin="off">Disregard the <code>form-control</code> CSS class. It belongs to the
<a href="http://getbootstrap.com/" title="Bootstrap CSS">Bootstrap CSS library</a>,
not Angular, and styles the form but in no way impacts the logic.</p>

</div>
<a id="import"></a>
<h2 translation-result="" id="import-the-codereactiveformsmodulecode">导入 <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#import-the-codereactiveformsmodulecode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="import-the-reactiveformsmodule">Import the <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#import-the-reactiveformsmodule"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code>HeroDetailComponent</code> 的模板中使用了来自 <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> 的 <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code>。</p><p translation-origin="off">The <code>HeroDetailComponent</code> template uses the <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code>
directive from the <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code>.</p>

<p translation-result="">在 <code>app.module.ts</code> 中做了下面两件事：</p><p translation-origin="off">Do the following two things in <code>app.module.ts</code>:</p>

<ol>
<li>
<p translation-result="">   使用 JavaScript 的 <code>import</code> 语句访问 <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> 和 <code>HeroDetailComponent</code>。</p><p translation-origin="off">Use a JavaScript <code>import</code> statement to access
the <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code>.</p>

</li>
<li>
<p translation-result="">把 <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> 添加到 <code>AppModule</code> 的 <code>imports</code> 列表中。</p><p translation-origin="off">Add <code><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a></code> to the <code>AppModule</code>'s <code>imports</code> list.</p>

</li>
</ol>
<code-example path="reactive-forms/src/app/app.module.ts" region="v1" title="src/app/app.module.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }            from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }       from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a> } from '@angular/forms';  // &lt;-- #1 import module

import { AppComponent }        from './app.component';
import { HeroDetailComponent } from './hero-detail/hero-detail.component';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  declarations: [
    AppComponent,
    HeroDetailComponent,
  ],
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a> // &lt;-- #2 add to @<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> imports
  ],
  bootstrap: [ AppComponent ]
})
export class AppModule { }

</div><!----><header class="ng-star-inserted">src/app/app.module.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.module.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="typ">NgModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">            </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">       </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/platform-browser'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor"><span class="typ">ReactiveFormsModule</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">  </span><span class="com">// &lt;-- #1 import module</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./app.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-detail/hero-detail.component'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroDetailComponent</span><span class="pun">,</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  imports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor"><span class="typ">BrowserModule</span></a><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor"><span class="typ">ReactiveFormsModule</span></a><span class="pln"> </span><span class="com">// &lt;-- #2 add to @</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="com">NgModule</span></a><span class="com"> imports</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  bootstrap</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">AppComponent</span><span class="pln"> </span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">AppModule</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<a id="update"></a>
<h2 translation-result="" id="display-the-codeherodetailcomponentcode">显示 <code>HeroDetailComponent</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#display-the-codeherodetailcomponentcode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="display-the-herodetailcomponent">Display the <code>HeroDetailComponent</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#display-the-herodetailcomponent"><i class="material-icons">link</i></a></h2>

<p translation-result="">修改 <code>AppComponent</code> 的模板，以便显示 <code>HeroDetailComponent</code>。</p><p translation-origin="off">Revise the <code>AppComponent</code> template so it displays the <code>HeroDetailComponent</code>.</p>

<code-example path="reactive-forms/src/app/app.component.1.html" title="src/app/app.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;div class="container"&gt;
  &lt;h1&gt;Reactive Forms&lt;/h1&gt;
  &lt;app-hero-detail&gt;&lt;/app-hero-detail&gt;
&lt;/div&gt;


</div><!----><header class="ng-star-inserted">src/app/app.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"container"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;h1&gt;</span><span class="pln">Reactive Forms</span><span class="tag">&lt;/h1&gt;</span><span class="pln">
  </span><span class="tag">&lt;app-hero-detail&gt;&lt;/app-hero-detail&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<a id="essentials"></a>
<h2 translation-result="" id="essential-form-classes">基础的表单类<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#essential-form-classes"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="essential-form-classes">Essential form classes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#essential-form-classes"><i class="material-icons">link</i></a></h2>

<p translation-result="">本文使用四个基础类来构建响应式表单：</p><p translation-origin="off">This guide uses four fundamental classes to build a reactive form:</p>

<table>
  <tbody><tr>
    <th>
<p translation-result="">      类</p><p translation-origin="off">      Class</p>

    </th>
    <th>
<p translation-result="">      说明</p><p translation-origin="off">      Description</p>

    </th>
  </tr>
  <tr>
    <td style="vertical-align: top">
<p translation-origin="off">      <code><a href="https://angular.cn/api/forms/AbstractControl" class="code-anchor">AbstractControl</a></code></p>
    </td>
    <td>
<p translation-result="">      <a href="https://angular.cn/api/forms/AbstractControl" title="API Reference: FormControl"><code>AbstractControl</code></a>是这三个具体表单类的抽象基类。
并为它们提供了一些共同的行为和属性。</p><p translation-origin="off">      <a href="https://angular.cn/api/forms/AbstractControl" title="API Reference: FormControl"><code>AbstractControl</code></a> is the abstract base class for the three concrete form control classes;
<code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>, <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, and <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>.
It provides their common behaviors and properties.</p>

    </td>
  </tr>
  <tr>
    <td style="vertical-align: top">
<p translation-origin="off">      <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code></p>
    </td>
    <td>
<p translation-result="">      <a href="https://angular.cn/api/forms/FormControl" title="API Reference: FormControl"><em>FormControl</em></a>
用于跟踪一个<em>单独的</em>表单控件的值和有效性状态。它对应于一个 HTML 表单控件，比如 <code>&lt;input&gt;</code> 或 <code>&lt;select&gt;</code>。</p><p translation-origin="off">      <a href="https://angular.cn/api/forms/FormControl" title="API Reference: FormControl"><code>FormControl</code></a>
tracks the value and validity status of an individual form control.
It corresponds to an HTML form control such as an <code>&lt;input&gt;</code> or <code>&lt;select&gt;</code>.</p>

    </td>
  </tr>
  <tr>
    <td style="vertical-align: top">
<p translation-origin="off">      <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code></p>
    </td>
    <td>
<p translation-result="">      <a href="https://angular.cn/api/forms/FormGroup" title="API Reference: FormGroup"><code>FormGroup</code></a>用于
跟踪<em>一组</em><code><a href="https://angular.cn/api/forms/AbstractControl" class="code-anchor">AbstractControl</a></code> 的实例的值和有效性状态。
该组的属性中包含了它的子控件。
组件中的顶级表单就是一个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。</p><p translation-origin="off">      <a href="https://angular.cn/api/forms/FormGroup" title="API Reference: FormGroup"><code>FormGroup</code></a>
tracks the value and validity state of a group of <code><a href="https://angular.cn/api/forms/AbstractControl" class="code-anchor">AbstractControl</a></code> instances.
The group's properties include its child controls.
The top-level form in your component is a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.</p>

    </td>
  </tr>
  <tr>
    <td style="vertical-align: top">
<p translation-origin="off">      <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code></p>
    </td>
    <td>
<p translation-result="">      <a href="https://angular.cn/api/forms/FormArray" title="API Reference: FormArray"><code>FormArray</code></a>用于跟踪 <code><a href="https://angular.cn/api/forms/AbstractControl" class="code-anchor">AbstractControl</a></code> 实例组成的有序数组的值和有效性状态。</p><p translation-origin="off">      <a href="https://angular.cn/api/forms/FormArray" title="API Reference: FormArray"><code>FormArray</code></a>
tracks the value and validity state of a numerically indexed array of <code><a href="https://angular.cn/api/forms/AbstractControl" class="code-anchor">AbstractControl</a></code> instances.</p>

    </td>
  </tr>
</tbody></table>
<h2 translation-result="" id="style-the-app">为应用添加样式<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#style-the-app"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="style-the-app">Style the app<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#style-the-app"><i class="material-icons">link</i></a></h2>

<p translation-result="">要在 <code>AppComponent</code> 和 <code>HeroDetailComponent</code> 的模板中使用 Bootstrap 中的 CSS 类。请把 <code>bootstrap</code> 的<em>CSS 样式表文件</em>添加到 <code>style.css</code> 的头部：</p><p translation-origin="off">To use the bootstrap CSS classes that are in the template HTML of both the <code>AppComponent</code> and the <code>HeroDetailComponent</code>,
add the <code>bootstrap</code> CSS stylesheet to the head of <code>styles.css</code>:</p>

<code-example path="reactive-forms/src/styles.1.css" title="styles.css" linenums="false" ng-version="6.0.0"><div style="display: none">
@import url('https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css');


</div><!----><header class="ng-star-inserted">styles.css</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from styles.css">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@import</span><span class="pln"> url</span><span class="pun">(</span><span class="str">'https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css'</span><span class="pun">);</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这些做好之后，启动应用服务器：</p><p translation-origin="off">Now that everything is wired up, serve the app with:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng serve

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng serve</span></code>
    </pre></aio-code></code-example>
<p translation-result="">浏览器应该显示成这样：</p><p translation-origin="off">The browser should display something like this:</p>

<figure>
  <img src="./Angular - 响应式表单_files/just-formcontrol.png" alt="Single FormControl" width="400" height="133">
</figure>
<a id="formgroup"></a>
<h2 translation-result="" id="add-a-formgroup">添加 FormGroup<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#add-a-formgroup"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="add-a-formgroup">Add a FormGroup<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#add-a-formgroup"><i class="material-icons">link</i></a></h2>

<p translation-result="">通常，如果有多个 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>，你要把它们都注册进一个父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中。
只要把它添加到 <code>hero-detail.component.ts</code> 的 <code>imports</code> 区就可以了。</p><p translation-origin="off">Usually, if you have multiple <code>FormControls</code>, you register
them within a parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.
To add a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, add it to the imports section
of <code>hero-detail.component.ts</code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-2.component.ts" region="imports" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> } from '@angular/forms';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="typ">FormControl</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在这个类中，把 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 包裹进了一个名叫 <code>heroForm</code> 的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中，代码如下：</p><p translation-origin="off">In the class, wrap the <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> in a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> called <code>heroForm</code> as follows:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-2.component.ts" region="v2" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent2 {
  heroForm = new <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> ({
    name: new <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>()
  });
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent2</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pln"> </span><span class="pun">({</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="typ">FormControl</span></a><span class="pun">()</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">现在你改完了这个类，该把它映射到模板中了。把 <code>hero-detail.component.html</code> 改成这样：</p><p translation-origin="off">Now that you've made changes in the class, they need to be reflected in the
template. Update <code>hero-detail.component.html</code> by replacing it with the following.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-2.component.html" region="basic-form" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h2&gt;Hero Detail&lt;/h2&gt;
&lt;h3&gt;&lt;i&gt;<a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a> in <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>&lt;/i&gt;&lt;/h3&gt;
&lt;form [formGroup]="heroForm"&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Name:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="name"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
&lt;/form&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h2&gt;</span><span class="pln">Hero Detail</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
</span><span class="tag">&lt;h3&gt;&lt;i&gt;</span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="pln">FormControl</span></a><span class="pln"> in </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="pln">FormGroup</span></a><span class="tag">&lt;/i&gt;&lt;/h3&gt;</span><span class="pln">
</span><span class="tag">&lt;form</span><span class="pln"> [</span><span class="atn">formGroup</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"heroForm"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Name:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"name"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/form&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，现在单行输入框位于一个 <code>form</code> 元素中。</p><p translation-origin="off">Notice that now the single <code>&lt;input&gt;</code> is in a <code>&lt;form&gt;</code> element.</p>

<p translation-result=""><code>formGroup</code> 是一个响应式表单的指令，它拿到一个现有 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 实例，并把它关联到一个 HTML 元素上。
这种情况下，它关联到的是 <code>&lt;form&gt;</code> 元素上的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 实例 <code>heroForm</code>。</p><p translation-origin="off"><code>formGroup</code> is a reactive form directive that takes an existing
<code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> instance and associates it with an HTML element.
In this case, it associates the <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> you saved as
<code>heroForm</code> with the <code>&lt;form&gt;</code> element.</p>

<p translation-result="">由于现在有了一个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，因此你必须修改模板语法来把这个 <code>&lt;input&gt;</code> 关联到组件类中对应的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 上。
以前没有父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 的时候，<code>[formControl]="name"</code> 也能正常工作，因为该指令可以独立工作，也就是说，不在 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中时它也能用。
有了 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，<code>name</code> 这个 <code>&lt;input&gt;</code> 就需要再添加一个语法 <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>=name</code>，以便让它关联到类中正确的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 上。
这个语法告诉 Angular，查阅父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>（这里是 <code>heroForm</code>），然后在这个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中查阅一个名叫 <code>name</code> 的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>。</p><p translation-origin="off">Because the class now has a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, you must update the template
syntax for associating the <code>&lt;input&gt;</code> with the corresponding
<code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> in the component class.
Without a parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>,
<code>[formControl]="name"</code> worked earlier because that directive
can stand alone, that is, it works without being in a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.
With a parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, the <code>name</code> <code>&lt;input&gt;</code> needs the syntax
<code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>=name</code> in order to be associated
with the correct <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>
in the class. This syntax tells Angular to look for the parent
<code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, in this case <code>heroForm</code>, and then <em>inside</em> that group
to look for a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> called <code>name</code>.</p>

<a id="json"></a>
<h2 translation-result="" id="taking-a-look-at-the-form-model">表单模型概览<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#taking-a-look-at-the-form-model"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="taking-a-look-at-the-form-model">Taking a look at the form model<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#taking-a-look-at-the-form-model"><i class="material-icons">link</i></a></h2>

<p translation-result="">当用户在 <code>&lt;input&gt;</code> 中输入数据时，它的值就会进入这个<strong>表单模型</strong>。
要想知道表单模型是什么样的，请在 <code>hero-detail.component.html</code> 的 <code>&lt;form&gt;</code> 标签紧后面添加如下代码：</p><p translation-origin="off">When the user enters data into an <code>&lt;input&gt;</code>, the value
goes into the <strong><em>form model</em></strong>.
To see the form model, add the following line after the
closing <code>&lt;form&gt;</code> tag in the <code>hero-detail.component.html</code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-2.component.html" region="form-value-json" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;p&gt;<a href="https://angular.cn/api/forms/Form" class="code-anchor">Form</a> value: {{ heroForm.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a> }}&lt;/p&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;p&gt;</span><a href="https://angular.cn/api/forms/Form" class="code-anchor"><span class="pln">Form</span></a><span class="pln"> value: {{ heroForm.value | </span><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor"><span class="pln">json</span></a><span class="pln"> }}</span><span class="tag">&lt;/p&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>heroForm.value</code> 会返回表单模型。
用 <code><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">JsonPipe</a></code> 管道把这个模型以 JSON 格式渲染到浏览器中。</p><p translation-origin="off">The <code>heroForm.value</code> returns the <em>form model</em>.
Piping it through the <code><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">JsonPipe</a></code> renders the model as JSON in the browser:</p>

<figure>
  <img src="./Angular - 响应式表单_files/json-output.png" alt="JSON output" width="400" height="176">
</figure>
<p translation-result="">最初的 <code>name</code> 属性是个空字符串，在 <em>name</em> <code>&lt;input&gt;</code> 中输入之后，可以看到这些按键出现在了 JSON 中。</p><p translation-origin="off">The initial <code>name</code> property value is the empty string.
Type into the name <code>&lt;input&gt;</code> and watch the keystrokes appear in the JSON.</p>

<p translation-result="">在真实的应用中，表单很快就会变大。
<code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 能让表单开发和维护变得更简单。</p><p translation-origin="off">In real life apps, forms get big fast.
<code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> makes form development and maintenance easier.</p>

<a id="formbuilder"></a>
<h2 translation-result="" id="introduction-to-codeformbuildercode"><code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 简介<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#introduction-to-codeformbuildercode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="introduction-to-formbuilder">Introduction to <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#introduction-to-formbuilder"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 类能通过处理控件创建的细节问题来帮你减少重复劳动。</p><p translation-origin="off">The <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> class helps reduce repetition and
clutter by handling details of control creation for you.</p>

<p translation-result="">要使用 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code>，就要先把它导入到 <code>hero-detail.component.ts</code> 中。你可以删除 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>：</p><p translation-origin="off">To use <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code>, import it into <code>hero-detail.component.ts</code>. You can remove <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts" region="imports" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }              from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> } from '@angular/forms';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">              </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">遵循下列步骤来用 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 把 <code>HeroDetailComponent</code> 重构得更容易读写：</p><p translation-origin="off">Use it to refactor the <code>HeroDetailComponent</code> into something that's easier to read and write,
by following this plan:</p>

<ul>
<li>
<p translation-result=""> 明确把 <code>heroForm</code> 属性的类型声明为 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，稍后你会初始化它。</p><p translation-origin="off">Explicitly declare the type of the <code>heroForm</code> property to be <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>; you'll initialize it later.</p>

</li>
<li>
<p translation-result=""> 把 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 注入到构造函数中。</p><p translation-origin="off">Inject a <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> into the constructor.</p>

</li>
<li>
<p translation-result=""> 添加一个名叫 <code>createForm()</code> 的新方法，它会用 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 来定义 <code>heroForm</code>。</p><p translation-origin="off">Add a new method that uses the <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> to define the <code>heroForm</code>; call it <code>createForm()</code>.</p>

</li>
<li>
<p translation-result=""> 在构造函数中调用 <code>createForm()</code>。</p><p translation-origin="off">Call <code>createForm()</code> in the constructor.</p>

</li>
</ul>
<p translation-result="">修改过的 <code>HeroDetailComponent</code> 代码如下：</p><p translation-origin="off">The revised <code>HeroDetailComponent</code> looks like this:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-3a.component.ts" region="v3a" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent3 {
  heroForm: <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>; // &lt;--- heroForm is of type <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>

  constructor(private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>) { // &lt;--- inject <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>
    this.createForm();
  }

  createForm() {
    this.heroForm = this.fb.group({
      name: '', // &lt;--- the <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a> called "name"
    });
  }
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent3</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroForm</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">;</span><span class="pln"> </span><span class="com">// &lt;--- heroForm is of type </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="com">FormGroup</span></a><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> fb</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="com">// &lt;--- inject </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="com">FormBuilder</span></a><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">createForm</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  createForm</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
      name</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="com">// &lt;--- the </span><a href="https://angular.cn/api/forms/FormControl" class="code-anchor"><span class="com">FormControl</span></a><span class="com"> called "name"</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>FormBuilder.group</code> 是一个用来创建 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 的工厂方法，它接受一个对象，对象的键和值分别是 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的名字和它的定义。
在这个例子中，<code>name</code> 控件的初始值是空字符串。</p><p translation-origin="off"><code>FormBuilder.group</code> is a factory method that creates a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>. &nbsp;
<code>FormBuilder.group</code> takes an object whose keys and values are <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> names and their definitions.
In this example, the <code>name</code> control is defined by its initial data value, an empty string.</p>

<p translation-result="">把一组控件定义在一个单一对象中，可以让你的代码更加紧凑、易读。
因为你不必写一系列重复的 <code>new <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>(...)</code> 语句。</p><p translation-origin="off">Defining a group of controls in a single object makes your code more compact and readable because you don't have to write repeated <code>new <a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a>(...)</code> statements.</p>

<a id="validators"></a>
<h3 translation-origin="off" id="validatorsrequired"><code>Validators.required</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#validatorsrequired"><i class="material-icons">link</i></a></h3>
<p translation-result="">虽然本章不会深入讲解验证机制，但还是有一个例子来示范如何简单的在响应式表单中使用 <code>Validators.required</code>。</p><p translation-origin="off">Though this guide doesn't go deeply into validations, here is one example that
demonstrates the simplicity of using <code>Validators.required</code> in reactive forms.</p>

<p translation-result="">首先，导入 <code><a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a></code> 符号。</p><p translation-origin="off">First, import the <code><a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a></code> symbol.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-3.component.ts" region="imports" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }                          from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>, <a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a> } from '@angular/forms';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">                          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/Validators" class="code-anchor"><span class="typ">Validators</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">要想让 <code>name</code> 这个 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 是必须的，请把 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中的 <code>name</code> 属性改为一个数组。第一个条目是 <code>name</code> 的初始值，第二个是 <code>required</code> 验证器：<code>Validators.required</code>。</p><p translation-origin="off">To make the <code>name</code> <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> required, replace the <code>name</code>
property in the <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> with an array.
The first item is the initial value for <code>name</code>;
the second is the required validator, <code>Validators.required</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-3.component.ts" region="required" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result="">响应式验证器是一些简单、可组合的函数。
在模板驱动表单中配置验证器有些困难，因为你必须把验证器包装进指令中。</p><p translation-origin="off">Reactive validators are simple, composable functions.
Configuring validation is different in template-driven forms in that you must wrap validators in a directive.</p>

</div>
<p translation-result="">修改模板底部的诊断信息，以显示表单的有效性状态。</p><p translation-origin="off">Update the diagnostic message at the bottom of the template to display the form's validity status.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-3.component.html" region="form-value-json" title="src/app/hero-detail/hero-detail.component.html (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;p&gt;<a href="https://angular.cn/api/forms/Form" class="code-anchor">Form</a> value: {{ heroForm.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a> }}&lt;/p&gt;
&lt;p&gt;<a href="https://angular.cn/api/forms/Form" class="code-anchor">Form</a> status: {{ heroForm.status | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a> }}&lt;/p&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;p&gt;</span><a href="https://angular.cn/api/forms/Form" class="code-anchor"><span class="pln">Form</span></a><span class="pln"> value: {{ heroForm.value | </span><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor"><span class="pln">json</span></a><span class="pln"> }}</span><span class="tag">&lt;/p&gt;</span><span class="pln">
</span><span class="tag">&lt;p&gt;</span><a href="https://angular.cn/api/forms/Form" class="code-anchor"><span class="pln">Form</span></a><span class="pln"> status: {{ heroForm.status | </span><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor"><span class="pln">json</span></a><span class="pln"> }}</span><span class="tag">&lt;/p&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">浏览器会显示下列内容：</p><p translation-origin="off">The browser displays the following:</p>

<figure>
  <img src="./Angular - 响应式表单_files/validators-json-output.png" alt="Single FormControl" width="400" height="223">
</figure>
<p translation-result=""><code>Validators.required</code> 生效了，但状态还是 <code>INVALID</code>，因为输入框中还没有值。
在输入框中输入，就会看到这个状态从 <code>INVALID</code> 变成了 <code>VALID</code>。</p><p translation-origin="off"><code>Validators.required</code> is working. The status is <code>INVALID</code> because the <code>&lt;input&gt;</code> has no value.
Type into the <code>&lt;input&gt;</code> to see the status change from <code>INVALID</code> to <code>VALID</code>.</p>

<p translation-result="">在真实的应用中，你要把这些诊断信息替换成用户友好的信息。</p><p translation-origin="off">In a real app, you'd replace the diagnosic message with a user-friendly experience.</p>

<p translation-result="">在本章的其余部分，<code>Validators.required</code> 是可有可无的，但在每个与此范例配置相同的范例中都会保留它。</p><p translation-origin="off">Using <code>Validators.required</code> is optional for the rest of the guide.
It remains in each of the following examples with the same configuration.</p>

<p translation-result="">要了解 Angular 表单验证器的更多知识，参见<a href="https://angular.cn/guide/form-validation">表单验证器</a>一章。</p><p translation-origin="off">For more on validating Angular forms, see the
<a href="https://angular.cn/guide/form-validation">Form Validation</a> guide.</p>

<h3 translation-result="" id="more-codeformcontrolcodes">更多的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#more-codeformcontrolcodes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="more-formcontrols">More <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>s<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#more-formcontrols"><i class="material-icons">link</i></a></h3>

<p translation-result="">本节要添加一些 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>，用来表示住址、一项超能力，和一个副手。</p><p translation-origin="off">This section adds additional <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>s for the address, a super power, and a sidekick.</p>

<p translation-result="">另外，住址中有一个所在州属性，用户将会从 <code>&lt;select&gt;</code> 框中选择一个州，你会用 <code>&lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;</code> 元素渲染各个州。从 <code>data-model.ts</code> 中导入 <code>states</code>（州列表）。</p><p translation-origin="off">Additionally, the address has a state property. The user will select a state with a <code>&lt;select&gt;</code> and you'll populate
the <code>&lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;</code> elements with states. So import <code>states</code> from <code>data-model.ts</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-4.component.ts" region="imports" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> }                          from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>, <a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a> } from '@angular/forms';

import { states } from '../data-model';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">                          </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/Validators" class="code-anchor"><span class="typ">Validators</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> states </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../data-model'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">声明 <code>states</code> 属性并往 <code>heroForm</code> 中添加一些表示住址的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>，代码如下：</p><p translation-origin="off">Declare the <code>states</code> property and add some address <code>FormControls</code> to the <code>heroForm</code> as follows.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-4.component.ts" region="v4" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent4 {
  heroForm: <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>;
  states = states;

  constructor(private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>) {
    this.createForm();
  }

  createForm() {
    this.heroForm = this.fb.group({
      name: ['', Validators.required ],
      street: '',
      city: '',
      <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: '',
      zip: '',
      power: '',
      sidekick: ''
    });
  }
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent4</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroForm</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">;</span><span class="pln">
  states </span><span class="pun">=</span><span class="pln"> states</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> fb</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">createForm</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  createForm</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
      name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
      street</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      city</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">然后把下列代码添加到 <code>hero-detail.component.html</code> 文件中。</p><p translation-origin="off">Then add corresponding markup in <code>hero-detail.component.html</code> as follows.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-4.component.html" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h2&gt;Hero Detail&lt;/h2&gt;
&lt;h3&gt;&lt;i&gt;A <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> with <a href="https://angular.cn/api/forms/SelectMultipleControlValueAccessor" class="code-anchor">multiple</a> FormControls&lt;/i&gt;&lt;/h3&gt;
&lt;form [formGroup]="heroForm"&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Name:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="name"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Street:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="street"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;City:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="city"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;State:
      &lt;select class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;
          &lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a> of states" [value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;{{<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>}}&lt;/<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;
      &lt;/select&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Zip Code:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="zip"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group radio"&gt;
    &lt;h4&gt;Super power:&lt;/h4&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="flight"&gt;Flight&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="x-ray vision"&gt;X-ray vision&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="strength"&gt;Strength&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="checkbox"&gt;
    &lt;label class="center-block"&gt;
      &lt;input type="checkbox" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="sidekick"&gt;I have <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> sidekick.
    &lt;/label&gt;
  &lt;/div&gt;
&lt;/form&gt;


&lt;p&gt;<a href="https://angular.cn/api/forms/Form" class="code-anchor">Form</a> value: {{ heroForm.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a> }}&lt;/p&gt;


</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h2&gt;</span><span class="pln">Hero Detail</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
</span><span class="tag">&lt;h3&gt;&lt;i&gt;</span><span class="pln">A </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="pln">FormGroup</span></a><span class="pln"> with </span><a href="https://angular.cn/api/forms/SelectMultipleControlValueAccessor" class="code-anchor"><span class="pln">multiple</span></a><span class="pln"> FormControls</span><span class="tag">&lt;/i&gt;&lt;/h3&gt;</span><span class="pln">
</span><span class="tag">&lt;form</span><span class="pln"> [</span><span class="atn">formGroup</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"heroForm"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Name:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"name"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Street:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"street"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">City:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"city"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">State:
      </span><span class="tag">&lt;select</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
          </span><span class="tag">&lt;</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv"> of states"</span><span class="pln"> [</span><span class="atn">value</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">{{</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pln">}}</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;/select&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Zip Code:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"zip"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group radio"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;h4&gt;</span><span class="pln">Super power:</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"flight"</span><span class="tag">&gt;</span><span class="pln">Flight</span><span class="tag">&lt;/label&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"x-ray vision"</span><span class="tag">&gt;</span><span class="pln">X-ray vision</span><span class="tag">&lt;/label&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"strength"</span><span class="tag">&gt;</span><span class="pln">Strength</span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"sidekick"</span><span class="tag">&gt;</span><span class="pln">I have </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> sidekick.
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/form&gt;</span><span class="pln">


</span><span class="tag">&lt;p&gt;</span><a href="https://angular.cn/api/forms/Form" class="code-anchor"><span class="pln">Form</span></a><span class="pln"> value: {{ heroForm.value | </span><a href="https://angular.cn/api/common/JsonPipe" class="code-anchor"><span class="pln">json</span></a><span class="pln"> }}</span><span class="tag">&lt;/p&gt;</span></code>
    </pre></aio-code></code-example>
<div class="alert is-helpful">
<p translation-result=""><em>注意</em>：不用管这些脚本中提到的 <code>form-group</code>、<code>form-control</code>、<code>center-block</code> 和 <code>checkbox</code> 等。
它们是来自 <em>Bootstrap</em> 的 CSS 类，Angular 本身不会管它们。
注意 <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a></code> 和 <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code> 属性。
他们是 Angular 指令，用于把相应的 HTML 控件绑定到组件中的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 和 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 类型的属性上。</p><p translation-origin="off"><em>Note</em>: Ignore the many mentions of <code>form-group</code>,
<code>form-control</code>, <code>center-block</code>, and <code>checkbox</code> in this markup.
Those are <em>bootstrap</em> CSS classes that Angular itself ignores.
Pay attention to the <code>[formGroup]</code> and <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code> attributes.
They are the Angular directives that bind the HTML controls to the
Angular <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> and <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> properties in the component class.</p>

</div>
<p translation-result="">修改过的模板包含更多文本输入框，一个 <code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code> 选择框，<code>power</code>（超能力）的单选按钮和一个 <code>sidekick</code> 检查框。</p><p translation-origin="off">The revised template includes more text <code>&lt;input&gt;</code> elements, a <code>&lt;select&gt;</code> for the <code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code>, radio buttons for the <code>power</code>,
and a <code>&lt;checkbox&gt;</code> for the <code>sidekick</code>.</p>

<p translation-result="">你要用 <code>[value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"</code> 来绑定 <code>&lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;</code> 的 <code>value</code> 属性。
如果不绑定这个值，这个选择框就会显示来自数据模型中的第一个选项。</p><p translation-origin="off">You must bind the value property of the <code>&lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;</code> with <code>[value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"</code>.
If you do not bind the value, the select shows the first option from the data model.</p>

<p translation-result="">组件<em>类</em>定义了控件属性而不用管它们在模板中的表现形式。
你可以像定义 <code>name</code> 控件一样定义 <code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code>、<code>power</code> 和 <code>sidekick</code> 控件，并用 <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code> 指令来指定 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的名字。</p><p translation-origin="off">The component <em>class</em> defines control properties without regard for their representation in the template.
You define the <code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code>, <code>power</code>, and <code>sidekick</code> controls the same way you defined the <code>name</code> control.
You tie these controls to the template HTML elements in the same way,
specifying the <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> name with the <code><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a></code> directive.</p>

<p translation-result="">参见 API 参考手册中的<a href="https://angular.cn/api/forms/RadioControlValueAccessor" title="API: RadioControlValueAccessor">radio buttons</a>、
<a href="https://angular.cn/api/forms/SelectControlValueAccessor" title="API: SelectControlValueAccessor">selects</a>和
<a href="https://angular.cn/api/forms/CheckboxControlValueAccessor" title="API: CheckboxControlValueAccessor">checkboxes</a></p><p translation-origin="off">See the API reference for more information about
<a href="https://angular.cn/api/forms/RadioControlValueAccessor" title="API: RadioControlValueAccessor">radio buttons</a>,
<a href="https://angular.cn/api/forms/SelectControlValueAccessor" title="API: SelectControlValueAccessor">selects</a>, and
<a href="https://angular.cn/api/forms/CheckboxControlValueAccessor" title="API: CheckboxControlValueAccessor">checkboxes</a>.</p>

<a id="grouping"></a>
<h3 translation-result="" id="nested-formgroups">多级 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#nested-formgroups"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="nested-formgroups">Nested FormGroups<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#nested-formgroups"><i class="material-icons">link</i></a></h3>

<p translation-result="">要想更有效的管理这个表单的大小，你可以把一些相关的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 组织到多级 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中。
比如，<code>street</code>、<code>city</code>、<code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code> 和 <code>zip</code> 就可以作为一个名叫 <code>address</code> 的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中的理想属性。
用这种方式，多级表单组和控件可以让你轻松地映射多层结构的数据模型，以帮你跟踪这组相关控件的有效性和状态。</p><p translation-origin="off">To manage the size of the form more effectively, you can group some of the related <code>FormControls</code>
into a nested <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>. For example, the <code>street</code>, <code>city</code>, <code><a href="https://angular.cn/api/animations/state" class="code-anchor">state</a></code>, and <code>zip</code> are ideal properties for an address <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.
Nesting groups and controls in this way allows you to
mirror the hierarchical structure of the data model
and helps track validation and state for related sets of controls.</p>

<p translation-result="">你用 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 在这个名叫 <code>heroForm</code> 的组件中创建一个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，并把它用作父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。
再次使用 <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> 创建一个子级 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，其中包括这些住址控件。把结果赋值给父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中新的 <code>address</code> 属性。</p><p translation-origin="off">You used the <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> to create one <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> in this component called <code>heroForm</code>.
Let that be the parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.
Use <code><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a></code> again to create a child <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> that encapsulates the <code>address</code> controls;
assign the result to a new <code>address</code> property of the parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-5.component.ts" region="v5" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent5 {
  heroForm: <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>;
  states = states;

  constructor(private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>) {
    this.createForm();
  }

  createForm() {
    this.heroForm = this.fb.group({ // &lt;-- the parent <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>
      name: ['', Validators.required ],
      address: this.fb.group({ // &lt;-- the child <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>
        street: '',
        city: '',
        <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: '',
        zip: ''
      }),
      power: '',
      sidekick: ''
    });
  }
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent5</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroForm</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">;</span><span class="pln">
  states </span><span class="pun">=</span><span class="pln"> states</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> fb</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">createForm</span><span class="pun">();</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  createForm</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln"> </span><span class="com">// &lt;-- the parent </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="com">FormGroup</span></a><span class="pln">
      name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
      address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln"> </span><span class="com">// &lt;-- the child </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="com">FormGroup</span></a><span class="pln">
        street</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        city</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
        zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
      </span><span class="pun">}),</span><span class="pln">
      power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
      sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
    </span><span class="pun">});</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">当你修改组件类中表单控件的结构时，还必须对组件模板进行相应的调整。</p><p translation-origin="off">When you change the structure of the form controls in the component class,
you must make corresponding adjustments to the component template.</p>

<p translation-result="">在 <code>hero-detail.component.html</code> 中，把与住址有关的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 包裹进一个 <code>div</code> 中。
往这个 <code>&lt;div&gt;</code> 上添加一个 <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a></code> 指令，并且把它绑定到 <code>"address"</code> 上。
这个 <code>address</code> 属性是一个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，它的父 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 就是 <code>heroForm</code>。
把这个 <code>name</code> <code>&lt;input&gt;</code> 留在此 <code>&lt;div&gt;</code> 中。</p><p translation-origin="off">In <code>hero-detail.component.html</code>, wrap the address-related <code>FormControls</code> in a <code>&lt;div&gt;</code>.
Add a <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a></code> directive to the <code>div</code> and bind it to <code>"address"</code>.
That's the property of the <code>address</code> child <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> within the parent <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> called <code>heroForm</code>. Leave the <code>&lt;div&gt;</code> with the <code>name</code> <code>&lt;input&gt;</code>.</p>

<p translation-result="">要让这个变化更加明显，在文本的顶部加入一个 <code>&lt;h4&gt;</code> 头：<em>Secret Lair</em>。
新的住址组的 HTML 如下：</p><p translation-origin="off">To make this change visually obvious, add an <code>&lt;h4&gt;</code> header near the top with the text, <em>Secret Lair</em>.
The new address HTML looks like this:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-5.component.html" region="add-group" title="src/app/hero-detail/hero-detail.component.html (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;div <a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>="address" class="well well-lg"&gt;
  &lt;h4&gt;Secret Lair&lt;/h4&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Street:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="street"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;City:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="city"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;State:
      &lt;select class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;
        &lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a> of states" [value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;{{<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>}}&lt;/<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;
      &lt;/select&gt;
    &lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="form-group"&gt;
    &lt;label class="center-block"&gt;Zip Code:
      &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="zip"&gt;
    &lt;/label&gt;
  &lt;/div&gt;
&lt;/div&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor"><span class="atn">formGroupName</span></a><span class="pun">=</span><span class="atv">"address"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"well well-lg"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;h4&gt;</span><span class="pln">Secret Lair</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Street:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"street"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">City:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"city"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">State:
      </span><span class="tag">&lt;select</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
        </span><span class="tag">&lt;</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv"> of states"</span><span class="pln"> [</span><span class="atn">value</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">{{</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pln">}}</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;/select&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Zip Code:
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"zip"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">做完这些之后，浏览器中的 JSON 输出就变成了带有多级 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 的表单模型。</p><p translation-origin="off">After these changes, the JSON output in the browser shows the revised form model
with the nested address <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>:</p>

<figure>
  <img src="./Angular - 响应式表单_files/address-group.png" alt="JSON output" width="400" height="55">
</figure>
<p translation-result="">这时模板和表单模型在彼此通讯了。</p><p translation-origin="off">This shows that the template
and the form model are talking to one another.</p>

<a id="properties"></a>
<h2 translation-result="" id="inspect-codeformcontrolcode-properties">查看 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的属性<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#inspect-codeformcontrolcode-properties"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="inspect-formcontrol-properties">Inspect <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> Properties<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#inspect-formcontrol-properties"><i class="material-icons">link</i></a></h2>

<p translation-result="">你可以使用 <code>.get()</code> 方法来提取表单中一个单独 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的状态。
你可以在组件类中这么做，或者通过往模板中添加下列代码来把它显示在页面中，就添加在 <code>{{form.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a>}}</code> 插值表达式的紧后面：</p><p translation-origin="off">You can inspect an individual <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> within a form by extracting it with the <code>get()</code> method.
You can do this within the component class or display it on the
page by adding the following to the template,
immediately after the <code>{{form.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a>}}</code> interpolation as follows:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-5.component.html" region="inspect-value" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;p&gt;Name value: {{ heroForm.get('name').value }}&lt;/p&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;p&gt;</span><span class="pln">Name value: {{ heroForm.get('name').value }}</span><span class="tag">&lt;/p&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">要点取得 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中的 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的状态，使用点语法来指定到控件的路径。</p><p translation-origin="off">To get the state of a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> that’s inside a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, use dot notation to traverse to the control.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-5.component.html" region="inspect-child-control" title="src/app/hero-detail/hero-detail.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;p&gt;Street value: {{ heroForm.get('address.street').value}}&lt;/p&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;p&gt;</span><span class="pln">Street value: {{ heroForm.get('address.street').value}}</span><span class="tag">&lt;/p&gt;</span></code>
    </pre></aio-code></code-example>
<div class="alert is-helpful">
<p translation-result=""><em>注意</em>：如果你正在边看边跟着写代码，当你到达 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 那节时，别忘了移除到 <code>address.street</code> 的引用。那一节中，你要在组件类中修改这个地址的名字，如果你把它留在模板中，就会抛出一个错误。</p><p translation-origin="off"><em>Note</em>: If you're coding along, remember to remove this reference to <code>address.street</code> when you get to the section on <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>. In that section, you change the name of address in the component class and it will throw an error if you leave it in the template.</p>

</div>
<p translation-result="">你可以使用此技术来显示 <code>FromControl</code> 的任意属性，代码如下：</p><p translation-origin="off">You can use this technique to display any property of a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>
such as one of the following:</p>

<style>
  td, th {vertical-align: top}
</style>
<table width="100%">
  <colgroup><col width="10%">
  
  <col width="90%">
  
  </colgroup><tbody><tr>
    <th>
<p translation-result="">      属性</p><p translation-origin="off">      Property</p>

    </th>
    <th>
<p translation-result="">      说明</p><p translation-origin="off">      Description</p>

    </th>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>myControl.value</code></p>
    </td>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的值。</p><p translation-origin="off">      the value of a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>myControl.status</code></p>
    </td>
    <td>
<p translation-result="">      <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的有效性。可能的值有 <code>VALID</code>、<code>INVALID</code>、<code>PENDING</code> 或 <code>DISABLED</code>。</p><p translation-origin="off">      the validity of a <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>. Possible values: <code>VALID</code>,
<code>INVALID</code>, <code>PENDING</code>, or <code>DISABLED</code>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>myControl.pristine</code></p>
    </td>
    <td>
<p translation-result="">      如果用户<em>尚未</em>改变过这个控件的值，则为 <code>true</code>。它总是与 <code>myControl.dirty</code> 相反。</p><p translation-origin="off">      <code>true</code> if the user has <em>not</em> changed the value in the UI.
Its opposite is <code>myControl.dirty</code>.</p>

    </td>
  </tr>
  <tr>
    <td>
<p translation-origin="off">      <code>myControl.untouched</code></p>
    </td>
    <td>
<p translation-result="">      如果用户尚未进入这个 HTML 控件，也没有触发过它的 <code>blur</code>（失去焦点）事件，则为 <code>true</code>。
它是 <code>myControl.touched</code> 的反义词。</p><p translation-origin="off">      <code>true</code> if the control user has not yet entered the HTML control
and triggered its blur event. Its opposite is <code>myControl.touched</code>.</p>

    </td>
  </tr>
</tbody></table>
<p translation-result="">要了解 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的更多属性，参见 API 参考手册的<a href="https://angular.cn/api/forms/AbstractControl"><em>AbstractControl</em></a>部分。</p><p translation-origin="off">Read about other <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> properties in the
<a href="https://angular.cn/api/forms/AbstractControl"><em>AbstractControl</em></a> API reference.</p>

<p translation-result="">检查 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 属性的另一个原因是确保用户输入了有效的值。
要了解更多关于 Angular 表单验证的知识，参见<a href="https://angular.cn/guide/form-validation">表单验证</a>一章。</p><p translation-origin="off">One common reason for inspecting <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> properties is to
make sure the user entered valid values.
Read more about validating Angular forms in the
<a href="https://angular.cn/guide/form-validation">Form Validation</a> guide.</p>

<a id="data-model-form-model"></a>
<h2 translation-result="" id="the-data-model-and-the-form-model">数据模型与表单模型<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#the-data-model-and-the-form-model"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="the-data-model-and-the-form-model">The data model and the form model<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#the-data-model-and-the-form-model"><i class="material-icons">link</i></a></h2>

<p translation-result="">此刻，表单显示的是空值。
<code>HeroDetailComponent</code> 应该显示一个英雄的值，这个值可能接收自远端服务器。</p><p translation-origin="off">At the moment, the form is displaying empty values.
The <code>HeroDetailComponent</code> should display values of a hero,
possibly a hero retrieved from a remote server.</p>

<p translation-result="">在这个应用中，<code>HeroDetailComponent</code> 从它的父组件 <code>HeroListComponent</code> 中取得一个英雄。</p><p translation-origin="off">In this app, the <code>HeroDetailComponent</code> gets its hero from a parent <code>HeroListComponent</code>.</p>

<p translation-result="">来自服务器的 <code>hero</code> 就是<strong>数据模型</strong>，而 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 的结构就是<strong>表单模型</strong>。</p><p translation-origin="off">The <code>hero</code> from the server is the <strong><em>data model</em></strong>.
The <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> structure is the <strong><em>form model</em></strong>.</p>

<p translation-result="">组件必须把数据模型中的英雄值复制到表单模型中。这里隐含着两个非常重要的点。</p><p translation-origin="off">The component must copy the hero values in the data model into the form model.
There are two important implications:</p>

<ol>
<li>
<p translation-result="">   开发人员必须理解数据模型是如何映射到表单模型中的属性的。</p><p translation-origin="off">The developer must understand how the properties of the data model
map to the properties of the form model.</p>

</li>
<li>
<p translation-result="">用户修改时的数据流是从 DOM 元素流向表单模型的，而不是数据模型。</p><p translation-origin="off">User changes flow from the DOM elements to the form model, not to the data model.</p>

</li>
</ol>
<p translation-result="">表单控件永远不会修改<em>数据模型</em>。</p><p translation-origin="off">The form controls never update the <em>data model</em>.</p>

<p translation-result="">表单模型和数据模型的结构并不需要精确匹配。在一个特定的屏幕上，你通常只会展现数据模型的一个子集。
但是表单模型的形态越接近数据模型，事情就会越简单。</p><p translation-origin="off">The form and data model structures don't need to match exactly.
You often present a subset of the data model on a particular screen.
But it makes things easier if the shape of the form model is close to the shape of the data model.</p>

<p translation-result="">在 <code>HeroDetailComponent</code> 中，这两个模型是非常接近的。</p><p translation-origin="off">In this <code>HeroDetailComponent</code>, the two models are quite close.</p>

<p translation-result="">回忆一下 <code>data-model.ts</code> 中 <code>Hero</code> 和 <code>Address</code> 的 定义：</p><p translation-origin="off">Here are the definitions of <code>Hero</code> and <code>Address</code> in <code>data-model.ts</code>:</p>

<code-example path="reactive-forms/src/app/data-model.ts" region="model-classes" title="src/app/data-model.ts (classes)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class Hero {
  id = 0;
  name = '';
  addresses: Address[];
}

export class Address {
  street = '';
  city   = '';
  <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>  = '';
  zip    = '';
}

</div><!----><header class="ng-star-inserted">src/app/data-model.ts (classes)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/data-model.ts (classes)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  id </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln">
  name </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  addresses</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">[];</span><span class="pln">
</span><span class="pun">}</span><span class="pln">

</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">Address</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  street </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  city   </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pln">  </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
  zip    </span><span class="pun">=</span><span class="pln"> </span><span class="str">''</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里又是组件的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 定义。</p><p translation-origin="off">Here, again, is the component's <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> definition.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-6.component.ts" region="hero-form-model" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  address: this.fb.group({
    street: '',
    city: '',
    <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: '',
    zip: ''
  }),
  power: '',
  sidekick: ''
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
  address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
    street</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
    city</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
    </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
    zip</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
  </span><span class="pun">}),</span><span class="pln">
  power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
  sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在这些模型中有两点显著的差异：</p><p translation-origin="off">There are two significant differences between these models:</p>

<ol>
<li>
<p translation-result=""><code>Hero</code> 有一个 <code>id</code>。表单模型中则没有，因为你通常不会把主键展示给用户。</p><p translation-origin="off">The <code>Hero</code> has an <code>id</code>. The form model does not because you generally don't show primary keys to users.</p>

</li>
<li>
<p translation-result="">   <code>Hero</code> 有一个住址数组。这个表单模型只表示了一个住址，稍后的 <a href="https://angular.cn/guide/reactive-forms#form-array" title="Form arrays"><code>FormArray</code></a>则可以表示多个。</p><p translation-origin="off">The <code>Hero</code> has an array of addresses. This form model presents only one address,
which is covered in the section on <a href="https://angular.cn/guide/reactive-forms#form-array" title="Form arrays"><code>FormArray</code></a> below.</p>

</li>
</ol>
<p translation-result="">保持这两个模型的形态尽可能接近，可以在下一节中轻松使用 <code>patchValue()</code> 和 <code>setValue()</code> 方法把数据模型拷贝到表单模型中。</p><p translation-origin="off">Keeping the two models close in shape facilitates copying the data model properties
to the form model with the <code>patchValue()</code> and <code>setValue()</code> methods in the next section.</p>

<p translation-result="">首先把 <code>address</code> 这个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 的定义重构成这样：</p><p translation-origin="off">First, refactor the <code>address</code> <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> definition as follows:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="address-form-group" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  address: this.fb.group(new Address()), // &lt;-- <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> with <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new address
  power: '',
  sidekick: ''
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
  address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()),</span><span class="pln"> </span><span class="com">// &lt;-- </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="com">FormGroup</span></a><span class="com"> with </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new address</span><span class="pln">
  power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
  sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">为了确保从 <code>data-model</code> 中导入，你可以引用 <code>Hero</code> 和 <code>Address</code> 类：</p><p translation-origin="off">Also be sure to update the <code>import</code> from <code>data-model</code> so you can reference the <code>Hero</code> and <code>Address</code> classes:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="import-address" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { Address, Hero, states } from '../data-model';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">,</span><span class="pln"> states </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../data-model'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<a id="set-data"></a>
<h2 translation-result="" id="populate-the-form-model-with-codesetvaluecode-and-codepatchvaluecode">使用 <code>setValue()</code> 和 <code>patchValue()</code> 来操纵表单模型<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#populate-the-form-model-with-codesetvaluecode-and-codepatchvaluecode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="populate-the-form-model-with-setvalue-and-patchvalue">Populate the form model with <code>setValue()</code> and <code>patchValue()</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#populate-the-form-model-with-setvalue-and-patchvalue"><i class="material-icons">link</i></a></h2>

<div class="alert is-helpful">
<p translation-result=""><em>注意</em>：如果你正在跟着写代码，那么本节是可选的，因为剩下的步骤并不依赖它。</p><p translation-origin="off"><em>Note</em>: If you're coding along, this section is optional as the rest of the steps do not rely on it.</p>

</div>
<p translation-result="">以前，你创建了控件，并同时初始化它的值。
你也可以稍后用 <code>setValue()</code> 和 <code>patchValue()</code> 来初始化或重置这些值。</p><p translation-origin="off">Previously, you created a control and initialized its value at the same time.
You can also initialize or reset the values later with the
<code>setValue()</code> and <code>patchValue()</code> methods.</p>

<h3 translation-origin="off" id="setvalue"><code>setValue()</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#setvalue"><i class="material-icons">link</i></a></h3>
<p translation-result="">借助<strong><code>setValue()</code></strong>，你可以设置每个表单控件的值，只要把与表单模型的属性精确匹配的数据模型传进去就可以了。</p><p translation-origin="off">With <code>setValue()</code>, you assign every form control value at once
by passing in a data object whose properties exactly match the form model behind the <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="set-value" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
  this.heroForm.setValue({
   name:    this.hero.name,
   address: this.hero.addresses[0] || new Address()
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="pln">setValue</span><span class="pun">({</span><span class="pln">
   name</span><span class="pun">:</span><span class="pln">    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">name</span><span class="pun">,</span><span class="pln">
   address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">addresses</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>setValue()</code> 方法会在赋值给任何表单控件之前先检查数据对象的值。</p><p translation-origin="off">The <code>setValue()</code> method checks the data object thoroughly before assigning any form control values.</p>

<p translation-result="">它不会接受一个与 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 结构不同或缺少表单组中任何一个控件的数据对象。
这种方式下，如果你有什么拼写错误或控件嵌套的不正确，它就能返回一些有用的错误信息。
反之，<code>patchValue()</code> 会默默地失败。</p><p translation-origin="off">It will not accept a data object that doesn't match the <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> structure or is
missing values for any control in the group. This way, it can return helpful
error messages if you have a typo or if you've nested controls incorrectly.
Conversely, <code>patchValue()</code> will fail silently.</p>

<p translation-result="">注意，你几乎可以直接把这个 <code>hero</code> 用作 <code>setValue()</code> 的参数，因为它的形态与组件的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 结构是非常像的。</p><p translation-origin="off">Notice that you can almost use the entire <code>hero</code> as the argument to <code>setValue()</code>
because its shape is similar to the component's <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> structure.</p>

<p translation-result="">你现在只能显示英雄的第一个住址，不过你还必须考虑 <code>hero</code> 完全没有住址的可能性。
就像这个在数据对象参数中对 <code>address</code> 属性进行有条件的设置：</p><p translation-origin="off">You can only show the hero's first address and you must account for the possibility that the <code>hero</code> has no addresses at all, as in the conditional setting of the <code>address</code> property in the data object argument:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="set-value-address" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
address: this.hero.addresses[0] || new Address()

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">addresses</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()</span></code>
    </pre></aio-code></code-example>
<h3 translation-origin="off" id="patchvalue"><code>patchValue()</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#patchvalue"><i class="material-icons">link</i></a></h3>
<p translation-result="">借助<strong><code>patchValue()</code></strong>，你可以通过提供一个只包含要更新的控件的键值对象来把值赋给 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中的指定控件。</p><p translation-origin="off">With <strong><code>patchValue()</code></strong>, you can assign values to specific controls in a <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>
by supplying an object of key/value pairs for them.</p>

<p translation-result="">这个例子只会设置表单的 <code>name</code> 控件。</p><p translation-origin="off">This example sets only the form's <code>name</code> control.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-6.component.ts" region="patch-value" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm.patchValue({
  name: this.hero.name
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="pln">patchValue</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">name
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">借助<strong><code>patchValue()</code></strong>，你可以更灵活地解决数据模型和表单模型之间的差异。
但是和 <code>setValue()</code> 不同，<code>patchValue()</code> 不会检查缺失的控件值，并且不会抛出有用的错误信息。</p><p translation-origin="off">With <code>patchValue()</code> you have more flexibility to cope with divergent data and form models.
But unlike <code>setValue()</code>,  <code>patchValue()</code> cannot check for missing control
values and doesn't throw helpful errors.</p>

<a id="hero-list"></a>
<h2 translation-result="" id="create-the-codeherolistcomponentcode-and-codeheroservicecode">创建 <code>HeroListComponent</code> 和 <code>HeroService</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-the-codeherolistcomponentcode-and-codeheroservicecode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="create-the-herolistcomponent-and-heroservice">Create the <code>HeroListComponent</code> and <code>HeroService</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#create-the-herolistcomponent-and-heroservice"><i class="material-icons">link</i></a></h2>

<p translation-result="">要更好地演示后面的响应式表单技巧，可以通过加入 <code>HeroListComponent</code> 和 <code>HeroService</code> 来为这个范例添加更多功能。</p><p translation-origin="off">To demonstrate further reactive forms techniques, it is helpful to add more functionality to the example by adding a <code>HeroListComponent</code> and a <code>HeroService</code>.</p>

<p translation-result=""><code>HeroDetalComponent</code> 是一个嵌套在 <code>HeroListComponent</code> 的<em>主从</em>视图中的子组件。如果把它们放在一起就是这样的：</p><p translation-origin="off">The <code>HeroDetailComponent</code> is a nested sub-component of the <code>HeroListComponent</code> in a <em>master/detail</em> view. Together they look like this:</p>

<figure>
  <img src="./Angular - 响应式表单_files/hero-list.png" alt="HeroListComponent" width="420" height="264">
</figure>
<p translation-result="">首先使用下列命令添加一个 <code>HeroListComponent</code>：</p><p translation-origin="off">First, add a <code>HeroListComponent</code> with the following command:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng generate component HeroList

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate component </span><span class="typ">HeroList</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把 <code>HeroListComponent</code> 修改为如下内容：</p><p translation-origin="off">Give the <code>HeroListComponent</code> the following contents:</p>

<code-example path="reactive-forms/src/app/hero-list/hero-list.component.ts" title="hero-list.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';
import { Observable }        from 'rxjs';
import { finalize } from 'rxjs/operators';

import { Hero }        from '../data-model';
import { HeroService } from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-list',
  templateUrl: './hero-list.component.html',
  styleUrls: ['./hero-list.component.css']
})
export class HeroListComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes: Observable&lt;Hero[]&gt;;
  isLoading = false;
  selectedHero: Hero;

  constructor(private heroService: HeroService) { }

  ngOnInit() { this.getHeroes(); }

  getHeroes() {
    this.isLoading = true;
    this.heroes = this.heroService.getHeroes()
                      // TODO: error handling
                      .pipe(finalize(() =&gt; this.isLoading = false));
    this.selectedHero = undefined;
  }

  select(hero: Hero) { this.selectedHero = hero; }
}


</div><!----><header class="ng-star-inserted">hero-list.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-list.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> finalize </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">}</span><span class="pln">        </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../data-model'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../hero.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="lit">Component</span></a><span class="pun">({</span><span class="pln">
  selector</span><span class="pun">:</span><span class="pln"> </span><span class="str">'app-hero-list'</span><span class="pun">,</span><span class="pln">
  templateUrl</span><span class="pun">:</span><span class="pln"> </span><span class="str">'./hero-list.component.html'</span><span class="pun">,</span><span class="pln">
  styleUrls</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">'./hero-list.component.css'</span><span class="pun">]</span><span class="pln">
</span><span class="pun">})</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnInit" class="code-anchor"><span class="typ">OnInit</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  heroes</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;;</span><span class="pln">
  isLoading </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">;</span><span class="pln">
  selectedHero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">;</span><span class="pln">

  </span><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

  ngOnInit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">getHeroes</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span><span class="pln">

  getHeroes</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isLoading </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">;</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroes </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">getHeroes</span><span class="pun">()</span><span class="pln">
                      </span><span class="com">// TODO: error handling</span><span class="pln">
                      </span><span class="pun">.</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">finalize</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">isLoading </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">));</span><span class="pln">
    </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">selectedHero </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">undefined</span><span class="pun">;</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="kwd">select</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">selectedHero </span><span class="pun">=</span><span class="pln"> hero</span><span class="pun">;</span><span class="pln"> </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接着使用下列命令添加 <code>HeroService</code>：</p><p translation-origin="off">Next, add a <code>HeroService</code> using the following command:</p>

<code-example language="sh" class="code-shell" ng-version="6.0.0"><div style="display: none">

  ng generate service Hero

</div><!----><aio-code><pre class="prettyprint lang-sh">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ng generate service </span><span class="typ">Hero</span></code>
    </pre></aio-code></code-example>
<p translation-result="">然后，把它的内容改为：</p><p translation-origin="off">Then, give it the following contents:</p>

<code-example path="reactive-forms/src/app/hero.service.ts" title="hero.service.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

import { Observable, of } from 'rxjs';
import { delay } from 'rxjs/operators';

import { Hero, heroes } from './data-model';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class HeroService {

  delayMs = 500;

  // Fake server get; assume nothing can go wrong
  getHeroes(): Observable&lt;Hero[]&gt; {
    return of(heroes).pipe(delay(this.delayMs)); // simulate latency with delay
  }

  // Fake server update; assume nothing can go wrong
  updateHero(hero: Hero): Observable&lt;Hero&gt;  {
    const oldHero = heroes.find(h =&gt; h.id === hero.id);
    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero
    return of(newHero).pipe(delay(this.delayMs)); // simulate latency with delay
  }
}


</div><!----><header class="ng-star-inserted">hero.service.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero.service.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="typ">Injectable</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">,</span><span class="pln"> of </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> delay </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'rxjs/operators'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">,</span><span class="pln"> heroes </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./data-model'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/Injectable" class="code-anchor"><span class="lit">Injectable</span></a><span class="pun">()</span><span class="pln">
</span><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  delayMs </span><span class="pun">=</span><span class="pln"> </span><span class="lit">500</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// Fake server get; assume nothing can go wrong</span><span class="pln">
  getHeroes</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">[]&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="pln">heroes</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">delay</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">delayMs</span><span class="pun">));</span><span class="pln"> </span><span class="com">// simulate latency with delay</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">

  </span><span class="com">// Fake server update; assume nothing can go wrong</span><span class="pln">
  updateHero</span><span class="pun">(</span><span class="pln">hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">):</span><span class="pln"> </span><span class="typ">Observable</span><span class="pun">&lt;</span><span class="typ">Hero</span><span class="pun">&gt;</span><span class="pln">  </span><span class="pun">{</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> oldHero </span><span class="pun">=</span><span class="pln"> heroes</span><span class="pun">.</span><span class="pln">find</span><span class="pun">(</span><span class="pln">h </span><span class="pun">=&gt;</span><span class="pln"> h</span><span class="pun">.</span><span class="pln">id </span><span class="pun">===</span><span class="pln"> hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">);</span><span class="pln">
    </span><span class="kwd">const</span><span class="pln"> newHero </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">(</span><span class="pln">oldHero</span><span class="pun">,</span><span class="pln"> hero</span><span class="pun">);</span><span class="pln"> </span><span class="com">// Demo: mutate cached hero</span><span class="pln">
    </span><span class="kwd">return</span><span class="pln"> of</span><span class="pun">(</span><span class="pln">newHero</span><span class="pun">).</span><span class="pln">pipe</span><span class="pun">(</span><span class="pln">delay</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">delayMs</span><span class="pun">));</span><span class="pln"> </span><span class="com">// simulate latency with delay</span><span class="pln">
  </span><span class="pun">}</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>HeroListComponent</code> 使用一个注入进来的 <code>HeroService</code> 来从服务器获取英雄列表，然后用一系列按钮把这些英雄展示给用户。
<code>HeroService</code> 模拟了 HTTP 服务。
它返回一个英雄组成的 <code>Observable</code> 对象，并会在短暂的延迟之后被解析出来，这是为了模拟网络延迟，并展示应用在自然延迟下的异步效果。</p><p translation-origin="off">The <code>HeroListComponent</code> uses an injected <code>HeroService</code> to retrieve heroes from the server
and then presents those heroes to the user as a series of buttons.
The <code>HeroService</code> emulates an HTTP service.
It returns an <code>Observable</code> of heroes that resolves after a short delay,
both to simulate network latency and to indicate visually
the necessarily asynchronous nature of the application.</p>

<p translation-result="">当用户点击一个英雄时，组件设置它的 <code>selectedHero</code> 属性，它绑定到 <code>HeroDetailComponent</code> 的 <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> 属性 <code>hero</code> 上。
<code>HeroDetailComponent</code> 检测到英雄的变化，并使用当前英雄的值重置此表单。</p><p translation-origin="off">When the user clicks on a hero,
the component sets its <code>selectedHero</code> property which
is bound to the <code>hero</code> <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> property of the <code>HeroDetailComponent</code>.
The <code>HeroDetailComponent</code> detects the changed hero and resets its form
with that hero's data values.</p>

<p translation-result="">"刷新"按钮会清除英雄列表和当前选中的英雄，然后重新获取英雄列表。</p><p translation-origin="off">A refresh button clears the hero list and the current selected hero before refetching the heroes.</p>

<p translation-result="">注意，<code>hero-list.component.ts</code> 从 <code>rxjs</code> 中导入了 <code>Observable</code> 和 <code>finalize</code>，而 <code>hero.service.ts</code> 导入了 <code>Observable</code>、<code>of</code> 和 <code>delay</code> 操作符。</p><p translation-origin="off">Notice that <code>hero-list.component.ts</code> imports <code>Observable</code> and the <code>finalize</code> operator, while <code>hero.service.ts</code> imports <code>Observable</code>, <code>of</code>, and the <code>delay</code> operator from <code>rxjs</code>.</p>

<p translation-result=""><code>HeroListComponent</code> 和 <code>HeroService</code> 的其它实现细节超出了本教程的范围。
不过，它所涉及的技术包含在文档的其它部分，包括《英雄指南》的 <a href="https://angular.cn/tutorial/toh-pt3" title="ToH: Multiple Components">这里</a> 和 <a href="https://angular.cn/tutorial/toh-pt4" title="ToH: Services">这里</a>。</p><p translation-origin="off">The remaining <code>HeroListComponent</code> and <code>HeroService</code> implementation details are beyond the scope of this tutorial.
However, the techniques involved are covered elsewhere in the documentation, including the <em>Tour of Heroes</em>
<a href="https://angular.cn/tutorial/toh-pt3" title="ToH: Multiple Components">here</a> and <a href="https://angular.cn/tutorial/toh-pt4" title="ToH: Services">here</a>.</p>

<p translation-result="">要使用 <code>HeroService</code>，就要把它导入到 <code>AppModule</code> 中，并添加到 <code>providers</code> 数组里。
要使用 <code>HeroListComponent</code>，就要导入它、声明它并导出它：</p><p translation-origin="off">To use the <code>HeroService</code>, import it into <code>AppModule</code> and add it to the <code>providers</code> array. To use the <code>HeroListComponent</code>, import it, declare it, and export it:</p>

<code-example path="reactive-forms/src/app/app.module.ts" region="hero-service-list" title="app.module.ts (excerpts)" linenums="false" ng-version="6.0.0"><div style="display: none">
// add JavaScript imports
import { HeroListComponent }   from './hero-list/hero-list.component';
import { HeroService }         from './hero.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  declarations: [
    AppComponent,
    HeroDetailComponent,
    HeroListComponent // &lt;--declare HeroListComponent
  ],
  // ...
  exports: [
    AppComponent,
    HeroDetailComponent,
    HeroListComponent // &lt;-- export HeroListComponent
  ],
  providers: [ HeroService ], // &lt;-- provide HeroService

</div><!----><header class="ng-star-inserted">app.module.ts (excerpts)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.module.ts (excerpts)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="com">// add JavaScript imports</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="pun">}</span><span class="pln">   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero-list/hero-list.component'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">         </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'./hero.service'</span><span class="pun">;</span><span class="pln">

</span><span class="lit">@</span><a href="https://angular.cn/api/core/NgModule" class="code-anchor"><span class="lit">NgModule</span></a><span class="pun">({</span><span class="pln">
  declarations</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroDetailComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="com">// &lt;--declare HeroListComponent</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  </span><span class="com">// ...</span><span class="pln">
  exports</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln">
    </span><span class="typ">AppComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroDetailComponent</span><span class="pun">,</span><span class="pln">
    </span><span class="typ">HeroListComponent</span><span class="pln"> </span><span class="com">// &lt;-- export HeroListComponent</span><span class="pln">
  </span><span class="pun">],</span><span class="pln">
  providers</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">],</span><span class="pln"> </span><span class="com">// &lt;-- provide HeroService</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接下来，把 <code>HeroListComponent</code> 的模板升级为：</p><p translation-origin="off">Next, update the <code>HeroListComponent</code> template with the following:</p>

<code-example path="reactive-forms/src/app/hero-list/hero-list.component.html" title="hero-list.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h3 *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="isLoading"&gt;&lt;i&gt;Loading heroes ... &lt;/i&gt;&lt;/h3&gt;
&lt;h3 *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="!isLoading"&gt;Select <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> hero:&lt;/h3&gt;

&lt;nav&gt;
  &lt;button (click)="getHeroes()" class="btn btn-primary"&gt;Refresh&lt;/button&gt;
  &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes | async" (click)="select(hero)"&gt;{{hero.name}}&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
&lt;/nav&gt;

&lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="selectedHero"&gt;
  &lt;hr&gt;
  &lt;h2&gt;Hero Detail&lt;/h2&gt;
  &lt;h3&gt;Editing: {{selectedHero.name}}&lt;/h3&gt;
  &lt;app-hero-detail [hero]="selectedHero"&gt;&lt;/app-hero-detail&gt;
&lt;/div&gt;


</div><!----><header class="ng-star-inserted">hero-list.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-list.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h3</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgIf" class="code-anchor"><span class="atn">ngIf</span></a><span class="pun">=</span><span class="atv">"isLoading"</span><span class="tag">&gt;&lt;i&gt;</span><span class="pln">Loading heroes ... </span><span class="tag">&lt;/i&gt;&lt;/h3&gt;</span><span class="pln">
</span><span class="tag">&lt;h3</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgIf" class="code-anchor"><span class="atn">ngIf</span></a><span class="pun">=</span><span class="atv">"!isLoading"</span><span class="tag">&gt;</span><span class="pln">Select </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> hero:</span><span class="tag">&lt;/h3&gt;</span><span class="pln">

</span><span class="tag">&lt;nav&gt;</span><span class="pln">
  </span><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"getHeroes()"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-primary"</span><span class="tag">&gt;</span><span class="pln">Refresh</span><span class="tag">&lt;/button&gt;</span><span class="pln">
  </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes | async"</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"select(hero)"</span><span class="tag">&gt;</span><span class="pln">{{hero.name}}</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;/nav&gt;</span><span class="pln">

</span><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgIf" class="code-anchor"><span class="atn">ngIf</span></a><span class="pun">=</span><span class="atv">"selectedHero"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;hr&gt;</span><span class="pln">
  </span><span class="tag">&lt;h2&gt;</span><span class="pln">Hero Detail</span><span class="tag">&lt;/h2&gt;</span><span class="pln">
  </span><span class="tag">&lt;h3&gt;</span><span class="pln">Editing: {{selectedHero.name}}</span><span class="tag">&lt;/h3&gt;</span><span class="pln">
  </span><span class="tag">&lt;app-hero-detail</span><span class="pln"> [</span><span class="atn">hero</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"selectedHero"</span><span class="tag">&gt;&lt;/app-hero-detail&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这些修改需要反映到 <code>AppComponent</code> 模板中。把 <code>app.component.html</code> 替换为如下内容，以便把 <code>HeroDetailComponent</code> 替换为 <code>HeroListComponent</code>：</p><p translation-origin="off">These changes need to be reflected in the <code>AppComponent</code> template. Replace the contents of <code>app.component.html</code> with updated markup to use the <code>HeroListComponent</code>, instead of the <code>HeroDetailComponent</code>:</p>

<code-example path="reactive-forms/src/app/app.component.html" title="app.component.html" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;div class="container"&gt;
  &lt;h1&gt;Reactive Forms&lt;/h1&gt;
  &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
&lt;/div&gt;


</div><!----><header class="ng-star-inserted">app.component.html</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from app.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"container"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;h1&gt;</span><span class="pln">Reactive Forms</span><span class="tag">&lt;/h1&gt;</span><span class="pln">
  </span><span class="tag">&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">最后，为 <code>HeroDetailComponent</code> 添加一个 <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> 属性，让它能从 <code>HeroListComponent</code> 中接收数据。
别忘了也要把来自 <code>@angular/core</code> 的 <code><a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a></code> 符号 <code>import</code> 进来。</p><p translation-origin="off">Finally, add an <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> property to the <code>HeroDetailComponent</code>
so <code>HeroDetailComponent</code> can receive the data from <code>HeroListComponent</code>. Remember to add the <code><a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a></code> symbol to the <code>@angular/core</code>  <code>import</code> statement in the list of JavaScript imports too.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-6.component.ts" region="hero" title="hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>() hero: Hero;

</div><!----><header class="ng-star-inserted">hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="lit">@</span><a href="https://angular.cn/api/core/Input" class="code-anchor"><span class="lit">Input</span></a><span class="pun">()</span><span class="pln"> hero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">你先，你就可以点击一个按钮并渲染一个表单了。</p><p translation-origin="off">Now you should be able to click on a button for a hero and a form renders.</p>

<h2 translation-result="" id="when-to-set-form-model-values-codengonchangescode">何时设置表单模型的值（<code>ngOnChanges</code>）<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#when-to-set-form-model-values-codengonchangescode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="when-to-set-form-model-values-ngonchanges">When to set form model values (<code>ngOnChanges</code>)<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#when-to-set-form-model-values-ngonchanges"><i class="material-icons">link</i></a></h2>

<p translation-result="">何时设置表单模型的值取决于组件何时获得数据模型的值。</p><p translation-origin="off">When to set form model values depends upon when the component gets the data model values.</p>

<p translation-result=""><code>HeroListComponent</code> 会给用户显示英雄的名字。
当用户点击某个英雄时，<code>HeroListComponent</code> 会通过绑定到 <code>hero</code> 这个输入属性，把选中的英雄传给 <code>HeroDetailComponent</code>。</p><p translation-origin="off">The <code>HeroListComponent</code> displays hero names to the user.
When the user clicks on a hero, the <code>HeroListComponent</code> passes the selected hero into the <code>HeroDetailComponent</code>
by binding to its <code>hero</code> <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> property.</p>

<code-example path="reactive-forms/src/app/hero-list/hero-list.component.1.html" title="hero-list.component.html (simplified)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;nav&gt;
  &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes | async" (click)="select(hero)"&gt;{{hero.name}}&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
&lt;/nav&gt;

&lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="selectedHero"&gt;
  &lt;app-hero-detail [hero]="selectedHero"&gt;&lt;/app-hero-detail&gt;
&lt;/div&gt;


</div><!----><header class="ng-star-inserted">hero-list.component.html (simplified)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from hero-list.component.html (simplified)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;nav&gt;</span><span class="pln">
  </span><span class="tag">&lt;</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let hero of heroes | async"</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"select(hero)"</span><span class="tag">&gt;</span><span class="pln">{{hero.name}}</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="tag">a</span></a><span class="tag">&gt;</span><span class="pln">
</span><span class="tag">&lt;/nav&gt;</span><span class="pln">

</span><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgIf" class="code-anchor"><span class="atn">ngIf</span></a><span class="pun">=</span><span class="atv">"selectedHero"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;app-hero-detail</span><span class="pln"> [</span><span class="atn">hero</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"selectedHero"</span><span class="tag">&gt;&lt;/app-hero-detail&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这种方式下，每当用户选择一个新英雄时，<code>HeroDetailComponent</code> 的 <code>hero</code> 值就会发生变化。
你可以通过 <a href="https://angular.cn/guide/lifecycle-hooks#onchanges">ngOnChanges</a> 生命周期钩子来调用 <code>setValue()</code>。只要 <code>hero</code> 这个输入属性发生了变化，Angular 就会调用这个钩子。</p><p translation-origin="off">In this approach, the value of <code>hero</code> in the <code>HeroDetailComponent</code> changes
every time the user selects a new hero.
You can call <code>setValue()</code> using the <a href="https://angular.cn/guide/lifecycle-hooks#onchanges">ngOnChanges</a>
lifecycle hook, which Angular calls whenever the <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> <code>hero</code> property changes.</p>

<h3 translation-result="" id="reset-the-form">重置表单<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reset-the-form"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="reset-the-form">Reset the form<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#reset-the-form"><i class="material-icons">link</i></a></h3>

<p translation-result="">首先，在 <code>hero-detail.component.ts</code> 中导入 <code><a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a></code> 符号。</p><p translation-origin="off">First, import the <code><a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a></code> symbol in <code>hero-detail.component.ts</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-6.component.ts" region="import-input" title="src/app/hero-detail/hero-detail.component.ts (core imports)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>, <a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a> }             from '@angular/core';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (core imports)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (core imports)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/Input" class="code-anchor"><span class="typ">Input</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnChanges" class="code-anchor"><span class="typ">OnChanges</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">             </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">接着，让 Angular 知道 <code>HeroDetailComponent</code> 实现了 <code><a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a></code>：</p><p translation-origin="off">Next, let Angular know that the <code>HeroDetailComponent</code> implements <code><a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a></code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="onchanges-implementation" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
export class HeroDetailComponent implements <a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a> {

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">export</span><span class="pln"> </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">HeroDetailComponent</span><span class="pln"> </span><span class="kwd">implements</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnChanges" class="code-anchor"><span class="typ">OnChanges</span></a><span class="pln"> </span><span class="pun">{</span></code>
    </pre></aio-code></code-example>
<p translation-result="">向该类中添加 <code>ngOnChanges</code> 方法，代码如下：</p><p translation-origin="off">Add the <code>ngOnChanges</code> method to the class as follows:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="ngOnChanges" title="src/app/hero-detail/hero-detail.component.ts (ngOnchanges)" linenums="false" ng-version="6.0.0"><div style="display: none">
ngOnChanges() {
  this.rebuildForm();
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (ngOnchanges)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (ngOnchanges)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">ngOnChanges</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">rebuildForm</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，它调用了 <code>rebuildForm()</code>，该函数是一个方法，在这里你可以对值进行设置。
你可以把 <code>rebuildForm()</code> 命名为任何对你有意义的名字。
它不是 Angular 内置的，而是你自己创建的方法，用以更有效的利用 <code>ngOnChanges</code> 钩子。</p><p translation-origin="off">Notice that it calls <code>rebuildForm()</code>, which is a method where you
can set the values. You can name <code>rebuildForm()</code> anything that makes sense to you. It isn't built into Angular, but is a method you create to effectively leverage the <code>ngOnChanges</code> lifecycle hook.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="rebuildForm" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
rebuildForm() {
  this.heroForm.reset({
    name: this.hero.name,
    address: this.hero.addresses[0] || new Address()
  });
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">rebuildForm</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="pln">reset</span><span class="pun">({</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">name</span><span class="pun">,</span><span class="pln">
    address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">addresses</span><span class="pun">[</span><span class="lit">0</span><span class="pun">]</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()</span><span class="pln">
  </span><span class="pun">});</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>rebuildForm()</code> 方法会做两件事：重置英雄的名字和地址。</p><p translation-origin="off">The <code>rebuildForm()</code> method does two things; resets the hero's name and the address.</p>

<a id="form-array"></a>
<h2 translation-result="" id="use-emformarrayem-to-present-an-array-of-codeformgroupscode">使用 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 来表示 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 数组<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#use-emformarrayem-to-present-an-array-of-codeformgroupscode"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="use-formarray-to-present-an-array-of-formgroups">Use <em>FormArray</em> to present an array of <code>FormGroups</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#use-formarray-to-present-an-array-of-formgroups"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 是一个命名对象，它的属性值是 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 和其它的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。</p><p translation-origin="off">A <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> is a named object whose property values are <code>FormControls</code> and other <code>FormGroups</code>.</p>

<p translation-result="">有时你需要表示任意数量的控件或控件组。
比如，一个英雄可能拥有 0、1 或任意数量的住址。</p><p translation-origin="off">Sometimes you need to present an arbitrary number of controls or groups.
For example, a hero may have zero, one, or any number of addresses.</p>

<p translation-result=""><code>Hero.addresses</code> 属性就是一个 <code>Address</code> 实例的数组。
一个 <code>address</code> 的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 可以显示一个 <code>Address</code> 对象。
而 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 可以显示一个 <code>address</code> <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 的数组。</p><p translation-origin="off">The <code>Hero.addresses</code> property is an array of <code>Address</code> instances.
An <code>address</code>  <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> can display one <code>Address</code>.
An Angular <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> can display an array of <code>address</code>  <code>FormGroups</code>.</p>

<p translation-result="">要访问 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 类，请先把它导入 <code>hero-detail.component.ts</code> 中：</p><p translation-origin="off">To get access to the <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> class, import it into <code>hero-detail.component.ts</code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="imports" title="src/app/hero-detail/hero-detail.component.ts (excerpt)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>, <a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a> }                   from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a>, <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>, <a href="https://angular.cn/api/forms/Validators" class="code-anchor">Validators</a> } from '@angular/forms';

import { Address, Hero, states } from '../data-model';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/core/Component" class="code-anchor"><span class="typ">Component</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/Input" class="code-anchor"><span class="typ">Input</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/core/OnChanges" class="code-anchor"><span class="typ">OnChanges</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln">                   </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/core'</span><span class="pun">;</span><span class="pln">
</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArray" class="code-anchor"><span class="typ">FormArray</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="typ">FormGroup</span></a><span class="pun">,</span><span class="pln"> </span><a href="https://angular.cn/api/forms/Validators" class="code-anchor"><span class="typ">Validators</span></a><span class="pln"> </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'@angular/forms'</span><span class="pun">;</span><span class="pln">

</span><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Hero</span><span class="pun">,</span><span class="pln"> states </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../data-model'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">要使用 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>，就要这么做：</p><p translation-origin="off">To work with a <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> do the following:</p>

<ol>
<li>
<p translation-result="">在数组中定义条目 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 或 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。</p><p translation-origin="off">Define the items in the array; that is, <code>FormControls</code> or <code>FormGroups</code>.</p>

</li>
<li>
<p translation-result="">把这个数组初始化微一组从<em>数据模型</em>中的数据创建的条目。</p><p translation-origin="off">Initialize the array with items created from data in the data model.</p>

</li>
<li>
<p translation-result="">根据用户的需求添加或移除这些条目。</p><p translation-origin="off">Add and remove items as the user requires.</p>

</li>
</ol>
<p translation-result="">为 <code>Hero.addresses</code> 定义了一个 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>，并且让用户添加或修改这些住址。</p><p translation-origin="off">Define a <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> for <code>Hero.addresses</code> and
let the user add or modify addresses.</p>

<p translation-result="">你需要在 <code>HeroDetailComponent</code> 的 <code>createForm()</code> 中重新定义表单模型，它现在只在 <code>address</code> <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 中显示第一个英雄住址。</p><p translation-origin="off">You’ll need to redefine the form model in the <code>HeroDetailComponent</code> <code>createForm()</code> method,
which currently only displays the first hero address in an <code>address</code> <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-7.component.ts" region="address-form-group" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  address: this.fb.group(new Address()), // &lt;-- <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> with <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> new address
  power: '',
  sidekick: ''
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
  address</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()),</span><span class="pln"> </span><span class="com">// &lt;-- </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> </span><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor"><span class="com">FormGroup</span></a><span class="com"> with </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> new address</span><span class="pln">
  power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
  sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="from-codeaddresscode-to-codesecretlairscode">从 <code>address</code>（住址）到 *<code>secretLairs</code>（秘密小屋）<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#from-codeaddresscode-to-codesecretlairscode"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="from-address-to-secretlairs">From <code>address</code> to <code>secretLairs</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#from-address-to-secretlairs"><i class="material-icons">link</i></a></h3>

<p translation-result="">在用户看来，英雄们没有<em>住址</em>。
只有我们凡人才有<em>住址</em>，英雄们拥有的是<em>秘密小屋</em>！
把 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 型的住址替换为 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 型的 <code>secretLairs</code> 定义：</p><p translation-origin="off">From the user's point of view, heroes don't have <em>addresses</em>.
Addresses are for mere mortals. Heroes have <em>secret lairs</em>!
Replace the address <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> definition with a <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> definition:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="secretLairs-form-array" title="src/app/hero-detail/hero-detail-8.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
this.heroForm = this.fb.group({
  name: ['', Validators.required ],
  secretLairs: this.fb.array([]), // &lt;-- secretLairs as an empty <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a>
  power: '',
  sidekick: ''
});

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail-8.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail-8.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">({</span><span class="pln">
  name</span><span class="pun">:</span><span class="pln"> </span><span class="pun">[</span><span class="str">''</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Validators</span><span class="pun">.</span><span class="pln">required </span><span class="pun">],</span><span class="pln">
  secretLairs</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="pln">array</span><span class="pun">([]),</span><span class="pln"> </span><span class="com">// &lt;-- secretLairs as an empty </span><a href="https://angular.cn/api/forms/FormArray" class="code-anchor"><span class="com">FormArray</span></a><span class="pln">
  power</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pun">,</span><span class="pln">
  sidekick</span><span class="pun">:</span><span class="pln"> </span><span class="str">''</span><span class="pln">
</span><span class="pun">});</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在 <code>hero-detail.component.html</code> 中 把 <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>="address"</code> 改为 <code><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs"</code>。</p><p translation-origin="off">In <code>hero-detail.component.html</code> change <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>="address"</code> to <code><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs"</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.html" region="form-array-name" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;div <a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs" class="well well-lg"&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor"><span class="atn">formArrayName</span></a><span class="pun">=</span><span class="atv">"secretLairs"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"well well-lg"</span><span class="tag">&gt;</span></code>
    </pre></aio-code></code-example>
<div class="alert is-helpful">
<p translation-result="">把表单的控件名从 <code>address</code> 改为 <code>secretLairs</code> 时导致了一个重要问题：<em>表单模型</em>与<em>数据模型</em>不再匹配了。</p><p translation-origin="off">Changing the form control name from <code>address</code> to <code>secretLairs</code> underscores an important point:
the <em>form model</em> doesn't have to match the <em>data model</em>.</p>

<p translation-result="">显然，必须在两者之间建立关联。但它在应用领域中的意义不限于此，它可以用于任何东西。</p><p translation-origin="off">Obviously, there has to be a relationship between the two.
But it can be anything that makes sense within the application domain.</p>

<p translation-result=""><em>展现</em>的需求经常会与<em>数据</em>的需求不同。
响应式表单的方法既强调这种差异，也能为这种差异提供了便利。</p><p translation-origin="off"><em>Presentation</em> requirements often differ from <em>data</em> requirements.
The reactive forms approach both emphasizes and facilitates this distinction.</p>

</div>
<h3 translation-result="" id="initialize-the-codesecretlairscode-emformarrayem">初始化 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 型的 <code>secretLairs</code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#initialize-the-codesecretlairscode-emformarrayem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="initialize-the-secretlairs-formarray">Initialize the <code>secretLairs</code> <em>FormArray</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#initialize-the-secretlairs-formarray"><i class="material-icons">link</i></a></h3>

<p translation-result="">默认的表单显示一个无地址的无名英雄。</p><p translation-origin="off">The default form displays a nameless hero with no addresses.</p>

<p translation-result="">你需要一个方法来用实际英雄的地址填充（或重新填充）<code>secretLairs</code>，
而不用管父组件 <code>HeroListComponent</code> 何时把 <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> 属性 <code>HeroDetailComponent.hero</code> 设置为一个新的 <code>Hero</code>。</p><p translation-origin="off">You need a method to populate (or repopulate) the <code>secretLairs</code> with actual hero addresses whenever
the parent <code>HeroListComponent</code> sets the <code>HeroDetailComponent.hero</code>  <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> property to a new <code>Hero</code>.</p>

<p translation-result="">下面的 <code>setAddresses()</code> 方法把 <code>secretLairs</code> 这个 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 替换为一个新的 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>，使用一组表示英雄地址的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 来进行初始化。在 <code>HeroDetailComponent</code> 类中添加下列内容：</p><p translation-origin="off">The following <code>setAddresses()</code> method replaces the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> with a new <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>,
initialized by an array of hero address <code>FormGroups</code>. Add this to the <code>HeroDetailComponent</code> class:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="set-addresses" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
setAddresses(addresses: Address[]) {
  const addressFGs = addresses.map(address =&gt; this.fb.group(address));
  const addressFormArray = this.fb.array(addressFGs);
  this.heroForm.setControl('secretLairs', addressFormArray);
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">setAddresses</span><span class="pun">(</span><span class="pln">addresses</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">[])</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> addressFGs </span><span class="pun">=</span><span class="pln"> addresses</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">address </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">(</span><span class="pln">address</span><span class="pun">));</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> addressFormArray </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="pln">array</span><span class="pun">(</span><span class="pln">addressFGs</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="pln">setControl</span><span class="pun">(</span><span class="str">'secretLairs'</span><span class="pun">,</span><span class="pln"> addressFormArray</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">注意，你使用 <code><a href="https://angular.cn/api/forms/FormGroup#setControl" class="code-anchor">FormGroup.setControl()</a></code> 方法，而不是 <code>setValue()</code> 方法来替换前一个 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>。
你所要替换的是<em>控件</em>，而不是控件的<em>值</em>。</p><p translation-origin="off">Notice that you replace the previous <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> with the
<code><a href="https://angular.cn/api/forms/FormGroup#setControl" class="code-anchor">FormGroup.setControl()</a></code> method, not with <code>setValue()</code>.
You're replacing a <em>control</em>, not the <em>value</em> of a control.</p>

<p translation-result="">还要注意，<code>secretLairs</code> 数组中包含的是**<code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>，而不是 <code>Address</code>。</p><p translation-origin="off">Notice also that the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> contains <code>FormGroups</code>, not <code>Addresses</code>.</p>

<p translation-result="">接着，在 <code>rebuildForm()</code> 中调用 <code>setAddresses()</code>：</p><p translation-origin="off">Next, call <code>setAddresses()</code> from within <code>rebuildForm()</code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="rebuildform" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
rebuildForm() {
  this.heroForm.reset({
    name: this.hero.name
  });
  this.setAddresses(this.hero.addresses);
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">rebuildForm</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="pln">reset</span><span class="pun">({</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">name
  </span><span class="pun">});</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">setAddresses</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">addresses</span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="get-the-emformarrayem">获取 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#get-the-emformarrayem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="get-the-formarray">Get the <em>FormArray</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#get-the-formarray"><i class="material-icons">link</i></a></h3>

<p translation-result=""><code>HeroDetailComponent</code> 应该能从 <code>secretLairs</code> <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 中显示、添加和删除条目。</p><p translation-origin="off">The <code>HeroDetailComponent</code> should be able to display, add, and remove items from the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>.</p>

<p translation-result="">使用 <code>FormGroup.get()</code> 方法来获取到 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 的引用。
把这个表达式包装进一个名叫 <code>secretLairs</code> 的便捷属性中来让它更清晰，并供复用。
在 <code>HeroDetailComponent</code> 中添加下列内容。</p><p translation-origin="off">Use the <code>FormGroup.get()</code> method to acquire a reference to that <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>.
Wrap the expression in a <code>secretLairs</code> convenience property for clarity and re-use. Add the following to <code>HeroDetailComponent</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="get-secret-lairs" title="src/app/hero-detail/hero-detail.component.ts (secretLairs property)" linenums="false" ng-version="6.0.0"><div style="display: none">
get secretLairs(): <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a> {
  return this.heroForm.get('secretLairs') as <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a>;
};

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (secretLairs property)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (secretLairs property)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">get</span><span class="pln"> secretLairs</span><span class="pun">():</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArray" class="code-anchor"><span class="typ">FormArray</span></a><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'secretLairs'</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">as</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArray" class="code-anchor"><span class="typ">FormArray</span></a><span class="pun">;</span><span class="pln">
</span><span class="pun">};</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="display-the-emformarrayem">显示 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#display-the-emformarrayem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="display-the-formarray">Display the <em>FormArray</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#display-the-formarray"><i class="material-icons">link</i></a></h3>

<p translation-result="">当前 HTML 模板显示单个的地址 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。
要把它修改成能显示 0、1 或更多个表示英雄地址的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>。</p><p translation-origin="off">The current HTML template displays a single <code>address</code> <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>.
Revise it to display zero, one, or more of the hero's <code>address</code>  <code>FormGroups</code>.</p>

<p translation-result="">要改的部分主要是把以前表示地址的 HTML 模板包裹进一个 <code>&lt;div&gt;</code> 中，并且使用 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 来重复渲染这个 <code>&lt;div&gt;</code>。</p><p translation-origin="off">This is mostly a matter of wrapping the previous template HTML for an address in a <code>&lt;div&gt;</code> and
repeating that <code>&lt;div&gt;</code> with <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code>.</p>

<p translation-result="">写这个 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 有三个要点：</p><p translation-origin="off">There are three key points when writing the <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code>:</p>

<ol>
<li>
<p translation-result="">   在 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 的 <code>&lt;div&gt;</code> 之外套上另一个包装 <code>&lt;div&gt;</code>，并且把它的 <code><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a></code> 指令设为 <code>"secretLairs"</code>。
这一步为内部的表单控件建立了一个 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 型的 <code>secretLairs</code> 作为上下文，以便重复渲染 HTML 模板。</p><p translation-origin="off">Add another wrapping <code>&lt;div&gt;</code>, around the <code>&lt;div&gt;</code> with <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code>, and
set its <code><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a></code> directive to <code>"secretLairs"</code>.
This step establishes the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> as the context for form controls in the inner, repeated HTML template.</p>

</li>
<li>
<p translation-result="">   这些重复条目的数据源是 <code><a href="https://angular.cn/api/forms/FormArray#controls" class="code-anchor">FormArray.controls</a></code> 而不是 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 本身。
每个控件都是一个 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 型的地址对象，与以前的模板 HTML 所期望的格式完全一样。</p><p translation-origin="off">The source of the repeated items is the <code><a href="https://angular.cn/api/forms/FormArray#controls" class="code-anchor">FormArray.controls</a></code>, not the <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> itself.
Each control is an <code>address</code>  <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code>, exactly what the previous (now repeated) template HTML expected.</p>

</li>
<li>
<p translation-result="">   每个被重复渲染的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 都需要一个独一无二的 <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a></code>，它必须是 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 在这个 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 中的索引。
你将复用这个索引，以便为每个地址组合出一个独一无二的标签。</p><p translation-origin="off">Each repeated <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> needs a unique <code><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a></code>, which must be the index of the <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> in the <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>.
You'll re-use that index to compose a unique label for each address.</p>

</li>
</ol>
<p translation-result="">下面是 HTML 模板中<em>秘密小屋</em>部分的代码骨架：</p><p translation-origin="off">Here's the skeleton for the secret lairs section of the HTML template:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.html" region="form-array-skeleton" title="src/app/hero-detail/hero-detail.component.html (*ngFor)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;div <a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs" class="well well-lg"&gt;
  &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let address of secretLairs.controls; let i=index" [<a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>]="i" &gt;
    &lt;!-- The repeated address template --&gt;
  &lt;/div&gt;
&lt;/div&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (*ngFor)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (*ngFor)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor"><span class="atn">formArrayName</span></a><span class="pun">=</span><span class="atv">"secretLairs"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"well well-lg"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let address of secretLairs.controls; let i=index"</span><span class="pln"> [</span><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor"><span class="atn">formGroupName</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"i"</span><span class="pln"> </span><span class="tag">&gt;</span><span class="pln">
    </span><span class="com">&lt;!-- The repeated address template --&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这里是<em>秘密小屋</em>部分的完整模板：</p><p translation-origin="off">Here's the complete template for the secret lairs section. Add this to <code>HeroDetailComponent</code> template, replacing the <code>forGroupName=address</code>  <code>&lt;div&gt;</code>:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.html" region="form-array" title="src/app/hero-detail/hero-detail.component.html (excerpt)" ng-version="6.0.0"><div style="display: none">
&lt;div <a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs" class="well well-lg"&gt;
  &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let address of secretLairs.controls; let i=index" [<a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>]="i" &gt;
    &lt;!-- The repeated address template --&gt;
    &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;
    &lt;div <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>="margin-left: 1em;"&gt;
      &lt;div class="form-group"&gt;
        &lt;label class="center-block"&gt;Street:
          &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="street"&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="form-group"&gt;
        &lt;label class="center-block"&gt;City:
          &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="city"&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="form-group"&gt;
        &lt;label class="center-block"&gt;State:
          &lt;select class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;
            &lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a> of states" [value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;{{<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>}}&lt;/<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;
          &lt;/select&gt;
        &lt;/label&gt;
      &lt;/div&gt;
      &lt;div class="form-group"&gt;
        &lt;label class="center-block"&gt;Zip Code:
          &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="zip"&gt;
        &lt;/label&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;br&gt;
    &lt;!-- End of the repeated address template --&gt;
  &lt;/div&gt;
&lt;/div&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (excerpt)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (excerpt)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><ol class="linenums"><li class="L0"><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor"><span class="atn">formArrayName</span></a><span class="pun">=</span><span class="atv">"secretLairs"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"well well-lg"</span><span class="tag">&gt;</span></li><li class="L1"><span class="pln">  </span><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let address of secretLairs.controls; let i=index"</span><span class="pln"> [</span><a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor"><span class="atn">formGroupName</span></a><span class="pln">]</span><span class="pun">=</span><span class="atv">"i"</span><span class="pln"> </span><span class="tag">&gt;</span></li><li class="L2"><span class="pln">    </span><span class="com">&lt;!-- The repeated address template --&gt;</span></li><li class="L3"><span class="pln">    </span><span class="tag">&lt;h4&gt;</span><span class="pln">Address #{{i + 1}}</span><span class="tag">&lt;/h4&gt;</span></li><li class="L4"><span class="pln">    </span><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="atn">style</span></a><span class="pun">=</span><span class="atv">"</span><span class="pln">margin</span><span class="pun">-</span><span class="pln">left</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1em</span><span class="pun">;</span><span class="atv">"</span><span class="tag">&gt;</span></li><li class="L5"><span class="pln">      </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span></li><li class="L6"><span class="pln">        </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Street:</span></li><li class="L7"><span class="pln">          </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"street"</span><span class="tag">&gt;</span></li><li class="L8"><span class="pln">        </span><span class="tag">&lt;/label&gt;</span></li><li class="L9"><span class="pln">      </span><span class="tag">&lt;/div&gt;</span></li><li class="L0"><span class="pln">      </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span></li><li class="L1"><span class="pln">        </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">City:</span></li><li class="L2"><span class="pln">          </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"city"</span><span class="tag">&gt;</span></li><li class="L3"><span class="pln">        </span><span class="tag">&lt;/label&gt;</span></li><li class="L4"><span class="pln">      </span><span class="tag">&lt;/div&gt;</span></li><li class="L5"><span class="pln">      </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span></li><li class="L6"><span class="pln">        </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">State:</span></li><li class="L7"><span class="pln">          </span><span class="tag">&lt;select</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span></li><li class="L8"><span class="pln">            </span><span class="tag">&lt;</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let </span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv"> of states"</span><span class="pln"> [</span><span class="atn">value</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="atv">state</span></a><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">{{</span><a href="https://angular.cn/api/animations/state" class="code-anchor"><span class="pln">state</span></a><span class="pln">}}</span><span class="tag">&lt;/</span><a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor"><span class="tag">option</span></a><span class="tag">&gt;</span></li><li class="L9"><span class="pln">          </span><span class="tag">&lt;/select&gt;</span></li><li class="L0"><span class="pln">        </span><span class="tag">&lt;/label&gt;</span></li><li class="L1"><span class="pln">      </span><span class="tag">&lt;/div&gt;</span></li><li class="L2"><span class="pln">      </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group"</span><span class="tag">&gt;</span></li><li class="L3"><span class="pln">        </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">Zip Code:</span></li><li class="L4"><span class="pln">          </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-control"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"zip"</span><span class="tag">&gt;</span></li><li class="L5"><span class="pln">        </span><span class="tag">&lt;/label&gt;</span></li><li class="L6"><span class="pln">      </span><span class="tag">&lt;/div&gt;</span></li><li class="L7"><span class="pln">    </span><span class="tag">&lt;/div&gt;</span></li><li class="L8"><span class="pln">    </span><span class="tag">&lt;br&gt;</span></li><li class="L9"><span class="pln">    </span><span class="com">&lt;!-- End of the repeated address template --&gt;</span></li><li class="L0"><span class="pln">  </span><span class="tag">&lt;/div&gt;</span></li><li class="L1"><span class="tag">&lt;/div&gt;</span></li></ol></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="add-a-new-lair-to-the-emformarrayem">把新的小屋添加到 <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> 中<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#add-a-new-lair-to-the-emformarrayem"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="add-a-new-lair-to-the-formarray">Add a new lair to the <em>FormArray</em><a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#add-a-new-lair-to-the-formarray"><i class="material-icons">link</i></a></h3>

<p translation-result="">添加一个 <code>addLair()</code> 方法，它获取 <code>secretLairs</code> 数组，并把新的表示地址的 <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> 添加到其中。</p><p translation-origin="off">Add an <code>addLair()</code> method that gets the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code> and appends a new <code>address</code>  <code><a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a></code> to it.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="add-lair" title="src/app/hero-detail/hero-detail.component.ts (addLair method)" linenums="false" ng-version="6.0.0"><div style="display: none">
addLair() {
  this.secretLairs.push(this.fb.group(new Address()));
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (addLair method)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (addLair method)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">addLair</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">secretLairs</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">fb</span><span class="pun">.</span><span class="kwd">group</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">()));</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">把一个按钮放在表单中，以便用户可以添加新的<em>秘密小屋</em>，并把它传给组件的 <code>addLair()</code> 方法。</p><p translation-origin="off">Place a button on the form so the user can add a new <em>secret lair</em> and wire it to the component's <code>addLair()</code> method. Put it just before the closing <code>&lt;/div&gt;</code> of the <code>secretLairs</code>  <code><a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a></code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.html" region="add-lair" title="src/app/hero-detail/hero-detail.component.html (addLair button)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;button (click)="addLair()" type="button"&gt;Add <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> Secret Lair&lt;/button&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (addLair button)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (addLair button)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;button</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"addLair()"</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"button"</span><span class="tag">&gt;</span><span class="pln">Add </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> Secret Lair</span><span class="tag">&lt;/button&gt;</span></code>
    </pre></aio-code></code-example>
<div class="alert is-important">
<p translation-result="">务必确保添加了 <code>type="button"</code> 属性。
因为如果不明确指定类型，按钮的默认类型就是“submit”（提交）。
当你稍后添加了提交表单的动作时，每个“submit”按钮都是触发一次提交操作，而它将可能会做一些处理，比如保存当前的修改。
你显然不会希望每当用户点击“Add a Secret Lair”按钮时就保存一次。</p><p translation-origin="off">Be sure to add the <code>type="button"</code> attribute
because without an explicit type, the button type defaults to "submit".
When you later add a form submit action, every "submit" button triggers the submit action which
might do something like save the current changes.
You do not want to save changes when the user clicks the <em>Add a Secret Lair</em> button.</p>

</div>
<h3 translation-result="" id="try-it">试试看！<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#try-it"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="try-it">Try it!<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#try-it"><i class="material-icons">link</i></a></h3>

<p translation-result="">回到浏览器中，选择名叫“Magneta”的英雄。
"Magneta"没有地址，你会在表单底部的诊断用 JSON 中看到这一点。</p><p translation-origin="off">Back in the browser, select the hero named "Magneta".
"Magneta" doesn't have an address, as you can see in the diagnostic JSON at the bottom of the form.</p>

<figure>
  <img src="./Angular - 响应式表单_files/addresses-array.png" alt="JSON output of addresses array" width="400" height="40">
</figure>
<p translation-result="">点击“Add a Secret Lair”按钮，一个新的地址区就出现了，干得好！</p><p translation-origin="off">Click the "<em>Add a Secret Lair</em>" button.
A new address section appears. Well done!</p>

<h3 translation-result="" id="remove-a-lair">移除一个小屋<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#remove-a-lair"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="remove-a-lair">Remove a lair<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#remove-a-lair"><i class="material-icons">link</i></a></h3>

<p translation-result="">这个例子可以<em>添加</em>地址，但是还不能<em>移除</em>它们。
作为练习，你可以自己写一个 <code>removeLair</code> 方法，并且把它关联到地址 HTML 模板的一个按钮上。</p><p translation-origin="off">This example can <em>add</em> addresses but it can't <em>remove</em> them.
For extra credit, write a <code>removeLair</code> method and wire it to a button on the repeating address HTML.</p>

<a id="observe-control"></a>
<h2 translation-result="" id="observe-control-changes">监视控件的变化<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#observe-control-changes"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="observe-control-changes">Observe control changes<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#observe-control-changes"><i class="material-icons">link</i></a></h2>

<p translation-result="">每当用户在父组件 <code>HeroListComponent</code> 中选取了一个英雄，Angular 就会调用一次 <code>ngOnChanges</code>。
选取英雄会修改输入属性 <code>HeroDetailComponent.hero()</code>。</p><p translation-origin="off">Angular calls <code>ngOnChanges()</code> when the user picks a hero in the parent <code>HeroListComponent</code>.
Picking a hero changes the <code>HeroDetailComponent.hero</code>  <code>@<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>()</code> property.</p>

<p translation-result="">当用户修改英雄的<em>名字</em>或<em>秘密小屋</em>时，Angular<em>并不会</em>调用 <code>ngOnChanges()</code>。
幸运的是，你可以通过订阅表单控件的属性之一来了解这些变化，此属性会发出变更通知。</p><p translation-origin="off">Angular does <em>not</em> call <code>ngOnChanges()</code> when the user modifies the hero's <code>name</code> or <code>secretLairs</code>.
Fortunately, you can learn about such changes by subscribing to one of the <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> properties
that raises a change event.</p>

<p translation-result="">有一些属性，比如 <code>valueChanges</code>，可以返回一个 RxJS 的 <code>Observable</code> 对象。
要监听控件值的变化，你并不需要对 RxJS 的 <code>Observable</code> 了解更多。</p><p translation-origin="off">These are properties, such as <code>valueChanges</code>, that return an RxJS <code>Observable</code>.
You don't need to know much about RxJS <code>Observable</code> to monitor form control values.</p>

<p translation-result="">添加下列方法，以监听 <code>name</code> 这个 <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> 中值的变化。</p><p translation-origin="off">Add the following method to log changes to the value of the <code>name</code> <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="log-name-change" title="src/app/hero-detail/hero-detail.component.ts (logNameChange)" linenums="false" ng-version="6.0.0"><div style="display: none">
nameChangeLog: string[] = [];
logNameChange() {
  const nameControl = this.heroForm.get('name');
  nameControl.valueChanges.forEach(
    (value: string) =&gt; this.nameChangeLog.push(value)
  );
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (logNameChange)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (logNameChange)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">nameChangeLog</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[];</span><span class="pln">
logNameChange</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> nameControl </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="kwd">get</span><span class="pun">(</span><span class="str">'name'</span><span class="pun">);</span><span class="pln">
  nameControl</span><span class="pun">.</span><span class="pln">valueChanges</span><span class="pun">.</span><span class="pln">forEach</span><span class="pun">(</span><span class="pln">
    </span><span class="pun">(</span><span class="kwd">value</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">nameChangeLog</span><span class="pun">.</span><span class="pln">push</span><span class="pun">(</span><span class="kwd">value</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">在构造函数中调用它，就在 <code>createForm()</code> 之后。</p><p translation-origin="off">Call it in the constructor, after <code>createForm()</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail-8.component.ts" region="ctor" title="src/app/hero-detail/hero-detail.component.ts" linenums="false" ng-version="6.0.0"><div style="display: none">
constructor(private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>) {
  this.createForm();
  this.logNameChange();
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="kwd">private</span><span class="pln"> fb</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">createForm</span><span class="pun">();</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">logNameChange</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result=""><code>logNameChange()</code> 方法会把一条改名记录追加到 <code>nameChangeLog</code> 数组中。
用 <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> 绑定在组件模板的底部显示这个数组：</p><p translation-origin="off">The <code>logNameChange()</code> method pushes name-change values into a <code>nameChangeLog</code> array.
Display that array at the bottom of the component template with this <code>*<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a></code> binding:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.html" region="name-change-log" title="src/app/hero-detail/hero-detail.component.html (Name change log)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;h4&gt;Name change log&lt;/h4&gt;
&lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let name of nameChangeLog"&gt;{{name}}&lt;/div&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (Name change log)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (Name change log)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;h4&gt;</span><span class="pln">Name change log</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
</span><span class="tag">&lt;div</span><span class="pln"> *</span><a href="https://angular.cn/api/common/NgForOf" class="code-anchor"><span class="atn">ngFor</span></a><span class="pun">=</span><span class="atv">"let name of nameChangeLog"</span><span class="tag">&gt;</span><span class="pln">{{name}}</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">返回浏览器，选择一个英雄（比如“Magneta”），并开始在 <code>name</code> 输入框中键入。
你会看到，每次按键都会记录一个新名字。</p><p translation-origin="off">Return to the browser, select a hero; for example, Magneta, and start typing in the <code>name</code>  <code>&lt;input&gt;</code>.
You should see a new name in the log after each keystroke.</p>

<h3 translation-result="" id="when-to-use-it">什么时候用它<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#when-to-use-it"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="when-to-use-it">When to use it<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#when-to-use-it"><i class="material-icons">link</i></a></h3>

<p translation-result="">插值表达式绑定时显示姓名变化比较简单的方式。
在组件类中订阅表单控件属性变化的可观察对象以触发应用逻辑则是比较难的方式。</p><p translation-origin="off">An interpolation binding is the easier way to display a name change.
Subscribing to an observable <code><a href="https://angular.cn/api/forms/FormControl" class="code-anchor">FormControl</a></code> property is handy for triggering
application logic within the component class.</p>

<a id="save"></a>
<h2 translation-result="" id="save-form-data">保存表单数据<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#save-form-data"><i class="material-icons">link</i></a></h2><h2 translation-origin="off" id="save-form-data">Save form data<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#save-form-data"><i class="material-icons">link</i></a></h2>

<p translation-result=""><code>HeroDetailComponent</code> 捕获了用户输入，但没有用它做任何事。
在真实的应用中，你可能要保存这些英雄的变化。
在真实的应用中，你还要能丢弃未保存的变更，然后继续编辑。
在实现完本节的这些特性之后，表单是这样的：</p><p translation-origin="off">The <code>HeroDetailComponent</code> captures user input but it doesn't do anything with it.
In a real app, you'd probably save those hero changes, revert unsaved changes, and resume editing.
After you implement both features in this section, the form will look like this:</p>

<figure>
  <img src="./Angular - 响应式表单_files/save-revert-buttons.png" alt="Form with save &amp; revert buttons" width="389" height="297">
</figure>
<h3 translation-result="" id="save">保存<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#save"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="save">Save<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#save"><i class="material-icons">link</i></a></h3>

<p translation-result="">当用户提交表单时，<code>HeroDetailComponent</code> 会把英雄实例的<em>数据模型</em>传给所注入进来的 <code>HeroService</code> 的一个方法来进行保存。
在 <code>HeroDetailComponent</code> 中添加如下内容：</p><p translation-origin="off">When the user submits the form,
the <code>HeroDetailComponent</code> will pass an instance of the hero <em>data model</em>
to a save method on the injected <code>HeroService</code>. Add the following to <code>HeroDetailComponent</code>.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="on-submit" title="src/app/hero-detail/hero-detail.component.ts (onSubmit)" linenums="false" ng-version="6.0.0"><div style="display: none">
onSubmit() {
  this.hero = this.prepareSaveHero();
  this.heroService.updateHero(this.hero).subscribe(/* error handling */);
  this.rebuildForm();
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (onSubmit)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (onSubmit)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">onSubmit</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">prepareSaveHero</span><span class="pun">();</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroService</span><span class="pun">.</span><span class="pln">updateHero</span><span class="pun">(</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">).</span><span class="pln">subscribe</span><span class="pun">(</span><span class="com">/* error handling */</span><span class="pun">);</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">rebuildForm</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<!-- TODO: Need to add `private heroService: HeroService` to constructor and import the HeroService. Remove novalidate-->
<p translation-result="">原始的 <code>hero</code> 中有一些保存之前的值，用户的修改仍然是在<em>表单模型</em>中。
所以你要根据原始英雄（根据 <code>hero.id</code> 找到它）的值组合出一个新的 <code>hero</code> 对象，并用 <code>prepareSaveHero()</code> 助手来深层复制变化后的模型值。</p><p translation-origin="off">This original <code>hero</code> had the pre-save values. The user's changes are still in the <em>form model</em>.
So you create a new <code>hero</code> from a combination of original hero values (the <code>hero.id</code>)
and deep copies of the changed form model values, using the <code>prepareSaveHero()</code> helper.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="prepare-save-hero" title="src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)" linenums="false" ng-version="6.0.0"><div style="display: none">
prepareSaveHero(): Hero {
  const formModel = this.heroForm.value;

  // deep copy of form model lairs
  const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(
    (address: Address) =&gt; Object.assign({}, address)
  );

  // return new `Hero` object containing <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> combination of original hero value(s)
  // and deep copies of changed form model values
  const saveHero: Hero = {
    id: this.hero.id,
    name: formModel.name as string,
    // addresses: formModel.secretLairs // &lt;-- bad!
    addresses: secretLairsDeepCopy
  };
  return saveHero;
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">prepareSaveHero</span><span class="pun">():</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> formModel </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">heroForm</span><span class="pun">.</span><span class="kwd">value</span><span class="pun">;</span><span class="pln">

  </span><span class="com">// deep copy of form model lairs</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> secretLairsDeepCopy</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">[]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> formModel</span><span class="pun">.</span><span class="pln">secretLairs</span><span class="pun">.</span><span class="pln">map</span><span class="pun">(</span><span class="pln">
    </span><span class="pun">(</span><span class="pln">address</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Address</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Object</span><span class="pun">.</span><span class="pln">assign</span><span class="pun">({},</span><span class="pln"> address</span><span class="pun">)</span><span class="pln">
  </span><span class="pun">);</span><span class="pln">

  </span><span class="com">// return new `Hero` object containing </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="com">a</span></a><span class="com"> combination of original hero value(s)</span><span class="pln">
  </span><span class="com">// and deep copies of changed form model values</span><span class="pln">
  </span><span class="kwd">const</span><span class="pln"> saveHero</span><span class="pun">:</span><span class="pln"> </span><span class="typ">Hero</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span><span class="pln">
    id</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">hero</span><span class="pun">.</span><span class="pln">id</span><span class="pun">,</span><span class="pln">
    name</span><span class="pun">:</span><span class="pln"> formModel</span><span class="pun">.</span><span class="pln">name </span><span class="kwd">as</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">,</span><span class="pln">
    </span><span class="com">// addresses: formModel.secretLairs // &lt;-- bad!</span><span class="pln">
    addresses</span><span class="pun">:</span><span class="pln"> secretLairsDeepCopy
  </span><span class="pun">};</span><span class="pln">
  </span><span class="kwd">return</span><span class="pln"> saveHero</span><span class="pun">;</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<p translation-result="">确保导入了 <code>HeroService</code> 并把它加入了构造函数中：</p><p translation-origin="off">Make sure to import <code>HeroService</code> and add it to the constructor:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="import-service" title="src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)" linenums="false" ng-version="6.0.0"><div style="display: none">
import { HeroService }           from '../hero.service';

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pln"> </span><span class="pun">}</span><span class="pln">           </span><span class="kwd">from</span><span class="pln"> </span><span class="str">'../hero.service'</span><span class="pun">;</span></code>
    </pre></aio-code></code-example>
<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="ctor" title="src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)" linenums="false" ng-version="6.0.0"><div style="display: none">
constructor(
  private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>,
  private heroService: HeroService) {

  this.createForm();
  this.logNameChange();
}

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (prepareSaveHero)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="kwd">constructor</span><span class="pun">(</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> fb</span><span class="pun">:</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor"><span class="typ">FormBuilder</span></a><span class="pun">,</span><span class="pln">
  </span><span class="kwd">private</span><span class="pln"> heroService</span><span class="pun">:</span><span class="pln"> </span><span class="typ">HeroService</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln">

  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">createForm</span><span class="pun">();</span><span class="pln">
  </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">logNameChange</span><span class="pun">();</span><span class="pln">
</span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<div class="l-sub-section">
<p translation-result=""><strong>地址的深层复制</strong></p><p translation-origin="off"><strong>Address deep copy</strong></p>

<p translation-result="">你已经把 <code>formModel.secretLairs</code> 赋值给了 <code>saveHero.addresses</code>（参见注释掉的部分），
<code>saveHero.addresses</code> 数组中的地址和 <code>formModel.secretLairs</code> 中的会是同一个对象。
用户随后对小屋所在街道的修改将会改变 <code>saveHero</code> 中的街道地址。</p><p translation-origin="off">Had you assigned the <code>formModel.secretLairs</code> to <code>saveHero.addresses</code> (see line commented out),
the addresses in <code>saveHero.addresses</code> array would be the same objects
as the lairs in the <code>formModel.secretLairs</code>.
A user's subsequent changes to a lair street would mutate an address street in the <code>saveHero</code>.</p>

<p translation-result="">但 <code>prepareSaveHero</code> 方法会制作表单模型中的 <code>secretLairs</code> 对象的复本，因此实际上并没有修改原有对象。</p><p translation-origin="off">The <code>prepareSaveHero</code> method makes copies of the form model's <code>secretLairs</code> objects so that can't happen.</p>

</div>
<h3 translation-result="" id="revert-cancel-changes">丢弃（撤销修改）<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#revert-cancel-changes"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="revert-cancel-changes">Revert (cancel changes)<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#revert-cancel-changes"><i class="material-icons">link</i></a></h3>

<p translation-result="">用户可以撤销修改，并通过点击 <em>Revert</em> 按钮来把表单恢复到原始状态。</p><p translation-origin="off">The user cancels changes and reverts the form to the original state by pressing the Revert button.</p>

<p translation-result="">丢弃很容易。只要重新执行 <code>rebuildForm()</code> 方法就可以根据原始的、未修改过的 <code>hero</code> 数据模型重新构建出表单模型。</p><p translation-origin="off">Reverting is easy. Simply re-execute the <code>rebuildForm()</code> method that built the form model from the original, unchanged <code>hero</code> data model.</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.ts" region="revert" title="src/app/hero-detail/hero-detail.component.ts (revert)" linenums="false" ng-version="6.0.0"><div style="display: none">
revert() { this.rebuildForm(); }

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts (revert)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.ts (revert)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="pln">revert</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">rebuildForm</span><span class="pun">();</span><span class="pln"> </span><span class="pun">}</span></code>
    </pre></aio-code></code-example>
<h3 translation-result="" id="buttons">按钮<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#buttons"><i class="material-icons">link</i></a></h3><h3 translation-origin="off" id="buttons">Buttons<a title="Link to this heading" class="header-link" aria-hidden="true" href="https://angular.cn/guide/reactive-forms#buttons"><i class="material-icons">link</i></a></h3>

<p translation-result="">把“Save”和“Revert”按钮添加到组件模板的顶部：</p><p translation-origin="off">Add the "Save" and "Revert" buttons near the top of the component's template:</p>

<code-example path="reactive-forms/src/app/hero-detail/hero-detail.component.html" region="buttons" title="src/app/hero-detail/hero-detail.component.html (Save and Revert buttons)" linenums="false" ng-version="6.0.0"><div style="display: none">
&lt;form [formGroup]="heroForm" (ngSubmit)="onSubmit()"&gt;
  &lt;div <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>="margin-bottom: 1em"&gt;
    &lt;button type="submit"
            [disabled]="heroForm.pristine" class="btn btn-success"&gt;Save&lt;/button&gt; &amp;nbsp;
    &lt;button type="button" (click)="revert()"
            [disabled]="heroForm.pristine" class="btn btn-danger"&gt;Revert&lt;/button&gt;
  &lt;/div&gt;

  &lt;!-- Hero Detail Controls --&gt;
  &lt;div class="form-group radio"&gt;
    &lt;h4&gt;Super power:&lt;/h4&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="flight"&gt;Flight&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="x-ray vision"&gt;X-ray vision&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="strength"&gt;Strength&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="checkbox"&gt;
    &lt;label class="center-block"&gt;
      &lt;input type="checkbox" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="sidekick"&gt;I have <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> sidekick.
    &lt;/label&gt;
  &lt;/div&gt;
&lt;/form&gt;

</div><!----><header class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html (Save and Revert buttons)</header><aio-code class="headed-code"><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/hero-detail/hero-detail.component.html (Save and Revert buttons)">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;form</span><span class="pln"> [</span><span class="atn">formGroup</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"heroForm"</span><span class="pln"> (</span><span class="atn">ngSubmit</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"onSubmit()"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><a href="https://angular.cn/api/animations/style" class="code-anchor"><span class="atn">style</span></a><span class="pun">=</span><span class="atv">"</span><span class="pln">margin</span><span class="pun">-</span><span class="pln">bottom</span><span class="pun">:</span><span class="pln"> </span><span class="lit">1em</span><span class="atv">"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"submit"</span><span class="pln">
            [</span><span class="atn">disabled</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"heroForm.pristine"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-success"</span><span class="tag">&gt;</span><span class="pln">Save</span><span class="tag">&lt;/button&gt;</span><span class="pln"> &amp;nbsp;
    </span><span class="tag">&lt;button</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"button"</span><span class="pln"> (</span><span class="atn">click</span><span class="pln">)</span><span class="pun">=</span><span class="atv">"revert()"</span><span class="pln">
            [</span><span class="atn">disabled</span><span class="pln">]</span><span class="pun">=</span><span class="atv">"heroForm.pristine"</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"btn btn-danger"</span><span class="tag">&gt;</span><span class="pln">Revert</span><span class="tag">&lt;/button&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">

  </span><span class="com">&lt;!-- Hero Detail Controls --&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"form-group radio"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;h4&gt;</span><span class="pln">Super power:</span><span class="tag">&lt;/h4&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"flight"</span><span class="tag">&gt;</span><span class="pln">Flight</span><span class="tag">&lt;/label&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"x-ray vision"</span><span class="tag">&gt;</span><span class="pln">X-ray vision</span><span class="tag">&lt;/label&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"radio"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"power"</span><span class="pln"> </span><span class="atn">value</span><span class="pun">=</span><span class="atv">"strength"</span><span class="tag">&gt;</span><span class="pln">Strength</span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
  </span><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="tag">&gt;</span><span class="pln">
    </span><span class="tag">&lt;label</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"center-block"</span><span class="tag">&gt;</span><span class="pln">
      </span><span class="tag">&lt;input</span><span class="pln"> </span><span class="atn">type</span><span class="pun">=</span><span class="atv">"checkbox"</span><span class="pln"> </span><a href="https://angular.cn/api/forms/FormControlName" class="code-anchor"><span class="atn">formControlName</span></a><span class="pun">=</span><span class="atv">"sidekick"</span><span class="tag">&gt;</span><span class="pln">I have </span><a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor"><span class="pln">a</span></a><span class="pln"> sidekick.
    </span><span class="tag">&lt;/label&gt;</span><span class="pln">
  </span><span class="tag">&lt;/div&gt;</span><span class="pln">
</span><span class="tag">&lt;/form&gt;</span></code>
    </pre></aio-code></code-example>
<p translation-result="">这些按钮默认是禁用的，直到用户通过修改任何一个表单控件的值“弄脏”了表单中的数据（即 <code>heroForm.dirty</code>）。</p><p translation-origin="off">The buttons are disabled until the user "dirties" the form by changing a value in any of its form controls (<code>heroForm.dirty</code>).</p>

<p translation-result="">点击一个类型为 <code>"submit"</code> 的按钮会触发 <code>ngSubmit</code> 事件，而它会调用组件的 <code>onSubmit</code> 方法。
点击“Revert”按钮则会调用组件的 <code>revert</code> 方法。
现在，用户可以保存或放弃修改了。</p><p translation-origin="off">Clicking a button of type <code>"submit"</code> triggers the <code>ngSubmit</code> event which calls the component's <code>onSubmit</code> method.
Clicking the revert button triggers a call to the component's <code>revert</code> method.
Users now can save or revert changes.</p>

<p translation-result="">试试 <live-example stackblitz="final" title="Reactive Forms (final) in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/final.stackblitz.html" title="Reactive Forms (final) in Stackblitz">Reactive Forms (final) in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/final.reactive-forms.zip">下载范例</a></span></span></span></live-example>.</p><p translation-origin="off">Try the <live-example stackblitz="final" title="Reactive Forms (final) in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/final.stackblitz.html" title="Reactive Forms (final) in Stackblitz">Reactive Forms (final) in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/final.reactive-forms.zip">下载范例</a></span></span></span></live-example>.</p>

<a id="source-code"></a>
<p translation-result="">最终版中的核心文件如下：</p><p translation-origin="off">The key files of the final version are as follows:</p>

<code-tabs ng-version="6.0.0"><div style="display: none">

  <code-pane title="src/app/app.component.html" path="reactive-forms/src/app/app.component.html">
&lt;div class="container"&gt;
  &lt;h1&gt;Reactive Forms&lt;/h1&gt;
  &lt;app-hero-list&gt;&lt;/app-hero-list&gt;
&lt;/div&gt;


</code-pane>

  <code-pane title="src/app/app.component.ts" path="reactive-forms/src/app/app.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a> } from '@angular/core';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent { }


</code-pane>

  <code-pane title="src/app/app.module.ts" path="reactive-forms/src/app/app.module.ts">
import { <a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> }            from '@angular/core';
import { <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a> }       from '@angular/platform-browser';
import { <a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a> } from '@angular/forms';  // &lt;-- #1 import module

import { AppComponent }        from './app.component';
import { HeroDetailComponent } from './hero-detail/hero-detail.component';
// add JavaScript imports
import { HeroListComponent }   from './hero-list/hero-list.component';
import { HeroService }         from './hero.service';

@<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a>({
  declarations: [
    AppComponent,
    HeroDetailComponent,
    HeroListComponent // &lt;--declare HeroListComponent
  ],
  imports: [
    <a href="https://angular.cn/api/platform-browser/BrowserModule" class="code-anchor">BrowserModule</a>,
    <a href="https://angular.cn/api/forms/ReactiveFormsModule" class="code-anchor">ReactiveFormsModule</a> // &lt;-- #2 add to @<a href="https://angular.cn/api/core/NgModule" class="code-anchor">NgModule</a> imports
  ],
  // export for the DemoModule
  // ...
  exports: [
    AppComponent,
    HeroDetailComponent,
    HeroListComponent // &lt;-- export HeroListComponent
  ],
  providers: [ HeroService ], // &lt;-- provide HeroService
  bootstrap: [ AppComponent ]
})
export class AppModule { }


</code-pane>

  <code-pane title="src/app/hero-detail/hero-detail.component.ts" path="reactive-forms/src/app/hero-detail/hero-detail.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>, <a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a> }       from '@angular/core';
import { <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a>, <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>, <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a> } from '@angular/forms';

import { Address, Hero, states } from '../data-model';
import { HeroService }           from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-detail',
  templateUrl: './hero-detail.component.html',
  styleUrls: ['./hero-detail.component.css']
})

export class HeroDetailComponent implements <a href="https://angular.cn/api/core/OnChanges" class="code-anchor">OnChanges</a> {
  @<a href="https://angular.cn/api/core/Input" class="code-anchor">Input</a>() hero: Hero;

  heroForm: <a href="https://angular.cn/api/forms/FormGroup" class="code-anchor">FormGroup</a>;
  nameChangeLog: string[] = [];
  states = states;

  constructor(
    private fb: <a href="https://angular.cn/api/forms/FormBuilder" class="code-anchor">FormBuilder</a>,
    private heroService: HeroService) {

    this.createForm();
    this.logNameChange();
  }

  createForm() {
    this.heroForm = this.fb.group({
      name: '',
      secretLairs: this.fb.array([]),
      power: '',
      sidekick: ''
    });
  }

  ngOnChanges() {
    this.rebuildForm();
  }

  rebuildForm() {
    this.heroForm.reset({
      name: this.hero.name
    });
    this.setAddresses(this.hero.addresses);
  }

  get secretLairs(): <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a> {
    return this.heroForm.get('secretLairs') as <a href="https://angular.cn/api/forms/FormArray" class="code-anchor">FormArray</a>;
  };

  setAddresses(addresses: Address[]) {
    const addressFGs = addresses.map(address =&gt; this.fb.group(address));
    const addressFormArray = this.fb.array(addressFGs);
    this.heroForm.setControl('secretLairs', addressFormArray);
  }

  addLair() {
    this.secretLairs.push(this.fb.group(new Address()));
  }

  onSubmit() {
    this.hero = this.prepareSaveHero();
    this.heroService.updateHero(this.hero).subscribe(/* error handling */);
    this.rebuildForm();
  }

  prepareSaveHero(): Hero {
    const formModel = this.heroForm.value;

    // deep copy of form model lairs
    const secretLairsDeepCopy: Address[] = formModel.secretLairs.map(
      (address: Address) =&gt; Object.assign({}, address)
    );

    // return new `Hero` object containing <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> combination of original hero value(s)
    // and deep copies of changed form model values
    const saveHero: Hero = {
      id: this.hero.id,
      name: formModel.name as string,
      // addresses: formModel.secretLairs // &lt;-- bad!
      addresses: secretLairsDeepCopy
    };
    return saveHero;
  }

  revert() { this.rebuildForm(); }

  logNameChange() {
    const nameControl = this.heroForm.get('name');
    nameControl.valueChanges.forEach(
      (value: string) =&gt; this.nameChangeLog.push(value)
    );
  }
}


</code-pane>

  <code-pane title="src/app/hero-detail/hero-detail.component.html" path="reactive-forms/src/app/hero-detail/hero-detail.component.html">
&lt;form [formGroup]="heroForm" (ngSubmit)="onSubmit()"&gt;
  &lt;div <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>="margin-bottom: 1em"&gt;
    &lt;button type="submit"
            [disabled]="heroForm.pristine" class="btn btn-success"&gt;Save&lt;/button&gt; &amp;nbsp;
    &lt;button type="button" (click)="revert()"
            [disabled]="heroForm.pristine" class="btn btn-danger"&gt;Revert&lt;/button&gt;
  &lt;/div&gt;

  &lt;!-- Hero Detail Controls --&gt;
  &lt;div class="form-group"&gt;
      &lt;label class="center-block"&gt;Name:
        &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="name"&gt;
      &lt;/label&gt;
  &lt;/div&gt;

  &lt;div <a href="https://angular.cn/api/forms/FormArrayName" class="code-anchor">formArrayName</a>="secretLairs" class="well well-lg"&gt;
    &lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let address of secretLairs.controls; let i=index" [<a href="https://angular.cn/api/forms/FormGroupName" class="code-anchor">formGroupName</a>]="i" &gt;
      &lt;!-- The repeated address template --&gt;
      &lt;h4&gt;Address #{{i + 1}}&lt;/h4&gt;
      &lt;div <a href="https://angular.cn/api/animations/style" class="code-anchor">style</a>="margin-left: 1em;"&gt;
        &lt;div class="form-group"&gt;
          &lt;label class="center-block"&gt;Street:
            &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="street"&gt;
          &lt;/label&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
          &lt;label class="center-block"&gt;City:
            &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="city"&gt;
          &lt;/label&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
          &lt;label class="center-block"&gt;State:
            &lt;select class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;
              &lt;<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a> of states" [value]="<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>"&gt;{{<a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>}}&lt;/<a href="https://angular.cn/api/forms/NgSelectOption" class="code-anchor">option</a>&gt;
            &lt;/select&gt;
          &lt;/label&gt;
        &lt;/div&gt;
        &lt;div class="form-group"&gt;
          &lt;label class="center-block"&gt;Zip Code:
            &lt;input class="form-control" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="zip"&gt;
          &lt;/label&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;br&gt;
      &lt;!-- End of the repeated address template --&gt;
    &lt;/div&gt;
    &lt;button (click)="addLair()" type="button"&gt;Add <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> Secret Lair&lt;/button&gt;
  &lt;/div&gt;
  &lt;div class="form-group radio"&gt;
    &lt;h4&gt;Super power:&lt;/h4&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="flight"&gt;Flight&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="x-ray vision"&gt;X-ray vision&lt;/label&gt;
    &lt;label class="center-block"&gt;&lt;input type="radio" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="power" value="strength"&gt;Strength&lt;/label&gt;
  &lt;/div&gt;
  &lt;div class="checkbox"&gt;
    &lt;label class="center-block"&gt;
      &lt;input type="checkbox" <a href="https://angular.cn/api/forms/FormControlName" class="code-anchor">formControlName</a>="sidekick"&gt;I have <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> sidekick.
    &lt;/label&gt;
  &lt;/div&gt;
&lt;/form&gt;

&lt;p&gt;heroForm value: {{ heroForm.value | <a href="https://angular.cn/api/common/JsonPipe" class="code-anchor">json</a>}}&lt;/p&gt;

&lt;h4&gt;Name change log&lt;/h4&gt;
&lt;div *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let name of nameChangeLog"&gt;{{name}}&lt;/div&gt;


</code-pane>

  <code-pane title="src/app/hero-list/hero-list.component.html" path="reactive-forms/src/app/hero-list/hero-list.component.html">
&lt;h3 *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="isLoading"&gt;&lt;i&gt;Loading heroes ... &lt;/i&gt;&lt;/h3&gt;
&lt;h3 *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="!isLoading"&gt;Select <a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> hero:&lt;/h3&gt;

&lt;nav&gt;
  &lt;button (click)="getHeroes()" class="btn btn-primary"&gt;Refresh&lt;/button&gt;
  &lt;<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a> *<a href="https://angular.cn/api/common/NgForOf" class="code-anchor">ngFor</a>="let hero of heroes | async" (click)="select(hero)"&gt;{{hero.name}}&lt;/<a href="https://angular.cn/api/router/RouterLinkWithHref" class="code-anchor">a</a>&gt;
&lt;/nav&gt;

&lt;div *<a href="https://angular.cn/api/common/NgIf" class="code-anchor">ngIf</a>="selectedHero"&gt;
  &lt;hr&gt;
  &lt;h2&gt;Hero Detail&lt;/h2&gt;
  &lt;h3&gt;Editing: {{selectedHero.name}}&lt;/h3&gt;
  &lt;app-hero-detail [hero]="selectedHero"&gt;&lt;/app-hero-detail&gt;
&lt;/div&gt;


</code-pane>

  <code-pane title="src/app/hero-list/hero-list.component.ts" path="reactive-forms/src/app/hero-list/hero-list.component.ts">
import { <a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>, <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> } from '@angular/core';
import { Observable }        from 'rxjs';
import { finalize } from 'rxjs/operators';

import { Hero }        from '../data-model';
import { HeroService } from '../hero.service';

@<a href="https://angular.cn/api/core/Component" class="code-anchor">Component</a>({
  selector: 'app-hero-list',
  templateUrl: './hero-list.component.html',
  styleUrls: ['./hero-list.component.css']
})
export class HeroListComponent implements <a href="https://angular.cn/api/core/OnInit" class="code-anchor">OnInit</a> {
  heroes: Observable&lt;Hero[]&gt;;
  isLoading = false;
  selectedHero: Hero;

  constructor(private heroService: HeroService) { }

  ngOnInit() { this.getHeroes(); }

  getHeroes() {
    this.isLoading = true;
    this.heroes = this.heroService.getHeroes()
                      // TODO: error handling
                      .pipe(finalize(() =&gt; this.isLoading = false));
    this.selectedHero = undefined;
  }

  select(hero: Hero) { this.selectedHero = hero; }
}


</code-pane>

  <code-pane title="src/app/data-model.ts" path="reactive-forms/src/app/data-model.ts">
export class Hero {
  id = 0;
  name = '';
  addresses: Address[];
}

export class Address {
  street = '';
  city   = '';
  <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>  = '';
  zip    = '';
}

export const heroes: Hero[] = [
  {
    id: 1,
    name: 'Whirlwind',
    addresses: [
      {street: '123 Main',  city: 'Anywhere', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'CA',  zip: '94801'},
      {street: '456 Maple', city: 'Somewhere', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'VA', zip: '23226'},
    ]
  },
  {
    id: 2,
    name: 'Bombastic',
    addresses: [
      {street: '789 Elm',  city: 'Smallville', <a href="https://angular.cn/api/animations/state" class="code-anchor">state</a>: 'OH',  zip: '04501'},
    ]
  },
  {
    id: 3,
    name: 'Magneta',
    addresses: [ ]
  },
];

export const states = ['CA', 'MD', 'OH', 'VA'];


</code-pane>

  <code-pane title="src/app/hero.service.ts" path="reactive-forms/src/app/hero.service.ts">
import { <a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a> } from '@angular/core';

import { Observable, of } from 'rxjs';
import { delay } from 'rxjs/operators';

import { Hero, heroes } from './data-model';

@<a href="https://angular.cn/api/core/Injectable" class="code-anchor">Injectable</a>()
export class HeroService {

  delayMs = 500;

  // Fake server get; assume nothing can go wrong
  getHeroes(): Observable&lt;Hero[]&gt; {
    return of(heroes).pipe(delay(this.delayMs)); // simulate latency with delay
  }

  // Fake server update; assume nothing can go wrong
  updateHero(hero: Hero): Observable&lt;Hero&gt;  {
    const oldHero = heroes.find(h =&gt; h.id === hero.id);
    const newHero = Object.assign(oldHero, hero); // Demo: mutate cached hero
    return of(newHero).pipe(delay(this.delayMs)); // simulate latency with delay
  }
}


</code-pane>

</div><mat-tab-group class="code-tab-group mat-tab-group mat-primary" disableripple=""><mat-tab-header class="mat-tab-header mat-tab-header-pagination-controls-enabled"><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-before mat-elevation-z4 mat-ripple mat-tab-header-pagination-disabled" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div><div class="mat-tab-label-container"><div class="mat-tab-list" role="tablist" style="transform: translate3d(0px, 0px, 0px);"><div class="mat-tab-labels"><!----><div class="mat-tab-label mat-ripple mat-tab-label-active ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-0" tabindex="0" aria-controls="mat-tab-content-25-0" aria-selected="true"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/app.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-1" tabindex="-1" aria-controls="mat-tab-content-25-1" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/app.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-2" tabindex="-1" aria-controls="mat-tab-content-25-2" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/app.module.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-3" tabindex="-1" aria-controls="mat-tab-content-25-3" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/hero-detail/hero-detail.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-4" tabindex="-1" aria-controls="mat-tab-content-25-4" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/hero-detail/hero-detail.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-5" tabindex="-1" aria-controls="mat-tab-content-25-5" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/hero-list/hero-list.component.html</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-6" tabindex="-1" aria-controls="mat-tab-content-25-6" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/hero-list/hero-list.component.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-7" tabindex="-1" aria-controls="mat-tab-content-25-7" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/data-model.ts</span><!----><!----></div></div><div class="mat-tab-label mat-ripple ng-star-inserted" mat-ripple="" mattablabelwrapper="" role="tab" id="mat-tab-label-25-8" tabindex="-1" aria-controls="mat-tab-content-25-8" aria-selected="false"><div class="mat-tab-label-content"><!----><!----><span class="ng-star-inserted">src/app/hero.service.ts</span><!----><!----></div></div></div><mat-ink-bar class="mat-ink-bar" style="visibility: visible; left: 0px; width: 232px;"></mat-ink-bar></div></div><div aria-hidden="true" class="mat-tab-header-pagination mat-tab-header-pagination-after mat-elevation-z4 mat-ripple" mat-ripple=""><div class="mat-tab-header-pagination-chevron"></div></div></mat-tab-header><div class="mat-tab-body-wrapper"><!----><mat-tab-body class="mat-tab-body ng-tns-c10-95 mat-tab-body-active ng-star-inserted" role="tabpanel" id="mat-tab-content-25-0" aria-labelledby="mat-tab-label-25-0"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: none;"><!----><!----><aio-code class="ng-star-inserted" style=""><pre class="prettyprint lang-">      <!----><button class="material-icons copy-button no-print ng-star-inserted" title="Copy code snippet" aria-label="Copy code snippet from src/app/app.component.html">
        <span aria-hidden="true">content_copy</span>
      </button>
      <code class="animated fadeIn"><span class="tag">&lt;div</span><span class="pln"> </span><span class="atn">class</span><span class="pun">=</span><span class="atv">"container"</span><span class="tag">&gt;</span><span class="pln">
  </span><span class="tag">&lt;h1&gt;</span><span class="pln">Reactive Forms</span><span class="tag">&lt;/h1&gt;</span><span class="pln">
  </span><span class="tag">&lt;app-hero-list&gt;&lt;/app-hero-list&gt;</span><span class="pln">
</span><span class="tag">&lt;/div&gt;</span></code>
    </pre></aio-code><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-96 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-1" aria-labelledby="mat-tab-label-25-1"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-97 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-2" aria-labelledby="mat-tab-label-25-2"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-98 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-3" aria-labelledby="mat-tab-label-25-3"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-99 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-4" aria-labelledby="mat-tab-label-25-4"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-100 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-5" aria-labelledby="mat-tab-label-25-5"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-101 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-6" aria-labelledby="mat-tab-label-25-6"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-102 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-7" aria-labelledby="mat-tab-label-25-7"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body><mat-tab-body class="mat-tab-body ng-tns-c10-103 ng-star-inserted" role="tabpanel" id="mat-tab-content-25-8" aria-labelledby="mat-tab-label-25-8"><div class="mat-tab-body-content ng-trigger ng-trigger-translateTab" style="transform: translate3d(100%, 0px, 0px);"><!----></div></mat-tab-body></div></mat-tab-group></code-tabs>
<p translation-result="">你可以到<live-example title="Reactive Forms Demo in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/stackblitz.html" title="Reactive Forms Demo in Stackblitz">Reactive Forms Demo in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/reactive-forms.zip">下载范例</a></span></span></span></live-example>中下载本章所有步骤的完整代码。</p><p translation-origin="off">You can download the complete source for all steps in this guide
from the <live-example title="Reactive Forms Demo in Stackblitz" ng-version="6.0.0"><span><!----><!----><!----><!----><span class="ng-star-inserted"><a target="_blank" href="https://angular.cn/generated/live-examples/reactive-forms/stackblitz.html" title="Reactive Forms Demo in Stackblitz">Reactive Forms Demo in Stackblitz</a><!----><span class="ng-star-inserted"> / <a download="" title="下载范例" href="https://angular.cn/generated/zips/reactive-forms/reactive-forms.zip">下载范例</a></span></span></span></live-example> live example.</p>


</div>
<!-- links to this doc:
 - guide/change-log
 - guide/dynamic-form
 - guide/form-validation
 - guide/npm-packages
-->
<!-- links from this doc:
 - api/animations/state
 - api/animations/style
 - api/common/JsonPipe
 - api/common/NgForOf
 - api/common/NgIf
 - api/core/Component
 - api/core/Injectable
 - api/core/Input
 - api/core/NgModule
 - api/core/OnChanges
 - api/core/OnInit
 - api/core/ViewChild
 - api/core/testing/async
 - api/core/testing/fakeAsync
 - api/forms/AbstractControl
 - api/forms/CheckboxControlValueAccessor
 - api/forms/Form
 - api/forms/FormArray
 - api/forms/FormArray#controls
 - api/forms/FormArrayName
 - api/forms/FormBuilder
 - api/forms/FormControl
 - api/forms/FormControlName
 - api/forms/FormGroup
 - api/forms/FormGroup#setControl
 - api/forms/FormGroupName
 - api/forms/FormsModule
 - api/forms/NgForm
 - api/forms/NgModel
 - api/forms/NgSelectOption
 - api/forms/RadioControlValueAccessor
 - api/forms/ReactiveFormsModule
 - api/forms/SelectControlValueAccessor
 - api/forms/SelectMultipleControlValueAccessor
 - api/forms/Validators
 - api/platform-browser/BrowserModule
 - api/router/RouterLinkWithHref
 - guide/form-validation
 - guide/forms
 - guide/lifecycle-hooks#afterview
 - guide/lifecycle-hooks#onchanges
 - guide/reactive-forms#add-a-formgroup
 - guide/reactive-forms#add-a-new-lair-to-the-emformarrayem
 - guide/reactive-forms#add-a-new-lair-to-the-formarray
 - guide/reactive-forms#async-vs-sync
 - guide/reactive-forms#buttons
 - guide/reactive-forms#choosing-reactive-or-template-driven-forms
 - guide/reactive-forms#create-a-data-model
 - guide/reactive-forms#create-a-emreactive-formsem-component
 - guide/reactive-forms#create-a-reactive-forms-component
 - guide/reactive-forms#create-the-codeherolistcomponentcode-and-codeheroservicecode
 - guide/reactive-forms#create-the-herolistcomponent-and-heroservice
 - guide/reactive-forms#create-the-template
 - guide/reactive-forms#display-the-codeherodetailcomponentcode
 - guide/reactive-forms#display-the-emformarrayem
 - guide/reactive-forms#display-the-formarray
 - guide/reactive-forms#display-the-herodetailcomponent
 - guide/reactive-forms#essential-form-classes
 - guide/reactive-forms#essentials
 - guide/reactive-forms#form-array
 - guide/reactive-forms#from-address-to-secretlairs
 - guide/reactive-forms#from-codeaddresscode-to-codesecretlairscode
 - guide/reactive-forms#get-the-emformarrayem
 - guide/reactive-forms#get-the-formarray
 - guide/reactive-forms#import-the-codereactiveformsmodulecode
 - guide/reactive-forms#import-the-reactiveformsmodule
 - guide/reactive-forms#initialize-the-codesecretlairscode-emformarrayem
 - guide/reactive-forms#initialize-the-secretlairs-formarray
 - guide/reactive-forms#inspect-codeformcontrolcode-properties
 - guide/reactive-forms#inspect-formcontrol-properties
 - guide/reactive-forms#introduction-to-codeformbuildercode
 - guide/reactive-forms#introduction-to-formbuilder
 - guide/reactive-forms#introduction-to-reactive-forms
 - guide/reactive-forms#more-codeformcontrolcodes
 - guide/reactive-forms#more-formcontrols
 - guide/reactive-forms#nested-formgroups
 - guide/reactive-forms#observe-control-changes
 - guide/reactive-forms#patchvalue
 - guide/reactive-forms#populate-the-form-model-with-codesetvaluecode-and-codepatchvaluecode
 - guide/reactive-forms#populate-the-form-model-with-setvalue-and-patchvalue
 - guide/reactive-forms#reactive-forms
 - guide/reactive-forms#reactive-forms-1
 - guide/reactive-forms#reactive-forms-2
 - guide/reactive-forms#reactive-forms-3
 - guide/reactive-forms#remove-a-lair
 - guide/reactive-forms#reset-the-form
 - guide/reactive-forms#revert-cancel-changes
 - guide/reactive-forms#save
 - guide/reactive-forms#save-form-data
 - guide/reactive-forms#setup
 - guide/reactive-forms#setup-4
 - guide/reactive-forms#setvalue
 - guide/reactive-forms#style-the-app
 - guide/reactive-forms#taking-a-look-at-the-form-model
 - guide/reactive-forms#template-driven-forms
 - guide/reactive-forms#template-driven-forms-2
 - guide/reactive-forms#the-data-model-and-the-form-model
 - guide/reactive-forms#try-it
 - guide/reactive-forms#use-emformarrayem-to-present-an-array-of-codeformgroupscode
 - guide/reactive-forms#use-formarray-to-present-an-array-of-formgroups
 - guide/reactive-forms#validatorsrequired
 - guide/reactive-forms#when-to-set-form-model-values-codengonchangescode
 - guide/reactive-forms#when-to-set-form-model-values-ngonchanges
 - guide/reactive-forms#when-to-use-it
 - tutorial/toh-pt3
 - tutorial/toh-pt4
 - http://getbootstrap.com/
--></div></aio-doc-viewer><aio-dt><!----></aio-dt></section></mat-sidenav-content></mat-sidenav-container><!----><div class="toc-container no-print ng-star-inserted" style="max-height: 3682px;"><aio-toc><!----><div class="toc-inner no-print collapsed ng-star-inserted"><!----><!----><ul class="toc-list"><!----><!----><!----><li title="响应式表单link" class="h1 active ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#reactive-forms-2">响应式表单</a></li><!----><!----><!----><li title="响应式表单简介link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#introduction-to-reactive-forms">响应式表单简介</a></li><!----><!----><!----><li title="响应式表单link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#reactive-forms-3">响应式表单</a></li><!----><!----><!----><li title="模板驱动表单link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#template-driven-forms-2">模板驱动表单</a></li><!----><!----><!----><li title="异步 vs. 同步link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#async-vs-sync">异步 vs. 同步</a></li><!----><!----><!----><li title="选择响应式表单还是模板驱动表单？link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#choosing-reactive-or-template-driven-forms">选择响应式表单还是模板驱动表单？</a></li><!----><!----><!----><li title="准备工作link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#setup-4">准备工作</a></li><!----><!----><!----><li title="创建数据模型link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#create-a-data-model">创建数据模型</a></li><!----><!----><!----><li title="创建响应式表单组件link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#create-a-emreactive-formsem-component">创建<em>响应式表单</em>组件</a></li><!----><!----><!----><li title="创建模板link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#create-the-template">创建模板</a></li><!----><!----><!----><li title="导入 ReactiveFormsModulelink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#import-the-codereactiveformsmodulecode">导入 <code>ReactiveFormsModule</code></a></li><!----><!----><!----><li title="显示 HeroDetailComponentlink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#display-the-codeherodetailcomponentcode">显示 <code>HeroDetailComponent</code></a></li><!----><!----><!----><li title="基础的表单类link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#essential-form-classes">基础的表单类</a></li><!----><!----><!----><li title="为应用添加样式link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#style-the-app">为应用添加样式</a></li><!----><!----><!----><li title="添加 FormGrouplink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#add-a-formgroup">添加 FormGroup</a></li><!----><!----><!----><li title="表单模型概览link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#taking-a-look-at-the-form-model">表单模型概览</a></li><!----><!----><!----><li title="FormBuilder 简介link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#introduction-to-codeformbuildercode"><code>FormBuilder</code> 简介</a></li><!----><!----><!----><li title="Validators.requiredlink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#validatorsrequired"><code>Validators.required</code></a></li><!----><!----><!----><li title="更多的 FormControllink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#more-codeformcontrolcodes">更多的 <code>FormControl</code></a></li><!----><!----><!----><li title="多级 FormGrouplink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#nested-formgroups">多级 <code>FormGroup</code></a></li><!----><!----><!----><li title="查看 FormControl 的属性link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#inspect-codeformcontrolcode-properties">查看 <code>FormControl</code> 的属性</a></li><!----><!----><!----><li title="数据模型与表单模型link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#the-data-model-and-the-form-model">数据模型与表单模型</a></li><!----><!----><!----><li title="使用 setValue() 和 patchValue() 来操纵表单模型link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#populate-the-form-model-with-codesetvaluecode-and-codepatchvaluecode">使用 <code>setValue()</code> 和 <code>patchValue()</code> 来操纵表单模型</a></li><!----><!----><!----><li title="setValue()link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#setvalue"><code>setValue()</code></a></li><!----><!----><!----><li title="patchValue()link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#patchvalue"><code>patchValue()</code></a></li><!----><!----><!----><li title="创建 HeroListComponent 和 HeroServicelink" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#create-the-codeherolistcomponentcode-and-codeheroservicecode">创建 <code>HeroListComponent</code> 和 <code>HeroService</code></a></li><!----><!----><!----><li title="何时设置表单模型的值（ngOnChanges）link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#when-to-set-form-model-values-codengonchangescode">何时设置表单模型的值（<code>ngOnChanges</code>）</a></li><!----><!----><!----><li title="重置表单link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#reset-the-form">重置表单</a></li><!----><!----><!----><li title="使用 FormArray 来表示 FormGroup 数组link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#use-emformarrayem-to-present-an-array-of-codeformgroupscode">使用 <code>FormArray</code> 来表示 <code>FormGroup</code> 数组</a></li><!----><!----><!----><li title="从 address（住址）到 *secretLairs（秘密小屋）link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#from-codeaddresscode-to-codesecretlairscode">从 <code>address</code>（住址）到 *<code>secretLairs</code>（秘密小屋）</a></li><!----><!----><!----><li title="初始化 FormArray 型的 secretLairslink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#initialize-the-codesecretlairscode-emformarrayem">初始化 <code>FormArray</code> 型的 <code>secretLairs</code></a></li><!----><!----><!----><li title="获取 FormArraylink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#get-the-emformarrayem">获取 <code>FormArray</code></a></li><!----><!----><!----><li title="显示 FormArraylink" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#display-the-emformarrayem">显示 <code>FormArray</code></a></li><!----><!----><!----><li title="把新的小屋添加到 FormArray 中link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#add-a-new-lair-to-the-emformarrayem">把新的小屋添加到 <code>FormArray</code> 中</a></li><!----><!----><!----><li title="试试看！link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#try-it">试试看！</a></li><!----><!----><!----><li title="移除一个小屋link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#remove-a-lair">移除一个小屋</a></li><!----><!----><!----><li title="监视控件的变化link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#observe-control-changes">监视控件的变化</a></li><!----><!----><!----><li title="什么时候用它link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#when-to-use-it">什么时候用它</a></li><!----><!----><!----><li title="保存表单数据link" class="h2 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#save-form-data">保存表单数据</a></li><!----><!----><!----><li title="保存link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#save">保存</a></li><!----><!----><!----><li title="丢弃（撤销修改）link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#revert-cancel-changes">丢弃（撤销修改）</a></li><!----><!----><!----><li title="按钮link" class="h3 ng-star-inserted"><a href="https://angular.cn/guide/reactive-forms#buttons">按钮</a></li><!----></ul><!----></div></aio-toc></div><footer class="no-print"><aio-footer><div class="grid-fluid"><!----><div class="footer-block ng-star-inserted"><h3>资源</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/about" title="Angular 贡献者。">关于</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/resources" title="网络上的 Angular 工具、培训、博客等">资源列表</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/presskit" title="我们的联系方式、LOGO 和品牌">宣传资料</a></li><li class="ng-star-inserted"><a class="link" href="https://blog.angular.io/" title="Angular 官方博客">博客</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>帮助</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://stackoverflow.com/questions/tagged/angular" title="Stack Overflow: 这里的社区会回答你关于 Angular 的技术问题">Stack Overflow</a></li><li class="ng-star-inserted"><a class="link" href="https://gitter.im/angular/angular" title="和老鸟聊 Angular">Gitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular/issues" title="在 github 上报告问题和建议。">报告问题</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/code-of-conduct/blob/master/CODE_OF_CONDUCT.md" title="让我们彼此尊重">行为规范</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>社区</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.cn/events" title="Post issues and suggestions on github.">活动</a></li><li class="ng-star-inserted"><a class="link" href="http://www.meetup.com/topics/angularjs/" title="参加聚会，向别的开发人员学习">聚会</a></li><li class="ng-star-inserted"><a class="link" href="https://twitter.com/angular" title="Twitter">Twitter</a></li><li class="ng-star-inserted"><a class="link" href="https://github.com/angular/angular" title="GitHub">GitHub</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.cn/contribute" title="向 Angular 做贡献">做贡献</a></li></ul></div><div class="footer-block ng-star-inserted"><h3>多语言</h3><ul><!----><li class="ng-star-inserted"><a class="link" href="https://angular.io/" title="English Version.">English Version</a></li><li class="ng-star-inserted"><a class="link" href="https://angular.jp/" title="日本語版">日本語版</a></li></ul></div></div><p> Powered by Google ©2010-2018. 代码授权方式：<a href="https://angular.cn/license" title="License text">MIT-style License</a>. 文档授权方式：<a href="http://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>. </p><p><span class="text-caption">本网站由第三方公司洛阳永欣维护 &nbsp;<a href="http://www.miitbeian.gov.cn/">豫ICP备16019859号-1</a></span></p><p> 当前版本：6.0.1-build.180+sha.8494cf4. </p></aio-footer></footer></aio-shell>

  <noscript>
    &lt;div class="background-sky hero"&gt;&lt;/div&gt;
    &lt;section id="intro"&gt;
      &lt;div class="hero-logo"&gt;
        &lt;img src="assets/images/logos/angular/angular.svg" width="250" height="250"&gt;
      &lt;/div&gt;
      &lt;div class="homepage-container"&gt;
        &lt;div class="hero-headline"&gt;一套框架，多种平台&lt;br&gt;移动 &amp;amp; 桌面&lt;/div&gt;
      &lt;/div&gt;
    &lt;/section&gt;
    &lt;h2 style="color: red; text-align: center; margin-top: -50px;"&gt;
      &lt;b&gt;&lt;i&gt;该网站需要浏览器支持 JavaScript &lt;/i&gt;&lt;/b&gt;
    &lt;/h2&gt;
  </noscript>


<script type="text/javascript" src="./Angular - 响应式表单_files/runtime.e7e60529879ffb07e28e.js.下载"></script><script type="text/javascript" src="./Angular - 响应式表单_files/polyfills.56dafdd128abda80a86c.js.下载"></script><script type="text/javascript" src="./Angular - 响应式表单_files/main.e580488e21fdad9d749c.js.下载"></script><div class="cdk-visually-hidden" aria-atomic="true" aria-live="polite"></div></body></html>